{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/git-post-01/","result":{"data":{"site":{"siteMetadata":{"title":"Happy Hwan","author":"Hwan Choi"}},"markdownRemark":{"id":"32df6c66-b2db-5267-a758-124f5486e448","html":"<h2>시작하기에 앞서</h2>\n<p>멀티캠퍼스 수업에서의 3주차에서 3일간에 걸친 Git 강의가 끝이 났다. 이것저것 배우면서 배웠던 것을 한 곳에 모아 포스트 형식으로 올려놓은 것이다. 대략적으로 깃의 기초, 원격저장소 설정,  .gitignore에 대해 알아보자.</p>\n<h1>Git 기초</h1>\n<h2>0. 준비 사항</h2>\n<ul>\n<li>\n<p><a href=\"https://gitforwindows.org/\">git bash</a></p>\n<ul>\n<li>git을 활용하기 위한 CLI(command Line interface)를 제공한다</li>\n<li>source, tree, github desktop 등을 통해 GUI 환경에서도 활용 가능하다.</li>\n</ul>\n</li>\n</ul>\n<h2>1. 로컬 저장소 활용하기</h2>\n<h3>1. 저장소 초기화</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> init\ninitialized existing Git repository <span class=\"token keyword\">in</span> C:/Users/student/Desktop/git_tutorial/.git/</code></pre>\n      </div>\n<ul>\n<li>저장소(repository)를 초기화 하게 되면 .git 폴더가 해당 디렉토리에 생성된다.</li>\n<li>\n<p>bush 창에서는 (master) 라고 표기된다.</p>\n<ul>\n<li>현재 브랜치가 master라는 것을 의미한다.</li>\n</ul>\n</li>\n</ul>\n<h3>2. add ~staging area</h3>\n<blockquote>\n<p>git으로 관리되는 파일들은 Working directory(작업 환경), Staging Area, commit 단계를 거쳐 이력에 저장된다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> a.txt <span class=\"token comment\">#파일명</span>\n$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> images <span class=\"token comment\">#폴더명</span>\n$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> <span class=\"token comment\">#현재 디렉토리의 모든파일 및 폴더</span></code></pre>\n      </div>\n<ul>\n<li>add 후 상태</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> status\nOn branch master\nChanges to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git restore --staged &lt;file>...\"</span> to unstage<span class=\"token punctuation\">)</span>\n        new file:   b.txt</code></pre>\n      </div>\n<h3>3. commit</h3>\n<blockquote>\n<p>커밋은 코드의 이력을 남기는 과정이다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"add:b.txt\"</span>\n<span class=\"token punctuation\">[</span>master 46b3223<span class=\"token punctuation\">]</span> add:b.txt\n <span class=\"token number\">1</span> <span class=\"token function\">file</span> changed, <span class=\"token number\">1</span> insertion<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span>\n create mode <span class=\"token number\">100644</span> b.txt</code></pre>\n      </div>\n<ul>\n<li>커밋 메시지는 항상 해당 이력에 대한 정보를 담을 수 있도록 작성하는 것이 좋다.</li>\n<li>일관적인 커밋 메시지를 작성하는 습관을 들이자</li>\n<li>\n<p>이력 확인을 위해서는 아래의 명령어를 활용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> log\ncommit 46b32233afb1f111445cd3d2bbf586ae2e2725d8 <span class=\"token punctuation\">(</span>HEAD -<span class=\"token operator\">></span> master<span class=\"token punctuation\">)</span>\nAuthor: choihwan2 <span class=\"token operator\">&lt;</span>choihwan2@naver.com<span class=\"token operator\">></span>\nDate:   Mon Dec <span class=\"token number\">16</span> <span class=\"token number\">14</span>:23:38 <span class=\"token number\">2019</span> +0900\n\n  add:b.txt\n\ncommit d5e516b29033aad088fe91bdead201ffd7c38eb7\nAuthor: choihwan2 <span class=\"token operator\">&lt;</span>choihwan2@naver.com<span class=\"token operator\">></span>\nDate:   Mon Dec <span class=\"token number\">16</span> <span class=\"token number\">11</span>:41:25 <span class=\"token number\">2019</span> +0900\n\n  Fix:a.txt\n\ncommit 76a5998098344000b84b2517e9104e507fcf3681\nAuthor: choihwan2 <span class=\"token operator\">&lt;</span>choihwan2@naver.com<span class=\"token operator\">></span>\nDate:   Mon Dec <span class=\"token number\">16</span> <span class=\"token number\">11</span>:30:19 <span class=\"token number\">2019</span> +0900\n\n  Add: a.txt</code></pre>\n      </div>\n<p><strong>항상 status 명령어를 통해 git의 상태를 확인하자! commit 이후에는 log 명령어를 통해 이력들을 확인하자</strong></p>\n</li>\n</ul>\n<hr>\n<h2>원격 저장소 활용하기</h2>\n<blockquote>\n<p>원격 저장소(remote repository)를 제공하는 서비스는 다양하게 존재한다.</p>\n<p>github을 기준으로 설명한다.</p>\n</blockquote>\n<h2>0. 준비하기</h2>\n<ul>\n<li>Github에서 저장소(repository) 생성</li>\n</ul>\n<h3>1. 원격 저장소 설정</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin <span class=\"token punctuation\">{</span>github url<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<ul>\n<li>{github url} 부분에는 원격 저장소 url을 작성한다.</li>\n<li>원격 저장소(remote)로 {github url}  을 orgin 이라는 이름으로 추가(add)하는 명령어이다.</li>\n<li>원격 저장소 목록을 보기 위해서는 아래의 명령어를 활용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> remote -v\norigin  https://github.com/choihwan2/TR.git <span class=\"token punctuation\">(</span>fetch<span class=\"token punctuation\">)</span>\norigin  https://github.com/choihwan2/TR.git <span class=\"token punctuation\">(</span>push<span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<h3>2. push</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> push origin master\n\nEnumerating objects: <span class=\"token number\">4</span>, done.\nCounting objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">4</span>/4<span class=\"token punctuation\">)</span>, done.\nDelta compression using up to <span class=\"token number\">8</span> threads\nCompressing objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">3</span>/3<span class=\"token punctuation\">)</span>, done.\nWriting objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">3</span>/3<span class=\"token punctuation\">)</span>, <span class=\"token number\">2.44</span> KiB <span class=\"token operator\">|</span> <span class=\"token number\">2.44</span> MiB/s, done.\nTotal <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nTo https://github.com/choihwan2/TR.git\n   46b3223<span class=\"token punctuation\">..</span>3c6588e  master -<span class=\"token operator\">></span> master</code></pre>\n      </div>\n<ul>\n<li>설정된 원격 저장소(origin) 으로 push!</li>\n</ul>\n<p>폴더의 내용을 수정 및 삭제, 생성 등을 하게 된다면 add comit push 명령어를 통해서 이력을 저장하고 push 명령어를 통해 업로드를 한다.</p>\n<h2>3. git commit -am</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> commit -am <span class=\"token string\">\"update skill sets\"</span></code></pre>\n      </div>\n<p><code class=\"language-text\">add</code>와 <code class=\"language-text\">commit</code> 이 한번에 가능하게 해주는 명령어 입니다. 그동안의 기록들이 올라가지만 깃헙에서는 최신의 기록만 보여줍니다.</p>\n<blockquote>\n<p>혹시라도 vim 에 빠지게 된다면<code class=\"language-text\">ESC + : wq</code> : 빔 탈출! 후에 깃 상태의 포스트에서 빔에 대해서도 간략하게 설명해 놓았다.</p>\n</blockquote>\n<hr>\n<h2>Gitignore</h2>\n<blockquote>\n<p>Git 을 통한 프로젝트 시작시 반드시 설정하자!</p>\n</blockquote>\n<h3>활용법</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\">\n      <pre class=\"language-java\"><code class=\"language-java\"><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span>xlss # 확장자가 xlss인 파일\n  test<span class=\"token operator\">/</span> # text 폴더\n  a<span class=\"token punctuation\">.</span>txt # 특정파일</code></pre>\n      </div>\n<p>보통 <code class=\"language-text\">.gitignore</code> 에 등ㅇ록 되는 파일은 iDE(이클립스)설정과 관련된 내용 혹은 프로그래밍 언어별 임시 파일, 윈도우 등 OS 관련 파일을 등록한다. (프로젝트 소스코드와 무관)</p>\n<p>잘 모르는 경우 해당 환경을 <a href=\"http://gitignore.io/\">gitignore.io</a> 에서 검색하며 설정하자.</p>\n<p>예) <code class=\"language-text\">eclipse</code>, <code class=\"language-text\">java</code>, <code class=\"language-text\">windows...</code></p>","excerpt":"시작하기에 앞서 멀티캠퍼스 수업에서의 3주차에서 3일간에 걸친 Git 강의가 끝이 났다. 이것저것 배우면서 배웠던 것을 한 곳에 모아 포스트 형식으로 올려놓은 것이다. 대략적으로 깃의 기초, 원격저장소 설정,  .gitignore…","frontmatter":{"title":"깃 정리 -01","date":"2019-12-18","tags":["git","TIL"],"keywords":["깃","정리"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/git-post-01/","previous":{"fields":{"slug":"/first-blog/"},"frontmatter":{"title":"첫 블로그 생성기","tags":["blog"],"published":true}},"next":{"fields":{"slug":"/git-post-02/"},"frontmatter":{"title":"깃 정리 -02","tags":["git","TIL"],"published":true}}}}}