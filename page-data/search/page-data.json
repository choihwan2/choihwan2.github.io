{"componentChunkName":"component---src-pages-search-js","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n## 시작하기에 앞서\n\n파이썬에서 웹 크롤링하는 것에 대한 정리이다. `bs4` `flask` `jinja` 등 다양한 라이브러리를 사용하면서 진행해보았다.\n\n\n\n## requests\n\n* URL에 요청을 보내고 그에 맞는 응답을 해석하고 크롤링 해보았다.\n\n```python\n'''\n1. request > naver.com\n2. response > bs4\n3. webbroser\n\n'''\nimport requests\nfrom bs4 import BeautifulSoup as bs\nimport webbrowser\n\nurl = \"https://www.naver.com\"\nrequests.get(url)\nresponse = requests.get(url).text\n\n#\"html.parser\" : 받아올 형식을 의미함. \ndoc = bs(response, 'html.parser')\n\n# . > class\n# # > id\n# result = doc.select_one(\".ah_k\")\n\n#\".ah_k\"로 끝나는 클래스에서의 값을 리스트 형태로 모조리 받아온다. 하나 받으려면 select_one\nresult = doc.select(\".ah_k\")\n\nsearch_url = \"https://search.naver.com/search.naver?query=\"\nfor i in range(5): \n    # 실시간 검색어 다섯개를 받아. 새로운 브라우저를 띄워보았다.\n    webbrowser.open(search_url + result[i].text)\n    # print(result[i].text)\n\n```\n\n\n\n## flask\n\n* 이번에는 요청이 왔을 때 그것에 맞는 응답을 보여주는 것이다.\n\n   flask 라이브러리를 사용해서 간단하게 서버를 구성해보았다.\n\n**app.py**\n\n```python\nfrom flask import Flask, render_template, request\nimport random\nimport datetime\n\napp = Flask(__name__) \n#서버의 이름을 app으로 하겠다.\n#파일이름도 똑같게 app으로 하면 명령어 flask run으로 만으로도 동작가능하다.\n\n\n#url을 관리해주는 친구 > @시작하는 @app.route(\"/\")\n\n\n@app.route(\"/\")\ndef hello():\n    return \"안녕!!\"\n\n@app.route(\"/dday\")\ndef dday():\n    today = datetime.datetime.now()\n    final = datetime.datetime(2020, 6, 9)\n    result = final - today\n    #f 문자열 포맷방법 파이썬에서 매우 유용하게 쓰이는것 같다.\n    #리턴값은 무엇무엇 오는지는 모르겠지만 string 타입이여야 하는것 같다.\n    return f\"힘을 내야 하는 날이 {result.days}일 남았습니다.\"\n\n@app.route(\"/lotto\")\ndef lotto():\n    numbers = random.sample(range(1,46), 6)\n    return f\"{numbers}\"\n\n##오늘이 크리스마스인지 알려준다!\n@app.route(\"/christmas\")\ndef christmas():\n    now = datetime.date.today()\n    today = datetime.datetime.now()\n\n    print(today.date().strftime(\"%y년 %m월 %d일\"))\n    if now.month == 12 and now.day == 25:\n        return \"크리스마스에요!\"\n    else :\n        return \"<h1>아니에요 열심히 기다려봐요<h1>\"\n\n@app.route(\"/movies\")\ndef movies():\n    movies = [\"겨울왕국2\", \"클라우스\", \"어바웃 타임\", \"나홀로 집에2\", \"이터널선샤인\", \"반지의 제왕\"]\n    return render_template(\"movie.html\", movies = movies) \n##앞 movies가 html 쪽 movies 뒤에는 어떤 리스트를 보낼지.\n\n\n@app.route(\"/greeting/<name>\")\ndef greeting(name):\n    return f\"안녕하세요 {name}님!\"\n\n@app.route(\"/cube/<int:num>\")\ndef cube(num):\n    result = num ** 3\n    return str(result)\n\n'''\ndef render_template(str, **args) :\n    *이 있으면 파이썬에서는 가변적인 개수가 들어가도 상관없다.\n'''\n\n\n# 식사 메뉴 추천.\n# 1. random\n# 2. Dynamic route: @app.route(\"/lunch/1 2 3 4\")\n# - 숫자를 받아서 명수 개수 만큼 \n# - List : 자장면, 짬뽕, 오므라이스, 볶음밥, 고추잡채, 탕수육, 돈까스, \n# - <int:num> 숫자 만큼 뽑기\n\n@app.route(\"/lunch/<int:num>\")\ndef lunch(num):\n    lunches = [\"자장면\", \"짬뽕\", \"오므라이스\", \"볶음밥\", \"고추잡채\", \"탕수육\", \"돈까스\"]\n    #리스트 자체를 넣어줘서 랜덤으로 뽑아줄 수도 있다. 중복허용X\n    #중복을 허용하고 싶으면 choice로 뽑아주자.\n    lunch = random.sample(lunches,num)\n    return render_template(\"lunch.html\", lunches = lunches,people = num, pick_lunch = lunch)\n\n#render_template(\"lunch.html\", lunches = lunces)에서 먼저 폴더안에 templates라는 폴더안에\n#\"lunch.html\" 라는 파일이 있어야한다. 그리고 jinja 라이브러리로 아래의 html에 lunches에 py안의 lunches를 보내준다.\n\n\n\n#실행시 debug모드로 들어가 실시간 변화를 감지하게 도와준다.\nif __name__ == \"__main__\":\n    app.run(debug=True)\n```\n\n\n**lunch.html**\n```html\n<!DOCTYPE html>\n<html lang=\"ko\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>점심 메뉴</title>\n</head>\n<body>\n    <h1>점심 메뉴 리스트</h1>\n    <ul>\n        {% for lunch in lunches %}\n            <li>{{lunch}}</li>\n        {% endfor %}\n    </ul>\n    <h1>가고자하는 인원 : {{people}}</h1>\n    <h1>뽑힌 점심 메뉴</h1>\n    {{pick_lunch}}\n</body>\n</html>\n```\n\n> jinja를 사용할때는 형식에 주의하자\n\n* 이번에는 웹에서 원하는 요청문을 보낸 후 그것에 맞는 웹을 만들어보자. ([vonvon](https://kr.vonvon.me/quiz/329)을 참고해서 만들어봤다.)\n\n**app.py**\n\n```python\n@app.route(\"/vonvon\")\ndef vonvon():\n    return render_template(\"vonvon.html\")\n\n@app.route(\"/godmademe\")\ndef godmademe():\n    #vonvon에서 보낸 \"name\"이라는 키값의 value 를 가져온다. \n    #여기서 request 라이브러리를 사용하는데 이름에 주의하자!\n    name = request.args.get(\"name\")\n    first_list = [\"잘생김\", \"어중간함\", \"덤벙거림\", \"착함\", \"찌질\", \"재력\", \"귀여움\"]\n    second_list = [\"애교\", \"힘\", \"용기\", \"지능\", \"센스\", \"식욕\", \"계획력\"]\n    third_list = [\"운\", \"행복\", \"긍정\", \"생기\", \"감성\", \"재수없음\", \"답답함\"]\n\n    #choice는 반환해주는 값이 string 이더라.\n    first = random.choice(first_list)\n    second = random.choice(second_list)\n    third = random.choice(third_list)\n\n    return render_template(\"godmademe.html\", name = name, first = first, second = second, third = third)\n```\n\n**vonvon.html**\n```html\n<!DOCTYPE html>\n<html lang=\"ko\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>vonvon</title>\n</head>\n<body>\n    <h1> 신이 당신을 만들 때</h1>\n    <form action=\"/godmadeeme\">\n        <input type=\"text\" name=\"name\">\n        <input type=\"submit\">\n    </form>\n</body>\n</html>\n```\n\n> form 부분을 좀 더 공부해야겠다. 헷갈린다.\n\n**godmademe.html**\n\n```html\n<!DOCTYPE html>\n<html lang=\"ko\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>신이 당신을 만들때는</title>\n</head>\n<body>\n    <h1>신이 <b>{{ name }}</b>을/를 만들 때...</h1>\n    <p> <b>{{ first }}</b>을 한 스푼~</p>\n    <p> <b>{{ second }}</b>도 넣어주고~</p>\n    <p> 그리고 <b>{{ third }}</b>도 조그....으어ㅡ아아ㅏ아ㅏㅏ</p>\n</body>\n</html>\n```\n\n\n\n\n* HTML 태그\n  * `ol` =순서가 있는 목록\n  * `ul` = 순서가 없는 목록\n\n\n\n### 참고링크\n\n* [jinja라이브러리](https://snacky.tistory.com/7)\n\n\n\n","fields":{"slug":"/python-post-02/"},"frontmatter":{"title":"파이썬 정리 -02","published":true}}},{"node":{"rawMarkdownBody":"\n## 시작하기에 앞서\n\n멀티캠퍼스 3주차 깃 특강중에 배웠던 파이썬을 정리해보자. \n\n정말 간단하게 배우고 있는 중이라 매우 기본적인 내용이 많다.\n\n\n\n## String\n\n```python\n# 1. 글자 합체\n\nname = \"happy\" + \" \" + \"hacking\"\n\n# 2. 글자 삽입\n\nfirst = \"tony\"\nage = 20\n\ntext = \"안녕하세요. 제 이름은 {}입니다. 나이는 {}입니다.\" .format(first, age)\n\n# 문자열을 5번째 까지 출력한다.\ntest_name = text[:5]\n# 문자열을 5번째 부터 뒤를 출력한다.\ntext_age = text[5:]\n\n# 문자열을 자르는데 변수를 넣어줘서 자를수 있다. 기본값은 공백 \ntext_split = text.split()\n```\n\n> 문자열을 출력할때는 음수도 사용가능하다. -1이면 뒤부터 시작!\n\n\n\n## List와 Dictionary\n\n```python\n# List\nmenus = [\"순남 시래기\", \"양자강\", \"20층...\"]\nphone_nums = [\"02-3441-5858\", \"02-3818-7588\", \"02-4343-9595\"]\n\n#추가하고 싶을때는 append를 사용하자!\n\n# Dictionary { key : value } Map과 비슷 하지만 key 가 중복은 안됨.\ndict_nums ={\n    \"순남 시래기\":\"02-3441-5858\",\n    \"양자강\" : \"02-3818-7588\",\n    \"20층\" : \"02-4343-9595\",\n}\n\nprint(dict_nums[\"순남 시래기\"]) #value 값이 나온다.\n\n```\n\n> `dictionary`는 중괄호를 사용해서 감싸준다!\n\n\n\n## if\n\n```python\nif dust > 150:\n    #앞의 네칸을 띄워줘야 문법이 제대로 작동한다.\n    print(\"매우 나쁨\") \nelif dust > 100:\n    print(\"나쁨\")\nelse:\n    print(\"적당함\")\n```\n\n\n\n## range\n\n```python\n#인수 1개 - 시작 숫자를 지정해 주지 않으면 range 함수는 0부터 시작한다.\nlist(range(5))\n[0, 1, 2, 3, 4]\n\n# 인수 2개 - 입력으로 주어지는 2개의 인수는 시작 숫자와 끝 숫자를 나타낸다.\n# 단, 끝 숫자는 해당 범위에 포함되지 않는다는 것에 주의하자.\nlist(range(5, 10))\n[5, 6, 7, 8, 9]\n\n# 인수 3개 - 세 번째 인수는 숫자 사이의 간격을 말한다.\nrange(1, 10, 3)\n[1, 4, 7]\n\nrange(20, 10, -2)\n[20, 18, 16, 14, 12]\n\n```\n\n\n\n## for\n\n```python\nmenus = [\"순남 시래기\", \"양자강\", \"20층...\", \"밥묵장\"]\n\n#menu 라는 변수에 menus에 있는 것을 한번씩 넣으면서 한번 순회한다.\nfor menu in menus:\n    print(menu)\n\n#i라는 변수에 0~4까지의 수를 넣으면서 한번 순회한다.\nfor i in range(4):\n    print(menus[i])\n\n    \n```\n\n> range 를 잘 사용하는 것이 후에 반복문에 큰 도움이 될 것 같다.","fields":{"slug":"/python-post-01/"},"frontmatter":{"title":"파이썬 정리 -01","published":true}}},{"node":{"rawMarkdownBody":"\n## 시작하기에 앞서\n\n깃 상태와 취소 그리고 Stash에 대해 알아보자.\n\n\n\n# Git status & undoing\n\n### git commit\n\n```bash\n#gogo.txt 를 생성하고 add하지 않고 commit 한 경우 \n$ git commit\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nUntracked files:\n        gogo.txt\n\nnothing added to commit but untracked files present\n#gogo.txt를 해결해야함 해결한 후\n$ git commit\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nnothing to commit, working tree clean\n```\n\n### git status\n\n1. add 한 이전\n\n```bash\n$ git status\nOn branch master\nYour branch is up to date with 'origin/master'.\n\n#add를 하지 않고 생성만 한 후 status 를 본 상황.\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        gogo.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n```\n\n2. add 한 이후\n\n```bash\n$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n  (use \"git push\" to publish your local commits)\n\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n        new file:   gogo.txt\n```\n\n### commit 메시지 작성하기 (메시지 없이 commit 한 경우)\n\n```bash\n$ git commit\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# On branch master\n# Your branch is ahead of 'origin/master' by 1 commit.\n#   (use \"git push\" to publish your local commits)\n#\n# Changes to be committed:\n#       new file:   gogo.txt\n#빔 상황에 빠졌다!\n\n```\n\n* 편집(입력모드) :  단축키 `I`\n  * 문서 편집이 가능\n* 명령 모드 : `esc`\n  * `dd` : 라인삭제\n  * `wq`: 저장 및 종료 (`w:write` 저장 `q:quit` 종료)\n  * `q!` 강제 종료 (`q:quit`종료 `!`강제)\n\n> vim adventure 라는 게임을 통해 vim 을 학습 할수 있다. 시간이 나면 해보자\n>\n> [고고](https://vim-adventures.com/)\n\n\n\n### log\n\n> 커밋은 해시 값에 의해서 구분된다.\n>\n> (commit 옆의 값)\n\n```bash\n$ git log\ncommit 75767bea66848e61476fb098e1833d80449ee1cb (HEAD -> master)\nAuthor: choihwan2 <choihwan2@naver.com>\nDate:   Wed Dec 18 09:40:03 2019 +0900\n\n    Add a. txt\n\n    * a.txt 내용 추가\n    * blahblah\n#~~~밑에 줄줄줄\n\n$ git log -1\ncommit 75767bea66848e61476fb098e1833d80449ee1cb (HEAD -> master)\nAuthor: choihwan2 <choihwan2@naver.com>\nDate:   Wed Dec 18 09:40:03 2019 +0900\n\n    Add a. txt\n\n    * a.txt 내용 추가\n    * blahblah\n    \n$ git log -1 --oneline\n75767be (HEAD -> master) Add a. txt\n\n\n```\n\n> 좋은 commit 메시지를 위해 언제나 노력하자 다양한 회사 기술블로그를 참고하는게 좋음.\n>\n> [참고링크](https://meetup.toast.com/posts/106)\n\n### commit undoing\n\n\n\n1. 커밋 메시지 수정\n\n```bash\n$ git commit --amend\nAdd a. txt\n\n* a.txt 내용 추가\n* blahblah\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# Date:      Wed Dec 18 09:40:03 2019 +0900\n#\n# On branch master\n# Your branch is ahead of 'origin/master' by 2 commits.\n#   (use \"git push\" to publish your local commits)\n#\n# Changes to be committed:\n#       new file:   gogo.txt\n#\n# Changes not staged for commit:\n#       modified:   Git status & undoing.md\n#\n\n```\n\n커밋 메시지 수정하는 경우 해시값이 변경되므로, 다른 이력으로 관리가 된다.\n\n**따라서, 공개된 저장소[원격저장소]에 이미 push 한 경우 절대 수정해서는 안된다.**\n\n> commit 을 역사라고 생각하고 역사를 바꾸려는 시도는 가능하면 하지말자.\n\n2. 특정 파일 추가하기\n   * `c.txt` 파일을 같이 커밋하려고 했는데 `add` 를 하지 않고 커밋 해버린 경우.\n\n```bash\n$ git add c.txxt\n$ git commit --amend\n# add하지 않았던 c.txt를 add하고 commit --amend 로 시점을 돌려서 commit 을 한다고 생각.\n```\n\n\n\n### Staging area\n\n1. 커밋 이력이 있는 파일 수정 하는 경우\n\n```bash\n$ git status\nOn branch master\n#변경 사항인데 staging은 아닌 상황.\nYour branch is ahead of 'origin/master' by 3 commits.\n  (use \"git push\" to publish your local commits)\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   a.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ git add a.txt\n# git add로 staging에 올림.\n$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 3 commits.\n  (use \"git push\" to publish your local commits)\n\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n        modified:   a.txt\n\n\n\n```\n\n\n\n### add 취소하기\n\n```bash\n$ git restore --staged <file>\n# 다시 내려와!!\n\n$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 3 commits.\n  (use \"git push\" to publish your local commits)\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   a.txt\n# 내려왔음 ㅠㅠ..\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n* 구 버전의 git 에서는 아래의 명령어를 사용해야 한다.\n\n  ```bash\n  $ git reset HEAD <file>\n  ```\n\n\n\n### WD 변화 삭제하기(되돌리기)\n\n> git에서는 모든 commit 시점으로 되돌릴 수는 있다.\n>\n> 다만 WD 삭제하는 것은 되돌릴 수가 없다. \n\n```bash\n$ git status\n#지워진 파일 확인\n$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 3 commits.\n  (use \"git push\" to publish your local commits)\n\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        deleted:    .gitignore\n        modified:   Git status & undoing.md\n        deleted:    a.txt\n        deleted:    b.txt\n        deleted:    c.txt\n$ git resotre <file>\n# 지워진 파일을 돌아가자. 혹은 그 시점으로 돌아간다\n```\n\n* 구버전 git 에서는 아래의 명령어를 사용해야 한다.\n\n  ```bash\n  $ git checkout -- <file>\n  # 과거에 친구와 함께 팀플할때는 이거 썼었는데..\n  ```\n\n\n\n-----\n\n\n\n# Stash\n\n> 변경사항을 임시로 저장 해놓는 공간.\n\n```\n1. feature branch에서 a.txt 변경 및 커밋\n2. master branch에서 a.txt 수정 (add commit 상태)\n3. merge \n```\n\n\n\nstash 저장\n\n```bash\n\n$ git stash\nSaved working directory and index state WIP on master: c489627 Update:Git status.md\n```\n\n\n\nstash 목록\n\n```bash\n$ git stash list\nstash@{0}: WIP on master: c489627 Update:Git status.md\n```\n\n\n\n### 해결\n\n```bash\n$ git stash # 임시 공간 저장\n$ git merge feature # 병합\n$ git stash pop # 임시 공간에서 병합.\n\n# 충돌 발생, 해결 후 작업 이어가기\n```\n\n\n\n## Reset vs Revert\n\n>  공개된 저장소[원격 저장소]에 push 된 이력은 절대 reset 하지 않는다.\n>\n> 혼자 하던 일을 지워버리고 잊어버리는건 가능하지만. 팀으로 할 경우 충돌이 일어난다.\n\n```bash\n$ git reset [해시코드]\n```\n\n* `기본 [--mixed]`: 이후 변경 사항을 WD에 위치시켜줌\n* `--hard `: 이후 변경 사항이 모두 삭제함.**주의**\n* `--sort`: 지금 작업하고 있는 내용(WD) 및 변경 사항을 WD에 유지시켜줌.\n\n\n\n### Revert\n\n> 해당 커밋 으로 되돌렸다는 이력 (rever commit)을 남긴다. 즉, 다른 사람과의 작업에 방해가 적어진다. 지금까지 해왔던 것 위에 새로운 commit 을 생성하는 것이니\n\n```bash\n$ git revert [해시코드]\n```\n\n* vim -> 커밋 메시지 작성\n\n\n\n## 후에 찾아보기\n\n* github student pack\n* jetbrains 학생 - IDE(통합개발환경)\n* notion student\n\n","fields":{"slug":"/git-post-03/"},"frontmatter":{"title":"깃 정리 -03","published":true}}},{"node":{"rawMarkdownBody":"\n## 시작하기에 앞서\n\n저번 깃 정리의 이어서 이번엔 Git을 좀 더 효율적으로 관리하는 git flow 에 대해 알아보고 다양한 상황에서의 해결을 보여주고자 한다.\n\n## [Git flow](https://drive.google.com/open?id=1bkvYHMN2Rz8b0GZNw7GY5-flTOKF8pZj)\n\n\n\n### 상황 1. fast-foward\n\n> fast-foward는 feature 브랜치 생성된 이후 master 브랜치에 변경 사항이 없는 상황\n\n1. feature/test branch 생성 및 이동\n\n   ```bash\n   $ git checkout -b feature/test\n   Switched to a new branch 'feature/test'\n   \n   (feature/test) $\n   ```\n\n   \n\n2. 작업 완료 후 commit\n\n   ```bash\n   $ touch test.txt\n   $ git add text.txt\n   $ git commit -m \"Complete test\"\n   \n   [feature/test c6a0e86] Complete test\n    1 file changed, 0 insertions(+), 0 deletions(-)\n    create mode 100644 test.txt\n   \n   ```\n\n   \n\n3. master 이동\n\n   ```bash\n   $ git checkout master\n   Switched to branch 'master'\n   \n   ```\n\n   \n\n4. master에 병합\n\n   ```bash\n   (master) $ git merge feature/test\n   Updating c08aa0a..c6a0e86\n   Fast-forward\n    test.txt | 0\n    1 file changed, 0 insertions(+), 0 deletions(-)\n    create mode 100644 test.txt\n   ```\n\n   \n\n5. 결과 -> fast-foward (단순히 HEAD를 이동)\n\n6. branch 삭제\n\n------\n\n### 상황 2. merge commit\n\n> 서로 다른 이력(commit)을 병합(merge)하는 과정에서 다른 파일이 수정되어 있는 상황\n>\n> git이 auto merging을 진행하고, commit이 발생된다.\n\n1. feature/signout branch 생성 및 이동\n\n   ```bash\n   $ git checkout -b feature/signout\n   Switched to a new branch 'feature/signout'\n   ```\n\n2. 작업 완료 후 commit\n\n   ```bash\n   $ git add signout\n   $ git commit -m \"Add:signout\"\n   [feature/signout 1c3facd] Add:signout\n    1 file changed, 0 insertions(+), 0 deletions(-)\n    create mode 100644 signout\n   $ git checkout master\n   Switched to branch 'master'\n   (master)\n   $ git log --oneline\n   1c3facd (HEAD -> feature/signout) Add:signout\n   c6a0e86 (master) Complete test\n   c08aa0a Add:aaa.txt\n   fe93429 Add README.MD\n   ```\n   \n3. master 이동\n\n   ```bash\n   $ git checkout master\n   Switched to branch 'master'\n   $ git log --oneline\n   c6a0e86 (HEAD -> master) Complete test\n   c08aa0a Add:aaa.txt\n   fe93429 Add README.MD\n   ```\n\n4. *master에 추가 commit 이 발생시키기!!*\n\n   - **다른 파일을 수정 혹은 생성하세요!**\n\n   ```bash\n   $ touch hotfix.txt\n   $ git add .\n   $ git commit -m \"hotfix on master\"\n   [master 28d7a84] hotfix on master\n    1 file changed, 0 insertions(+), 0 deletions(-)\n    create mode 100644 hotfix.txt\n    \n   $ git log --oneline\n   28d7a84 (HEAD -> master) hotfix on master\n   c6a0e86 Complete test\n   c08aa0a Add:aaa.txt\n   fe93429 Add README.MD\n   ```\n   \n5. master에 병합\n\n   ```bash\n   (master) $ git merge feature/signout\n   ```\n   \n6. 결과 -> 자동으로 *merge commit 발생*\n\n   - vim 편집기 화면이 나타납니다.\n   - 자동으로 작성된 커밋 메시지를 확인하고, `esc`를 누른 후 `:wq`를 입력하여 저장 및 종료를 합니다.\n     - `w` : write\n     - `q` : quit\n   - 커밋이 확인 해봅시다.\n\n   ```bash\n   $ git merge feature/signout\n   Merge made by the 'recursive' strategy.\n    signout | 0\n    1 file changed, 0 insertions(+), 0 deletions(-)\n    create mode 100644 signout\n   ```\n\n   \n\n7. 그래프 확인하기\n\n   ```bash\n   $ git log --oneline\n   5b87e65 (HEAD -> master) Merge branch 'feature/signout'\n   28d7a84 hotfix on master\n   1c3facd (feature/signout) Add:signout\n   c6a0e86 Complete test\n   c08aa0a Add:aaa.txt\n   fe93429 Add README.MD\n   ```\n\n   \n\n8. branch 삭제\n\n------\n\n### 상황 3. merge commit 충돌\n\n> 서로 다른 이력(commit)을 병합(merge)하는 과정에서 동일 파일이 수정되어 있는 상황\n>\n> git이 auto merging을 하지 못하고, 해당 파일의 위치에 라벨링을 해준다.\n>\n> 원하는 형태의 코드로 직접 수정을 하고 merge commit을 발생 시켜야 한다.\n\n1. feature/board branch 생성 및 이동\n\n   ```bash\n   $ git checkout -b feature/board\n   ```\n\n   \n\n2. 작업 완료 후 commit\n\n   ```bash\n   (board) $ touch board.html\n   # README.md 수정\n   $ git add .\n   $ git commit -m \"Complete board & update README.md\"\n   \n   $ git log --oneline\n   5b87e65 (HEAD -> feature/board, master) Merge branch 'feature/signout'\n   28d7a84 hotfix on master\n   1c3facd Add:signout\n   c6a0e86 Complete test\n   c08aa0a Add:aaa.txt\n   fe93429 Add README.MD\n   ```\n\n   \n\n3. master 이동\n\n   ```bash\n   $ git checkout master\n   ```\n\n   \n\n4. *master에 추가 commit 이 발생시키기!!*\n\n   ```bash\n   $ git add .\n   $ git commit -m \"add:board and board branch\"\n   ```\n\n   \n\n   - **동일 파일을 수정 혹은 생성하세요!**\n\n   README.md 파일 수정\n\n5. master에 병합\n\n   ```bash\n   $ git merge feature/boarding\n   Auto-merging README.md\n   CONFLICT (content): Merge conflict in README.md\n   Automatic merge failed; fix conflicts and then commit the result\n   \n   (master|MERGING)\n   ```\n\n   \n\n6. 결과 -> *merge conflict발생*\n\n7. 충돌 확인 및 해결\n\n   `visual code` 에서 확인후에 고쳐나감.\n\n8. merge commit 진행\n\n   ```\n   $ git commit\n   ```\n\n   - vim 편집기 화면이 나타납니다.\n\n   ```bash\n   Merge branch 'feature/boarding'\n   \n   # Conflicts:\n   #       README.md\n   #\n   # It looks like you may be committing a merge.\n   # If this is not correct, please remove the file\n   #       .git/MERGE_HEAD\n   # and try again.\n   \n   \n   # Please enter the commit message for your changes. Lines starting\n   # with '#' will be ignored, and an empty message aborts the commit.\n   #\n   # On branch master\n   # All conflicts fixed but you are still merging.\n   #\n   # Changes to be committed:\n   #       modified:   README.md\n   #       new file:   boarding.html\n   #\n   ~\n   ```\n\n   \n\n   - 자동으로 작성된 커밋 메시지를 확인하고, `esc`를 누른 후 `:wq`를 입력하여 저장 및 종료를 합니다.\n     - `w` : write\n     - `q` : quit\n   - 커밋이 확인 해봅시다.\n\n   ```bash\n   [master d8b8c95] Merge branch 'feature/boarding'\n   ```\n\n   \n\n9. 그래프 확인하기\n\n   ```bash\n   $ git log --oneline\n   d8b8c95 (HEAD -> master) Merge branch 'feature/boarding'\n   3bcec90 Update:README.md\n   3c365ef (feature/boarding) update:README.md\n   3275a17 Complete boarding\n   48b58ea add:board\n   dbc3d10 add:board and board branch\n   5b87e65 Merge branch 'feature/signout'\n   28d7a84 hotfix on master\n   1c3facd Add:signout\n   c6a0e86 Complete test\n   c08aa0a Add:aaa.txt\n   fe93429 Add README.MD\n   ```\n\n   중간에 이것저것 하느라 조금 지저분하다.\n\n10. branch 삭제\n\n","fields":{"slug":"/git-post-02/"},"frontmatter":{"title":"깃 정리 -02","published":true}}},{"node":{"rawMarkdownBody":"\n## 시작하기에 앞서\n\n멀티캠퍼스 수업에서의 3주차에서 3일간에 걸친 Git 강의가 끝이 났다. 이것저것 배우면서 배웠던 것을 한 곳에 모아 포스트 형식으로 올려놓은 것이다. 대략적으로 깃의 기초, 원격저장소 설정,  .gitignore에 대해 알아보자.\n\n\n\n# Git 기초\n\n## 0. 준비 사항\n\n* [git bash](https://gitforwindows.org/)\n  * git을 활용하기 위한 CLI(command Line interface)를 제공한다\n  * source, tree, github desktop 등을 통해 GUI 환경에서도 활용 가능하다.\n\n\n## 1. 로컬 저장소 활용하기\n\n\n### 1. 저장소 초기화\n\n```bash\n$ git init\ninitialized existing Git repository in C:/Users/student/Desktop/git_tutorial/.git/\n```\n\n* 저장소(repository)를 초기화 하게 되면 .git 폴더가 해당 디렉토리에 생성된다.\n* bush 창에서는 (master) 라고 표기된다.\n  * 현재 브랜치가 master라는 것을 의미한다.\n\n### 2. add ~staging area\n\n> git으로 관리되는 파일들은 Working directory(작업 환경), Staging Area, commit 단계를 거쳐 이력에 저장된다.\n\n```bash\n$ git add a.txt #파일명\n$ git add images #폴더명\n$ git add . #현재 디렉토리의 모든파일 및 폴더\n```\n\n* add 후 상태\n\n```bash\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n        new file:   b.txt\n```\n\n### 3. commit\n\n> 커밋은 코드의 이력을 남기는 과정이다.\n\n```bash\n$ git commit -m \"add:b.txt\"\n[master 46b3223] add:b.txt\n 1 file changed, 1 insertion(+)\n create mode 100644 b.txt\n\n```\n\n* 커밋 메시지는 항상 해당 이력에 대한 정보를 담을 수 있도록 작성하는 것이 좋다.\n\n* 일관적인 커밋 메시지를 작성하는 습관을 들이자\n\n* 이력 확인을 위해서는 아래의 명령어를 활용한다.\n\n  ```bash\n  $ git log\n  commit 46b32233afb1f111445cd3d2bbf586ae2e2725d8 (HEAD -> master)\n  Author: choihwan2 <choihwan2@naver.com>\n  Date:   Mon Dec 16 14:23:38 2019 +0900\n  \n      add:b.txt\n  \n  commit d5e516b29033aad088fe91bdead201ffd7c38eb7\n  Author: choihwan2 <choihwan2@naver.com>\n  Date:   Mon Dec 16 11:41:25 2019 +0900\n  \n      Fix:a.txt\n  \n  commit 76a5998098344000b84b2517e9104e507fcf3681\n  Author: choihwan2 <choihwan2@naver.com>\n  Date:   Mon Dec 16 11:30:19 2019 +0900\n  \n      Add: a.txt\n  \n  ```\n\n  **항상 status 명령어를 통해 git의 상태를 확인하자! commit 이후에는 log 명령어를 통해 이력들을 확인하자**\n\n\n\n-----\n\n\n\n## 원격 저장소 활용하기\n\n> 원격 저장소(remote repository)를 제공하는 서비스는 다양하게 존재한다.\n>\n> github을 기준으로 설명한다.\n\n## 0. 준비하기\n\n* Github에서 저장소(repository) 생성\n\n### 1. 원격 저장소 설정\n\n```bash\n$ git remote add origin {github url}\n```\n\n* {github url} 부분에는 원격 저장소 url을 작성한다.\n* 원격 저장소(remote)로 {github url}  을 orgin 이라는 이름으로 추가(add)하는 명령어이다.\n* 원격 저장소 목록을 보기 위해서는 아래의 명령어를 활용한다.\n\n```bash\n$ git remote -v\norigin  https://github.com/choihwan2/TR.git (fetch)\norigin  https://github.com/choihwan2/TR.git (push)\n```\n\n### 2. push\n\n```bash\n$ git push origin master\n\nEnumerating objects: 4, done.\nCounting objects: 100% (4/4), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 2.44 KiB | 2.44 MiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/choihwan2/TR.git\n   46b3223..3c6588e  master -> master\n```\n\n* 설정된 원격 저장소(origin) 으로 push!\n\n폴더의 내용을 수정 및 삭제, 생성 등을 하게 된다면 add comit push 명령어를 통해서 이력을 저장하고 push 명령어를 통해 업로드를 한다.\n\n\n\n## 3. git commit -am\n\n```bash\n$ git commit -am \"update skill sets\"\n\n```\n\n`add`와 `commit` 이 한번에 가능하게 해주는 명령어 입니다. 그동안의 기록들이 올라가지만 깃헙에서는 최신의 기록만 보여줍니다.\n\n> 혹시라도 vim 에 빠지게 된다면`ESC + : wq` : 빔 탈출! 후에 깃 상태의 포스트에서 빔에 대해서도 간략하게 설명해 놓았다.\n\n\n\n-----\n\n\n\n## Gitignore\n\n> Git 을 통한 프로젝트 시작시 반드시 설정하자!\n\n### 활용법\n\n```java\n*.xlss # 확장자가 xlss인 파일\n  test/ # text 폴더\n  a.txt # 특정파일\n```\n\n보통 `.gitignore` 에 등ㅇ록 되는 파일은 iDE(이클립스)설정과 관련된 내용 혹은 프로그래밍 언어별 임시 파일, 윈도우 등 OS 관련 파일을 등록한다. (프로젝트 소스코드와 무관)\n\n잘 모르는 경우 해당 환경을 [gitignore.io](http://gitignore.io/) 에서 검색하며 설정하자.\n\n예) `eclipse`, `java`, `windows...`\n\n\n","fields":{"slug":"/git-post-01/"},"frontmatter":{"title":"깃 정리 -01","published":true}}},{"node":{"rawMarkdownBody":"\n## 첫 시작\n\n멀티캠퍼스 3주째 깃헙 특강을 오신 선생님께서 깃허브 블로그 만들기를 알려 주셨다. 처음에는 bootstrap 으로 간단하게 포트폴리오를 만들어보고 후에 원한다면 jekyll 과 Gatsby 두개를 소개해주셨다. 과거에 jekyll 를 이용해서 블로그를 만들다 포기했던 기억이 있어서 이번엔 Gatsby로 도전해 봤다.\n\n\n\n가장 기초적인 것부터 하나하나 만들어가는 것은 너무 무리일 것 같아 검색하다 좋은 설명글과 테마가 있어서 가져와 사용해보았다.  [참고](https://junhobaik.github.io/create-gatsby-blog/)\n\n완전 처음 해보는 것이라서 꽤 시간을 소비했는데.. 가장 크게 막혔던 것은 과거에 jekyll 을 사용할 때도 그랬지만 cmd창에서 무언가 설치를 상당히 많이하면서 진행하다보니 이게 내가 잘 하고 있는건지.. 아니면 잘못하고 있는지 알기 힘들뿐 아니라 실행을 해서 안될 경우 어디서 문제가 있는지 참 찾기 어렵기 때문인 것 같다. 내가 가장 크게 실수한것은 바로.. 설명글에 있던 기술스택(?)이라고 설명해 놓으신 곳에 있는 것들을 설치를 하지않아서 였던 것 같다. 그래서 다른 쓸데없는걸 너무 많이 설치해버린..\n\n하여튼 결국 많은 설치과.. 엄청 많은 시간을 쓴건 아니지만 적당한 시간 소비로 깔끔하게 블로그를 가져와 사용할 수 있게 되었다! \n\n이제 앞으로 많은 수정을 통해서 내것으로 바꿔가려고 노력하겠지만.. 일단 과거에 했던것 처럼 댓글기능과 포스트들을 추가해볼 예정이다. 일단 상당 메뉴 부분도 왼쪽으로 바꿔보고 싶은데.. 시간이 꽤 걸릴것 같다. 마지막으로 훌륭한 테마를 만들어주신 [Junho Baik](https://junhobaik.github.io/)님께 감사드리며.. 마치겠다.\n\n","fields":{"slug":"/first-blog/"},"frontmatter":{"title":"첫 블로그 생성기","published":true}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}