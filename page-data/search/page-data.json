{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n## 문제[#](https://www.acmicpc.net/problem/16198)\n\n![problem](problem.png)\n\n## 풀이 및 주저리..\n\n처음에 쉬운 문제라고 생각하고 접근했다가 결국 못풀고 몇일이 지나서 다시 도전해 풀게된 문제이다. 처음 도전에 실패했던 이유는 그리디 문제라고 생각했기 때문이다. 상황에 맞는 최선의 선택이 가장 최대값으로 간다고 생각했지만, 전혀 그런 문제가 아닌 브루트 포스의 문제였기에 풀지 못했었다. 좌우의 값이 최대가 되는 경우가 두가지 이상 존재할 경우 어떤 것을 선택해야지 그것이 최선인지 알 수 없기 때문이다. 그래서 다시 도전할 때는 `boolean` 배열을 활용해서 풀어보았다. 결국 마지막에 남는것은 1번째와 N번째 구슬이기에 사용해서 삭제해준 구슬은 점검을 하는 방식으로 해결할 수 있었다.\n\n\n\n## 코드\n\n```java\npackage baekjoon.algorithm.day03;\n\nimport java.util.Scanner;\n\npublic class EnergyCollect2 {\n\tstatic int MAX = Integer.MIN_VALUE;\n\tstatic int[] energyArr;\n\tstatic boolean[] energyBool;\n\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint N = scanner.nextInt();\n\t\tenergyArr = new int[N];\n\t\tenergyBool = new boolean[N];\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tenergyArr[i] = scanner.nextInt();\n\t\t}\n\t\tgo(0, 0);\n\t\tSystem.out.println(MAX);\n\t\tscanner.close();\n\n\t}\n\n\tpublic static void go(int sum, int index) {\n\t\tif (index == energyBool.length - 2) {\n\t\t\tMAX = Math.max(MAX, sum);\n\t\t\treturn;\n\t\t}\n\t\tfor (int i = 1; i < energyBool.length - 1; i++) {\n\t\t\tif (energyBool[i])\n\t\t\t\tcontinue;\n\t\t\tint l = i - 1;\n\t\t\tint r = i + 1;\n\t\t\twhile (energyBool[l]) l--;\n\t\t\tint left = energyArr[l];\n\t\t\t\n\t\t\twhile (energyBool[r])r++;\n\t\t\tint right = energyArr[r];\n\t\t\t\n\t\t\tint temp = left * right;\n\n\t\t\tenergyBool[i] = true;\n\t\t\tgo(sum + temp, index + 1);\n\t\t\tenergyBool[i] = false;\n\t\t}\n\t}\n\n}\n\n```\n\n## 기억에 남길 것!\n\n- 문제를 읽고 이 문제가 어떤 문제인지 알아야한다.\n\n","excerpt":"…","fields":{"slug":"/Algorithm-5-3_3/"},"frontmatter":{"date":"May 23, 2020","title":"알고리즘 스터디 5월 3주차 문제3 (에너지 모으기)","tags":["algorithm","dfs","bruteforce"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://www.acmicpc.net/problem/16987)\n\n![problem](problem.png)\n\n## 풀이 및 주저리..\n\n백준 오프라인에서 브루트 포스 문제 중 좀 중요하다고 말씀해주신 문제이다. 브루트 포스에서 가장 중요한 부분은 일단 모든 상황을 다해보는 것이기 때문에 모든 상황을 코드로 구현 할 수 있어야한다. 그리고 재귀로 들어가는 부분에서의 결과처리가 중요하다고 생각하는데 이 문제는 그런것들이 다양하게 발생해서 그런 것 같았다.\n\n풀이로는 먼저 계란의 내구도와 무게를 배열로 저장하고 계란을 차례대로 들어 남아있는 계란을 내려는것을 재귀로 구현한 형태이다. 여기서 좀 중요한 것은 상황들을 잘 이해하고 구현해야하는 것인데, 작성한 `isOne` 이라는 부분이 정답으로 가는 중요한 부분이였다. 이 부분이 없으면 들고있는 계란만 깨지지 않은 상태이고 나머지 계란이 모두 깨져있는 상태를 확인할 수 없이 재귀함수가 끝나버리기 때문에 문제를 풀수 없게 된다.\n\n\n\n## 코드\n\n```java\npackage baekjoon.algorithm.day04;\n\nimport java.util.Scanner;\n\npublic class EggToEgg {\n\tstatic int[] durability;\n\tstatic int[] weight;\n\tstatic int N;\n\tstatic int answer = 0;\n\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tN = s.nextInt();\n\t\tdurability = new int[N];\n\t\tweight = new int[N];\n\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tdurability[i] = s.nextInt();\n\t\t\tweight[i] = s.nextInt();\n\t\t}\n\t\tgo(0);\n\t\tSystem.out.println(answer);\n\t\ts.close();\n\t}\n\n\tpublic static void go(int index) {\n\t\tif (index == N) {\n\t\t\tint temp = 0;\n\t\t\tfor (int i : durability) {\n\t\t\t\tif (i <= 0)\n\t\t\t\t\ttemp++;\n\t\t\t}\n\t\t\tanswer = Math.max(temp, answer);\n\t\t\treturn;\n\t\t}\n\n\t\tif (durability[index] <= 0) {\n\t\t\tgo(index + 1);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tboolean isOne = true;\n\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\t/*\n\t\t\t *  index 번째의 계란으로 안깨진 계란을 찾아서 친다.\n\t\t\t */\n\t\t\tif (index == i)\n\t\t\t\tcontinue;\n\t\t\tif (durability[i] <= 0)\n\t\t\t\tcontinue;\n\t\t\tisOne = false;\n\t\t\tdurability[i] -= weight[index];\n\t\t\tdurability[index] -= weight[i];\n\t\t\tgo(index + 1);\n\t\t\tdurability[i] += weight[index];\n\t\t\tdurability[index] += weight[i];\n\t\t}\n\t\tif(isOne) {\n\t\t\tgo(index + 1);\n\t\t}\n\t}\n\n}\n\n```\n\n## 기억에 남길 것!\n\n- Brute Force에서 가장 중요한건 모든 상황을 구현할 수 있는 능력\n\n","excerpt":"…","fields":{"slug":"/Algorithm-5-3_2/"},"frontmatter":{"date":"May 22, 2020","title":"알고리즘 스터디 5월 3주차 문제2 (계란으로 계란치기!)","tags":["algorithm","dfs","bruteforce"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://www.acmicpc.net/problem/16922)\n\n![problem](problem.png)\n\n## 풀이 및 주저리..\n\n백준 오프라인 강의에서 BFS 문제를 풀다가 다시 브루트 포스쪽으로 넘어와 푼 문제이다. 문제자체는 간단해보이지만 함정이 있다. 단순하게 DFS 로 접근하는 경우에는 시간 초과가 나기때문! 자리수에 동전이 들어갈 수 있는 경우로 구하면 4의 20승이 나오면서 시간초과가 나버린다. 강의때도 들었지만 이런 경우에는 문제를 잘 읽고 내가 구현하려는 코드의 시간복잡도를 구해보고 접근을 해야한다고 한다. 대충 계산했을때 10억이라는 계산수가 넘어가게 되면 시간초과를 생각해봐야하기 때문이다. 하여튼 시간초과를 피하기위해서 어떤 동전을 몇개 선택 할지로 생각을 전환시켜서 풀게되면 쉽게 풀리는 문제였다.\n\n동전이 어떤 자리에 있더라도 그 합계는 동일할테니 시간복잡도가 N의 4승으로 엄청나게 줄게 된다. 게다가 마지막 동전의 개수는 N에서 나머지 3개의 동전의 수를 빼면 구할 수 있으니 N의 3승까지 줄일 수 있는 문제였다. 개인적으로 3중 `for`문을 사용할 때 너무나도 어색하고 머리가 좀 복잡해지는 느낌이 있는데 사용하다보니 직관적이고 문제를 쉽게 풀 수 있는 지름길 같기도 하였다. 이걸 재귀로도 풀어보고 싶은데 어떻게 하면 좋을지 고민해보아야겠다.\n\n## 코드\n\n```java\npackage baekjoon.algorithm.day03;\n\nimport java.util.Scanner;\n\npublic class MakeRomaNumber {\n\tstatic int N;\n\tstatic boolean[] numBool = new boolean[1001];\n\tstatic int answer = 0;\n\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tN = scanner.nextInt();\n\n\t\tfor (int i = 0; i <= N; i++) {\n\t\t\tfor (int j = 0; j <= N - i; j++) {\n\t\t\t\tfor (int z = 0; z <= N - i - j; z++) {\n\t\t\t\t\tif (numBool[i * 1 + j * 5 + z * 10 + (N - i - j - z) * 50] == false) {\n\t\t\t\t\t\tnumBool[i * 1 + j * 5 + z * 10 + (N - i - j - z) * 50] = true;\n\t\t\t\t\t\tanswer++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.println(answer);\n\t\tscanner.close();\n\t}\n}\n\n```\n\n## 기억에 남길 것!\n\n- DFS 는 순서냐 선택이냐 를 잘 선택하고 접근하는게 중요하다.\n  - 순서 - N개를 다하는데 순서가 상관있다.\n  - 선택 - N개 중에서 무엇을 할지 선택하여 진행한다.\n- 문제를 풀기전에 시간복잡도를 계산하고 시작하자.\n\n","excerpt":"문제#  풀이 및 주저리.. 백준 오프라인 강의에서 BFS 문제를 풀다가 다시 브루트 포스쪽으로 넘어와 푼 문제이다. 문제자체는 간단해보이지만 함정이 있다. 단순하게 DFS…","fields":{"slug":"/Algorithm-5-3_1/"},"frontmatter":{"date":"May 19, 2020","title":"알고리즘 스터디 5월 3주차 문제1 (로마 숫자 만들기)","tags":["algorithm","bfs"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://programmers.co.kr/learn/courses/30/lessons/12977)\n\n<img src=\"problem.png\" alt=\"algorithm-5-2\" style=\"zoom:150%;\" />\n\n## 풀이 및 주저리..\n\n프로그래머스 온라인 강의를 들으면서 다시 풀게된 문제이다. 문제자체는 좀 쉬운 편에 속하지만 전에는 재귀로 풀지 못했던 것을 재귀로 풀고 리뷰를 받으며 이런저런 팁들을 많이 알게되었다. 대표적으로 자바에서는 snake case를 쓰지 않는다는 것과 문제를 풀때 메소드를 잘 알고 사용해야지 좋은 것. 그냥 무작정 쓴다고 좋은 것이 아니라 그걸 쓰면 이런 부분에서 효율적인것을 알 때 쓰는 것이 중요했던 것 같다.\n\n먼저 나는 소수를 구하기 위해서 에라스토의 체를 활용했고 그 다음 `boolean` 배열을 활용해서 후에 어떠한 값이 들어오더라도 바로 소수인 것을 알 수 있도록 만들어주었다. 후에 재귀를 할 경우 중복을 없애주기 위해서 반복문 안에서의  `i`를 `start` 부터 시작하여서 해결하였다.\n\n## 코드\n\n```java\npackage programmers.school.day01;\n\nimport java.util.ArrayList;\n\npublic class MakeBinaryNumber {\n    static boolean[] boolArr;\n\tstatic ArrayList<Integer> binList;\n\tstatic int answer;\n\n\tpublic int solution(int[] nums) {\n\t\tanswer = 0;\n\t\tboolArr = new boolean[3000];\n\t\tbinList = new ArrayList<>();\n\n\t\tboolArr[2] = true;\n\t\tbinList.add(2);\n\t\tfor (int i = 3; i < boolArr.length; i += 2) {\n\t\t\tboolean isBin = true;\n\t\t\tfor (int j : binList) {\n\t\t\t\tif (i % j == 0) {\n\t\t\t\t\tisBin = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isBin) {\n\t\t\t\tboolArr[i] = true;\n\t\t\t\tbinList.add(i);\n\t\t\t}\n\t\t}\n\t\t// 소수배열을 먼저 만들어놓고 해야함.\n\t\tdfs(0, nums, 0, 0);\n\t\treturn answer;\n\t}\n\n\n\tpublic void dfs(int start, int[] nums, int num, int sum) {\n\t\tif (num == 3) {\n\t\t\tif (boolArr[sum])\n\t\t\t\tanswer++;\n\t\t\treturn;\n\t\t}\n\t\tfor (int i = start; i < nums.length; i++) {\n\t\t\tdfs(i + 1, nums, num + 1, sum + nums[i]);\n\t\t}\n\t}\n}\n\n```\n\n## 기억에 남길 것!\n\n- 메소드나 풀이 방법을 무작정 사용하지말고 제대로 알고 나서 사용하기\n\n","excerpt":"문제# 풀이 및 주저리.. 프로그래머스 온라인 강의를 들으면서 다시 풀게된 문제이다. 문제자체는 좀 쉬운 편에 속하지만 전에는 재귀로 풀지 못했던 것을 재귀로 풀고 리뷰를 받으며 이런저런 팁들을 많이 알게되었다. 대표적으로 자바에서는 snake…","fields":{"slug":"/Algorithm-5_3/"},"frontmatter":{"date":"May 16, 2020","title":"알고리즘 스터디 5주차 문제3 (소수 구하기)","tags":["algorithm","bfs"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://www.acmicpc.net/problem/1697)\n\n<img src=\"problem.png\" alt=\"algorithm-5-2\" style=\"zoom:150%;\" />\n\n## 풀이 및 주저리..\n\n백준 오프라인 강의의 day02 첫번째 문제이다. BFS 문제라는 것을 처음으로 접해봤고 문제를 풀기위해 하루정도 걸렸던 것 같다. 결국.. 구글링과 강의의 정답 코드를 보고야 이해가 갔다. \n\n못풀었던 이유로는 BFS 를 DFS 처럼 재귀 방식으로 푸려고 했던게 가장 큰 이유였던 것 같다. 이름이 비슷하다고 해서 풀이가 비슷한 것도 아니고.. 모든 문제를 재귀 방식으로 풀어야 하는것도 아닌데 말이다. 문제를 풀기위해서 유튜브에 있는 BFS 개념을 설명해주는걸 몇개를 봤는지 모르겠다.... 큐를 이용하는건 알겠는데 `time` 을 증가시키면서 진행하는 걸 이해하기가 정말 어려웠던 것 같다.  그리고 방법이 오로지 이 방법만 있는 건지.. 이게 최선인건지 좀 궁금해지는 문제였다. BFS 문제에 어색하니 좀 더 많이 풀면서 연습을 해봐야겠다.\n\n후에 강의를 듣고 다시 도전하러 와야겠다.\n\n## 코드\n\n```java\npackage baekjoon.algorithm.day02;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class HideAndSeek1 {\n\tstatic final int MAX = 200000;\n\tstatic boolean[] pos_bool;\n\tstatic int[] list;\n\tstatic int sister_p;\n\tstatic Queue<Integer> que = new LinkedList<Integer>();\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[] input = br.readLine().split(\" \");\n\t\tpos_bool = new boolean[MAX];\n\t\tlist = new int[MAX];\n\t\tint subin_p = Integer.parseInt(input[0]);\n\t\tint sister_p = Integer.parseInt(input[1]);\n\t\tlist[subin_p] = 0;\n\t\tque.add(subin_p);\n\t\tpos_bool[subin_p] = true;\n\n\t\twhile (!que.isEmpty()) {\n\t\t\tint v = que.poll();\n\n\t\t\tif (v - 1 >= 0) {\n\t\t\t\tif (!pos_bool[v - 1]) {\n\t\t\t\t\tpos_bool[v - 1] = true;\n\t\t\t\t\tque.add(v - 1);\n\t\t\t\t\tlist[v - 1] = list[v] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (v + 1 < MAX) {\n\t\t\t\tif (!pos_bool[v + 1]) {\n\t\t\t\t\tpos_bool[v + 1] = true;\n\t\t\t\t\tque.add(v + 1);\n\t\t\t\t\tlist[v + 1] = list[v] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (v * 2 < MAX) {\n\t\t\t\tif (!pos_bool[v * 2]) {\n\t\t\t\t\tpos_bool[v * 2] = true;\n\t\t\t\t\tque.add(v * 2);\n\t\t\t\t\tlist[v * 2] = list[v] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.println(list[sister_p]);\n\t}\n\n}\n\n```\n\n## 기억에 남길 것!\n\n- DFS 는 재귀적으로 스택 , BFS 는 큐를 이용하자.\n\n","excerpt":"문제# 풀이 및 주저리.. 백준 오프라인 강의의 day02 첫번째 문제이다. BFS 문제라는 것을 처음으로 접해봤고 문제를 풀기위해 하루정도 걸렸던 것 같다. 결국.. 구글링과 강의의 정답 코드를 보고야 이해가 갔다.  못풀었던 이유로는 BFS…","fields":{"slug":"/Algorithm-5_2/"},"frontmatter":{"date":"May 13, 2020","title":"알고리즘 스터디 5주차 문제2 (숨바꼭질)","tags":["algorithm","bfs"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://www.acmicpc.net/problem/14888)\n\n![problem](problem.png)\n\n## 풀이 및 주저리..\n\n백준 오프라인 강의의 day01 의 마지막 문제였다. 한참 고민을 하다가 결국 부호들의 순열들을 만들지 못해서 구글링을 하고 말았다. 다른 사람이 푼 코드를 보면서 느꼈던 것은 아직 내가 DFS쪽 개념을 코드로 옮기는 실력이 많이 부족하다고 생각됐고 그동안 풀었던 문제를 거의 외우다 싶이 풀었던 느낌을 받게 되었다. 문제를 풀기위해서 해결방법을 생각해야하는데 정해진 형식을 외워서 쓰다싶이 하니 문제를 풀 수 없었던 것 같다.\n\n후에 강의를 듣고 다시 도전하러 와야겠다.\n\n## 코드\n\n```java\npackage baekjoon.algorithm.day01;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class InsertSign {\n\n\tstatic int N;\n\tstatic int max = Integer.MIN_VALUE;\n\tstatic int min = Integer.MAX_VALUE;\n\tstatic int[] input;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tN = Integer.parseInt(br.readLine());\n\t\tinput = new int[N];\n\t\tString[] inputes = br.readLine().split(\" \");\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tinput[i] = Integer.parseInt(inputes[i]);\n\t\t}\n\t\tString[] signs = br.readLine().split(\" \");\n\t\tint[] sign = new int[4];\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tsign[i] = Integer.parseInt(signs[i]);\n\t\t}\n\t\tdfs(1, sign[0], sign[1], sign[2], sign[3], input[0]);\n\t\tSystem.out.println(max);\n\t\tSystem.out.println(min);\n\t}\n\n\tpublic static void dfs(int cnt, int p_n, int m_n, int q_n, int d_n, int sum) {\n\t\tif (cnt == N) {\n\t\t\tmax = Math.max(max, sum);\n\t\t\tmin = Math.min(min, sum);\n\t\t\treturn;\n\t\t}\n\t\tif (p_n - 1 >= 0)\n\t\t\tdfs(cnt + 1, p_n - 1, m_n, q_n, d_n, sum + input[cnt]);\n\t\tif (m_n - 1 >= 0)\n\t\t\tdfs(cnt + 1, p_n, m_n - 1, q_n, d_n, sum - input[cnt]);\n\t\tif (q_n - 1 >= 0)\n\t\t\tdfs(cnt + 1, p_n, m_n, q_n - 1, d_n, sum * input[cnt]);\n\t\tif (d_n - 1 >= 0)\n\t\t\tdfs(cnt + 1, p_n, m_n, q_n, d_n - 1, sum / input[cnt]);\n\t}\n\n}\n\n```\n\n## 기억에 남길 것!\n\n- 천천히 생각하고 코드를 외워서 풀지 말기!\n\n","excerpt":"문제#  풀이 및 주저리.. 백준 오프라인 강의의 day01 의 마지막 문제였다. 한참 고민을 하다가 결국 부호들의 순열들을 만들지 못해서 구글링을 하고 말았다. 다른 사람이 푼 코드를 보면서 느꼈던 것은 아직 내가 DFS…","fields":{"slug":"/Algorithm-5_1/"},"frontmatter":{"date":"May 11, 2020","title":"알고리즘 스터디 5주차 문제1 (연산자 끼워넣기)","tags":["algorithm","dfs"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://www.acmicpc.net/problem/14501)\n\n<img src=\"images/algorithm-4-3.png\" alt=\"algorithm-4-3\" style=\"zoom:150%;\" />\n\n## 풀이 및 주저리..\n\n간단하게 생각하면 쉽게 풀 수 있는 문제였는데 문제 이해력이 딸려서 오래 걸렸던 문제였다. **상담을 적절히 했을 때,** 이 말을 상담을 가장 많이 했을때 최대 수익이 구하는 문제인줄 알고 계속해서 이상한 풀이로 문제를 제출하였다.. 그냥 최대 수익을 갖는 문제였는데.. 그래서 결국 당일날에 못풀고 다음날에 다시 도전했는데 이상한 점을 발견해서 쉽게 풀 수 있었다. \n\n 먼저 일하는 날과 얻을 수 있는 수익을 배열로 만들어 저장해 두고 DPS 로 문제를 풀었다. 풀고나서 구글링 해보니 DP 로도 풀 수 있는 문제인 것 같은데, 좀 더 고민하고 후에 다시 도전해봐야겠다.\n\n## 코드\n\n```java\npackage baekjoon.algorithm.day01;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Resignation {\n\n\tstatic int max = 0;\n\tstatic int min_num = 0;\n\tstatic int N;\n\tstatic Work[] works;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO Auto-generated method stub\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tN = Integer.parseInt(br.readLine());\n\t\tworks = new Work[N];\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tString[] TP = br.readLine().split(\" \");\n\t\t\tworks[i] = new Work(Integer.parseInt(TP[0]), Integer.parseInt(TP[1]));\n\t\t}\n\t\tsol(0, 0, 0);\n\n\t\tSystem.out.println(max);\n\n\t}\n\n\tpublic static void sol(int day, int tem_max, int num) {\n\t\tif (day > N)\n\t\t\treturn;\n\n\t\tif (day <= N) {\n\t\t\tmax = Math.max(max, tem_max);\n\t\t}\n\n\t\tfor (int i = day; i < N; i++) {\n\t\t\tsol(i + works[i].T, tem_max + works[i].P, num + 1);\n\t\t}\n\t}\n\n}\n\nclass Work {\n\tint T;\n\tint P;\n\n\tpublic Work(int t, int p) {\n\t\tsuper();\n\t\tT = t;\n\t\tP = p;\n\t}\n\n}\n\n```\n\n## 기억에 남길 것!\n\n- 다시 문제를 잘 읽어보자..\n\n","excerpt":"…","fields":{"slug":"/Algorithm-14/"},"frontmatter":{"date":"May 09, 2020","title":"알고리즘 스터디 4주차 문제3 (퇴사)","tags":["algorithm","dfs"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://www.acmicpc.net/problem/9095)\n\n<img src=\"images/algorithm-4-2.png\" alt=\"algorithm-4-2\" style=\"zoom:150%;\" />\n\n## 풀이 및 주저리..\n\n전 문제에 이어서 바로 풀어본 문제이다. DFS 쪽만 계속해서 풀다보니 빠른 속도로 풀 수 있었다. 살짝 아쉬운것은 동적계획법처럼 이미 들어있는 답은 바로 출력을 해주고 싶었는데 시간안에 해결하지 못한 것이다. 재귀에 조금 익숙해진 것 같은 기분이 들어 좋았다. \n\n## 코드\n\n```java\npackage baekjoon.algorithm.day01;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Plus123 {\n\n\tstatic int answer;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tint[] answer_num;\n\t\t\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint t_case = Integer.parseInt(br.readLine());\n\t\tanswer_num = new int[t_case];\n\n\t\tfor (int i = 0; i < t_case; i++) {\n\t\t\tanswer = 0;\n\t\t\tsol(0, Integer.parseInt(br.readLine()));\n\t\t\tanswer_num[i] = answer;\n\t\t}\n\t\t\n\t\tfor (int i : answer_num) {\n\t\t\tSystem.out.println(i);\n\t\t}\n\t\t\n\n\t}\n\n\tpublic static void sol(int start, int purpose_num) {\n\t\tif (start == purpose_num) {\n\t\t\tanswer++;\n\t\t\treturn;\n\t\t}\n\n\t\tif (start < purpose_num) {\n\t\t\tfor(int i = 1; i<=3; i++) {\n\t\t\t\tsol(start + i, purpose_num);\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n```\n\n## 기억에 남길 것!\n\n- 방문처리와 재귀\n\n","excerpt":"문제# 풀이 및 주저리.. 전 문제에 이어서 바로 풀어본 문제이다. DFS…","fields":{"slug":"/Algorithm-13/"},"frontmatter":{"date":"May 06, 2020","title":"알고리즘 스터디 4주차 문제2 (1,2,3더하기)","tags":["algorithm","dfs"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://www.acmicpc.net/problem/18290)\n\n<img src=\"images/algorithm-4-1.png\" alt=\"algorithm-4-1\" style=\"zoom:150%;\" />\n\n## 풀이 및 주저리..\n\n백준 오프라인 강의를 준비하기 위해 풀었던 문제면서 힘들게 푼 문제이다. 전에 N 과 M 의 형태에서 좀 더 나아가 K 까지 등장한다. 전에는 방문했던 부분이 본인만 이였다면 이번에는 주변까지 확장시켜서 검사를 해나가야 하는 문제이다. 처음에는 `map_bool` 쪽을 단순하게 `boolean` 타입의 배열로 하다가 시간을 꽤 많이 사용하였다. 물론.. 내 실력 부족으로 처리를 못 해준것 같기도하지만,,\n\n처음에 `boolean` 으로 하니 주변 방문의 겹치는 부분을 처리해주기 매우 난감하였다. 예를 들면, \n\n1 2\n\n3 4 \n\n에서 1을 방문하게 되면 \n\nT T\n\nT F\n\n로 였다가 2,2 를 방문시 \n\nT T\n\nT T\n\n에서 2,2 의 방문해제를 할경우\n\nT F\n\nF F \n\n가 되어서 후에 2,1 을 방문하게 되어 문제가 발생한다.\n\n이 경우를 `int` 배열로 변경해 한번 방문시 수를 높여가는 방법으로 해결하였다. 분명 이거보다 좋은 방법이 있을거라고 생각하는데 오프라인 강의를 가서 더 좋은 방법을 알게된다면 글을 수정하여야 겠다. \n\n## 코드\n\n```java\npackage baekjoon.algorithm.day01;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class NMandK {\n\n\tstatic int[][] map;\n\tstatic int[][] map_bool;\n\tstatic int N, M, K;\n\tstatic int max = -40001;\n\tstatic int[] list;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[] NMK = br.readLine().split(\" \");\n\t\tN = Integer.parseInt(NMK[0]);\n\t\tM = Integer.parseInt(NMK[1]);\n\t\tK = Integer.parseInt(NMK[2]);\n\n\t\tlist = new int[K];\n\n\t\tmap = new int[N][M];\n\t\tmap_bool = new int[N][M];\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tString[] input = br.readLine().split(\" \");\n\t\t\tfor (int j = 0; j < M; j++) {\n\t\t\t\tmap[i][j] = Integer.parseInt(input[j]);\n\t\t\t}\n\t\t}\n\t\tsol(0);\n\n\t\tSystem.out.println(max);\n\n\t}\n\n\tpublic static void sol(int num) {\n\t\tif (num == K) {\n\t\t\tint temp = 0;\n\t\t\tfor (int i : list) {\n\t\t\t\ttemp += i;\n\t\t\t}\n\t\t\tmax = Math.max(max, temp);\n\t\t\treturn;\n\t\t}\n\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tfor (int j = 0; j < M; j++) {\n\t\t\t\tif (map_bool[i][j] > 0)\n\t\t\t\t\tcontinue;\n\t\t\t\tcheck(j, i);\n\t\t\t\tlist[num] = map[i][j];\n\t\t\t\tsol(num + 1);\n\t\t\t\tuncheck(j, i);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void check(int x, int y) {\n\t\tmap_bool[y][x]++;\n\t\tif (x - 1 >= 0)\n\t\t\tmap_bool[y][x - 1]++;\n\t\tif (y - 1 >= 0)\n\t\t\tmap_bool[y - 1][x]++;\n\t\tif (x + 1 < M)\n\t\t\tmap_bool[y][x + 1]++;\n\t\tif (y + 1 < N)\n\t\t\tmap_bool[y + 1][x]++;\n\t}\n\n\tpublic static void uncheck(int x, int y) {\n\t\tmap_bool[y][x]--;\n\t\tif (x - 1 >= 0)\n\t\t\tmap_bool[y][x - 1]--;\n\t\tif (y - 1 >= 0)\n\t\t\tmap_bool[y - 1][x]--;\n\t\tif (x + 1 < M)\n\t\t\tmap_bool[y][x + 1]--;\n\t\tif (y + 1 < N)\n\t\t\tmap_bool[y + 1][x]--;\n\t}\n}\n\n```\n\n## 기억에 남길 것!\n\n- 너무 단순하게만 생각하지 말 것, 방문처리는 boolean int 등등 다양한 데이터 타입으로도 해결할 수 있다.\n\n","excerpt":"문제# 풀이 및 주저리.. 백준 오프라인 강의를 준비하기 위해 풀었던 문제면서 힘들게 푼 문제이다. 전에 N 과 M 의 형태에서 좀 더 나아가 K…","fields":{"slug":"/Algorithm-12/"},"frontmatter":{"date":"May 06, 2020","title":"알고리즘 스터디 4주차 문제1 (NM과 K(1))","tags":["algorithm","dfs"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://programmers.co.kr/learn/courses/30/lessons/15649)\n\n<img src=\"images/algorithm-3-3.png\" alt=\"algorithm-3-3\" style=\"zoom:150%;\" />\n\n## 풀이 및 주저리..\n\n5월 12일에 오는 백준 알고리즘 오프라인 강의를 듣기전에 풀어보는 1일차의 첫 번째 문제였다. 문제는 간단해보이지만, 재귀에 대한 개념부족과 DFS 문제에 너무 약해서 몇시간이 걸려도 결국 풀지 못하고 구글링하여 다른 사람들의 답을 볼 수 밖에 없었던 문제다. \n\n답을 보면 흐름을 알고 좀 따라갈 수 있었지만 비슷한 유형의 다른문제가 나올시에 풀기가 매우 힘들것 같다는 생각을 했다. 문제에 대한 접근방식이 부족한 것도 있고 방문처리를 하고 순열을 출력한후 백트래킹 하는 작업이 너무 어색하고 아직 머리속으로 정리되지 않은 느낌이였다. 넘어야할 큰 산을 만난 느낌이라 좀 많이 힘들지만 계속해서 풀다보면 쉬워지는 날이 올 것 같다. \n\n## 코드\n\n```java\npackage baekjoon.algorithm.day01;\n\nimport java.util.Scanner;\n\npublic class NandM1 {\n\n\tstatic int[] list;\n\tstatic boolean[] bool;\n\tstatic int N, M;\n\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tN = scanner.nextInt();\n\t\tM = scanner.nextInt();\n\n\t\tlist = new int[M];\n\t\tbool = new boolean[N + 1];\n\t\t\n\t\tsolution(0);\n\t}\n\n\tpublic static void solution(int num) {\n\t\tif (num == M) {\n\t\t\tfor (int i = 0; i < M; i++) {\n\t\t\t\tSystem.out.print(list[i] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\treturn;\n\t\t}\n\n\t\tfor (int i = 1; i <= N; i++) {\n\t\t\tif(bool[i] == true) continue;\n\t\t\tbool[i] = true;\n\t\t\tlist[num] = i;\n\t\t\tsolution(num + 1);\n\t\t\tbool[i] = false;\n\t\t}\n\t}\n\n}\n\n```\n\n## 기억에 남길 것!\n\n- 방문 처리와 백트래킹\n\n","excerpt":"문제# 풀이 및 주저리.. 5월 12일에 오는 백준 알고리즘 오프라인 강의를 듣기전에 풀어보는 1일차의 첫 번째 문제였다. 문제는 간단해보이지만, 재귀에 대한 개념부족과 DFS…","fields":{"slug":"/Algorithm-11/"},"frontmatter":{"date":"May 03, 2020","title":"알고리즘 스터디 3주차 문제3 (N과 M(1))","tags":["algorithm"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://programmers.co.kr/learn/courses/30/lessons/42626)\n\n<img src=\"images/algorithm-3-2.png\" alt=\"algorithm-3-2\" style=\"zoom:150%;\" />\n\n## 풀이 및 주저리..\n\n전 문제에 이어서 한번도 보지 않았던 프로그래머스의 힙 문제의 lvl2 문제인 더 맵게! 이다. 우선순위 큐를 활용하면 간단하게 풀 수 있는 문제였지만, 아직 알고리즘 초보인 난.. 우선순위 큐라는 개념은 알고있었지만 그게 자바 라이브러리로 제공되는지도 모르고.. 열심히 문제를 풀어보았다. 기본적인 연결리스트와 스택을 활용해서 풀어보려고 했지만.. 정확도는 맞게 나오더라도 효율성이 극악이라.. 절대 통과할 수 없는 문제였다.\n\n결국 구글링한 결과 우선순위 큐를 어떻게 만드는 지, 그리고 자바 자체에서 제공되는 `PriorityQueue` 클래스를 활용해서 쉽게 문제를 풀 수 있었다. 라이브러리 공부를 좀 더 해야할 것 같다.\n\n\n\n## 코드\n\n```java\npackage programmers.heap;\n\nimport java.util.PriorityQueue;\n\npublic class Hotter {\n\tpublic int solution(int[] scoville, int K) {\n\t\tint answer = 0;\n\t\tPriorityQueue<Integer> list = new PriorityQueue<Integer>();\n\t\tfor (int i = 0; i < scoville.length; i++) {\n\t\t\tlist.offer(scoville[i]);\n\t\t}\n\t\twhile (list.peek() < K) {\n\t\t\tif (list.size() >= 2) {\n\t\t\t\tint min = list.poll();\n\t\t\t\tint min2 = list.poll();\n\n\t\t\t\tint hotter = min + (min2 * 2);\n\t\t\t\tlist.offer(hotter);\n\t\t\t\tanswer++;\n\t\t\t}else {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\treturn answer;\n\t}\n}\n\n```\n\n## 기억에 남길 것!\n\n- [우선 순위 큐 활용법](https://cjh5414.github.io/priorityqueue/)\n- 자바에서 제공되는 Collection 들을 활용하자 (개념부터 알고..)\n\n","excerpt":"문제# 풀이 및 주저리.. 전 문제에 이어서 한번도 보지 않았던 프로그래머스의 힙 문제의 lvl…","fields":{"slug":"/Algorithm-10/"},"frontmatter":{"date":"Apr 28, 2020","title":"알고리즘 스터디 3주차 문제2 (더 맵게!)","tags":["algorithm","heap"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://programmers.co.kr/learn/courses/30/lessons/42842)\n\n<img src=\"images/algorithm-3-1.png\" alt=\"algorithm-3-1\" style=\"zoom:150%;\" />\n\n## 풀이 및 주저리..\n\n소프트웨어 마에스트로 코테 이후, 다양한 분양의 알고리즘을 풀어보고자 프로그래머스에 있는 완전 탐색 문제인 카펫을 풀어보았다. lvl2 단계로 30분안에 푸는 것을 목표로 하였는데, 정확하게 35분 걸려서 문제를 풀었다. 차차 줄여나가보자\n\n문제는 갈색과 빨간색 그리고 `return` 해주는 배열의 값들을 보다가 어떻게 탐색하면 될지 생각해 보았다. 결국 빨간 카펫  개수 + 갈색 카펫의 개수 = return 배열값의 곱인것 부터 생각해나갔다. 그리고 빨간 카펫의 개수를 만드는 약수중의 두개 (ex : 2 => 1,2 / 24 => 1,24 2,12 3,8 4,6) 가로, 세로 의 개수 양쪽에 +2 를 해줘 테두리(갈색)를 만드는 직사각형이 총 개수라는 것을 알게되었다. 그후 구현은 쉽게 끝났다.\n\n뭔가 좀더 빠르게 할 수 있는 방법이 있을 것 같기도 하고.. 살짝 아쉽게 푼 문제였다.\n\n## 코드\n\n```java\npackage programmers.perfectsearch;\n\nimport java.util.Arrays;\n\npublic class Carpet {\n\t/*\n\t * RED 의 개수에 따라서 행렬의 행과 열을 짐작하고 두개의 곱이 BROWN 과 RED 값을 더했을때 일치하는지 확인해야한다.\n\t */\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Arrays.toString(solution(10, 2)));\n\t}\n\n\tpublic static int[] solution(int brown, int red) {\n\t\tint[] answer = new int[2];\n\t\tfor (int i = red; i >= 0; i--) {\n\t\t\tif (red % i == 0) {\n\t\t\t\tint v = red / i; // red + 2 = x, i +2 = y\n\t\t\t\tif (find(i, v, red, brown)) {\n\t\t\t\t\tanswer[0] = i + 2;\n\t\t\t\t\tanswer[1] = v + 2;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn answer;\n\t}\n\n\tpublic static boolean find(int x, int y, int red, int brown) {\n\t\tboolean isRight = false;\n\t\tint carpet_s = (x + 2) * (y + 2);\n\t\tif (carpet_s == red + brown) {\n\t\t\tisRight = true;\n\t\t}\n\t\treturn isRight;\n\t}\n\t//35분 걸림..\n}\n\n```\n\n## 기억에 남길 것!\n\n- 규칙을 찾고 어떻게 할지 그려나가는 것이 중요하다.\n\n","excerpt":"문제# 풀이 및 주저리.. 소프트웨어 마에스트로 코테 이후, 다양한 분양의 알고리즘을 풀어보고자 프로그래머스에 있는 완전 탐색 문제인 카펫을 풀어보았다. lvl2 단계로 30분안에 푸는 것을 목표로 하였는데, 정확하게 3…","fields":{"slug":"/Algorithm-9/"},"frontmatter":{"date":"Apr 28, 2020","title":"알고리즘 스터디 3주차 문제1 (카펫)","tags":["algorithm","bruteforce"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n![software-maestro](images/software-maestro.jpeg)\n\n 저번주 일요일인 어제 소프트웨어 마에스트로 2차 온라인 코딩테스트가 있었다. 지금 국비지원을 받으며 수업을 들으며 취준을 하며 이번 하반기를 어떻게 준비하며 보낼까 고민하면서 찾다가 알게된 과정이였다. 알고리즘을 시작한지 얼마 되지 않은 상태로 첫번재 코딩테스틀 봤었고 운이 좋게 합격했었다. 문제는 알고리즘 3문제, SQL 1문제, 웹 1문제로 구성이 되어 있었고 이번에 보는 2차도 마찬가지였다. 저번 1차 코딩테스트에서 아쉽게 웹 문제를 반만 풀고 나머지 반을 못풀었던 기억에 이번에는 좀 더 준비해보고자 주변 지인들에게 도움도 받고 몰랐던 부분들을 좀 더 검색하며 준비하였다. 알고리즘은 거의 하루에 한문제 정도를 목표로 하며 준비를 해왔었고 나름 자신이 있는 상태로 시험을 시작하게 되었다.\n\n그러나... 처음 SQL 긴장을 한 탓인지 문제가 잘 읽히지 않았고 시간을 허비하다가 웹 문제로 넘어가 버렸다. 웹 문제도 얼핏 보기엔 쉬워보였지만 저번과 다르게 형식을 주지않고 형식부터 구현하는 형태로 문제가 제출되었다. 너무 당연히 '이렇게 문제가 나오겠지' 라고 생각했던 나머지 그 부분에 많은 준비를 하지 못한것이다. 이때, 웹 문제를 깔끔하게 포기하거나 정말 끝까지 풀었다면.. 결과가 조금 달라졌을거라 생각하는데 조금 도전을 해보다가 잘 해결되지 않는 것 같아 시간만 허비하고 알고리즘 문제로 돌아갔다. 이렇게 문제를 풀지 못하고 넘어가다 보니.. 멘탈은 흔들리기 시작했고 문제에 너무 집중이 안되기 시작했다. 머리속에는 '아.. 한문제도 못풀면 어쩌지?' 이런 생각이 자꾸 들었고 자꾸 어렵다고만 생각이 들었다. 그 상태에서 문제 2번 , 3번을 보고 다시 SQL 문제로 돌아가고.. 정말 코딩테스트를 보면서 하면 안될 행동들을 전부다 했던 것 같다. 그래도 다시 한번 마음을 좀 가다듬고 SQL부터 풀기 시작했고 조금 진정이 되자 쉬운 문제였던걸 알게되었다. 그렇게 SQL 문제를 한 문제 풀고 1번 알고리즘으로 돌아왔을때 시간이 한 30분정도 남아있던 것 같다. 거의다 풀었다고 생각했지만 시간에 쫓기다보니 더 좋은 방향으로 문제를 풀 수 있었는데 그러지 못했고 결국 1번 문제도 풀지 못하고 시간이 끝이 났다...\n\n시험이 끝났을 때, 좀 많이 허탈한 느낌과 내가 지금까지 무엇을 했나 많은 고민을 하게 되었다. 몇 개월간 공부를 하면서 나름 열심히 한다고 생각했었지만, 너무나도 부족한 현실이였던 것 같다. 시험이 끝나고 그날 하루동안은 앞으로 어떻게 공부방향을 잡아야할지 정해야 된다고 생각했다. 그래서 나온 결론은.. 더 계획적으로 알고리즘을 공부하고 나아가는 것. 생각해보면 많은 사람들이 반년 혹은 1년넘게 계속 공부한 것을 짧은 시간만에 따라잡는것 자체가 너무 욕심이 많은 생각이였던 것 같다. 지금 나의 위치를 알았으니 더 열심히 하는 것이 정답일 것 같다.\n\n","excerpt":"저번주 일요일인 어제 소프트웨어 마에스트로…","fields":{"slug":"/software-maestro-after/"},"frontmatter":{"date":"Apr 27, 2020","title":"소프트웨어 마에스트로 2차 온라인 코딩테스트 후기","tags":["codingtest"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://www.acmicpc.net/problem/1018)\n\n![algorithm-2-5](images/algorithm-2-5.png)\n\n## 풀이 및 주저리..\n\n과거에 풀어보려다가 실패했던 문제였다. 그때 실패했던 문제는 정답을 확인한후 구현을 해보기도하고 시간을 조금 갖고 다시 도전한다. 그때 당시에 처음으로 알고리즘을 시작하던 때라 그저 막막한 생각에 못풀었던 문제였지만 지금 다시 와서 보니 다른 문제보다 더 쉬운 느낌을 받았다. \n\n먼저 길이가 8인 비교할 한줄 체스판을 만들어놓고 생각하니 문제가 쉬워졌던것 같다. 메소드로 8X8의 체스판을 시작점과 끝점 그리고 한줄 체스판중 어떤 것을 사용할지를 받아와 문제를 해결하였다.\n\n## 코드\n\n```java\npackage backjoon.algorithm.simulation;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Problem1018 {\n\n\tstatic final String[] BASIC = { \"WBWBWBWB\", \"BWBWBWBW\" };\n\tstatic char[][] board;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[] xy = br.readLine().split(\" \");\n\t\tint height = Integer.parseInt(xy[0]);\n\t\tint width = Integer.parseInt(xy[1]);\n\n\t\tint min = 65;\n\n\t\tboard = new char[height][width];\n\n\t\tfor (int i = 0; i < height; i++) {\n\t\t\tboard[i] = br.readLine().toCharArray();\n\t\t}\n\n\t\tfor (int i = 0; i <= height - 8; i++) {\n\t\t\tfor (int j = 0; j <= width - 8; j++) {\n\t\t\t\tmin = Math.min(min, Math.min(compareBoard(j, i, 0), compareBoard(j, i, 1)));\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(min);\n\t}\n\n\tpublic static int compareBoard(int x, int y, int start) {\n\t\tint answer = 0;\n\t\tfor (int i = 0; i < 8; i++) {\n\t\t\tfor (int j = 0; j < 8; j++) {\n\t\t\t\tif (board[y + i][x + j] != BASIC[start].charAt(j)) {\n\t\t\t\t\tanswer++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tstart = start + 1 < 2 ? start + 1 : 0;\n\t\t}\n\t\treturn answer;\n\t}\n}\n```\n\n### 채점결과\n\n<img src=\"images/algorithm-2-5-c.png\" alt=\"algorithm-2-5-c\" style=\"width:150%;\" />\n\n\n\n## 기억에 남길 것!\n\n- 비교할 대상을 정의하고 머리속으로 어떤 메소드를 사용할지 분리하고 접근하면 문제가 쉬워진다.\n\n","excerpt":"…","fields":{"slug":"/Algorithm-8/"},"frontmatter":{"date":"Apr 25, 2020","title":"알고리즘 스터디 2주차 문제5 (체스판 다시 칠하기)","tags":["algorithm","simulation"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://www.acmicpc.net/problem/15685)\n\n>  문제가 너무 길어서 링크로 대체..\n\n\n\n## 풀이 및 주저리..\n\n다른 시뮬레이션 문제와 같이 문제를 이해하고 코드로 어떻게 구현하냐가 중요했던 문제였다. 중요했던 부분으로는 드래곤 커브가 어떤 규칙을 가지고 진행 되는지 알아내는 것! 문제에서 **즉, K(K > 1)세대 드래곤 커브는 K-1세대 드래곤 커브를 끝 점을 기준으로 90도 시계 방향 회전 시킨 다음, 그것을 끝 점에 붙인 것이다.** 이 부분을 해석하는것이 가장 중요했던것 같다. 끝 점에서 부터 붙인다는 개념을 이미 가지고 있는 리스트에서 마지막의 간선의 상태로 다음에 어떻게 이어질지를 구해낼 수 있었다. 그래서 커브를 클래스 빼고 모든 점을 가지고 있는 `body` 리스트와 지금까지 진행하면서 간선들이 가지고 있는 방향의 정보를 `s_dir` 에 저장해 그다음의 드래곤 커브를 구하게 되었다. \n\n문제를 풀고나서 생각하다보니 굳이 `body`라는 리스트로 `Point`의 정보를 가질 필요가 없다는 것을 알게 되었고 조금 쓸데없는 부분들이 포함되었지만 나름 깔끔하게 문제를 풀은것 같아 기분이 좋았다.\n\n## 코드\n\n```java\npackage backjoon.algorithm.simulation;\n\nimport java.awt.Point;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.LinkedList;\nimport java.util.Stack;\n\n\npublic class Problem15685 {\n\t/*\n\t * 오른쪽 시작일때\n\t * \n\t * x +1 => y -1 y -1 => x -1 x -1 => y +1 y +1 => x +1\n\t * \n\t * 0: x좌표가 증가하는 방향 (→) 1: y좌표가 감소하는 방향 (↑) 2: x좌표가 감소하는 방향 (←) 3: y좌표가 증가하는 방향\n\t * (↓)\n\t */\n\tstatic final int[][] DIR = { { 1, 0 }, { 0, -1 }, { -1, 0 }, { 0, 1 } };\n\tstatic int[][] map = new int[101][101];\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint curv_n = Integer.parseInt(br.readLine());\n\t\tfor (int i = 0; i < curv_n; i++) {\n\t\t\tString[] curv = br.readLine().split(\" \");\n\t\t\tint x = Integer.parseInt(curv[0]);\n\t\t\tint y = Integer.parseInt(curv[1]);\n\t\t\tint dir = Integer.parseInt(curv[2]);\n\t\t\tint gen = Integer.parseInt(curv[3]);\n\t\t\tDragonCurve dCurve = new DragonCurve(x, y, dir);\n\t\t\tdCurve.nextGeneration(gen);\n\t\t\tdCurve.checkArea();\n\t\t}\n\t\tint answer = checkDrangonCurve();\n\t\tSystem.out.println(answer);\n\t}\n\n\tstatic class DragonCurve {\n\t\tint x;\n\t\tint y;\n\t\tLinkedList<Point> body = new LinkedList<Point>();\n\t\tStack<Integer> s_dir = new Stack<Integer>();\n\n\t\tpublic DragonCurve(int x, int y, int dir) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tbody.add(new Point(x, y));\n\t\t\tbody.add(go(dir));\n\t\t\ts_dir.push(dir);\n\t\t}\n\n\t\tpublic void nextGeneration(int gen) {\n\t\t\tfor (int i = 0; i < gen; i++) {\n\t\t\t\tStack<Integer> temp_s = new Stack<Integer>();\n\t\t\t\ttemp_s.addAll(s_dir);\n\t\t\t\twhile (!temp_s.isEmpty()) {\n\t\t\t\t\tint dir = temp_s.pop();\n\t\t\t\t\tdir = dir + 1 < 4 ? dir + 1 : 0;\n\t\t\t\t\tbody.add(go(dir));\n\t\t\t\t\ts_dir.push(dir);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic Point go(int dir) {\n\t\t\tx += DIR[dir][0];\n\t\t\ty += DIR[dir][1];\n\t\t\treturn new Point(x, y);\n\t\t}\n\n\t\tpublic void checkArea() {\n\t\t\tfor (Point pt : body) {\n\t\t\t\tmap[pt.y][pt.x] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static int checkDrangonCurve() {\n\t\tint answer = 0;\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tfor (int j = 0; j < 100; j++) {\n\t\t\t\tif (map[i][j] == 1 && map[i][j + 1] == 1) {\n\t\t\t\t\tif (map[i + 1][j] == 1 && map[i + 1][j + 1] == 1) {\n\t\t\t\t\t\tanswer++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn answer;\n\t}\n}\n```\n\n\n\n\n\n\n\n### 채점결과\n\n<img src=\"images/algorithm-2-4-c.png\" alt=\"algorithm-2-4-c\" style=\"width:150%;\" />\n\n\n\n## 기억에 남길 것!\n\n- 문제에서 클래스 빼서 정의할 수 있는 부분은 빼서 생각하면 문제가 쉬워진다.\n","excerpt":"문제#  문제가 너무 길어서 링크로 대체.. 풀이 및 주저리.. 다른 시뮬레이션 문제와 같이 문제를 이해하고 코드로 어떻게 구현하냐가 중요했던 문제였다. 중요했던 부분으로는 드래곤 커브가 어떤 규칙을 가지고 진행 되는지 알아내는 것! 문제에서 즉, K…","fields":{"slug":"/Algorithm-7/"},"frontmatter":{"date":"Apr 25, 2020","title":"알고리즘 스터디 2주차 문제4 (드래곤 커브)","tags":["algorithm","simulation"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://www.acmicpc.net/problem/14890)\n\n>  문제가 너무 길어서 링크로 대체..\n\n\n\n## 풀이 및 주저리..\n\n풀었던 시뮬레이션 문제중에서 가장 시간이 오래 걸리면서 푼 문제가 되었다. 처음에 시간을 재면서 풀다보니 좀 급급해지는 마음으로 접근하다가 중복되는 코드와.. 알아볼 수 없는 형식 등등 너무 심각한 문제들이 많이 발생해서 적어두고 가끔 와서 보면서 반성하는 의미로 코드를 두개 올린다.\n\n풀이는 길을 배열로 받아 가면서 자신보다 1 높은 곳을 발견할 때와 1 낮은 곳을 발견할 때 어떤 로직으로 처리하느냐가 관건이였던 문제였다. 높은 경우는 쉽게 해결할 수 있었지만 낮은 곳으로 내려갈 때가 좀 어려웠던 것 같다. 구글링해보니 진행을 잠시 멈추고 하는 경우도 있었는데 내가 푼 경우는 계속 진행을 하면서 갈수 있는지를 체크하는 살짝 무식한 방법이였던것 같다.\n\n처음에 한시간 반이라는 시간이 걸려서 문제를 풀고  테스트케이스도 다 통과했지만 문제 자체가 정답이 나오지 않았다. 분명 놓친 반례가 있을거라고 생각했고 계속해서 고민하다보니 시간이 너무나도 많이 흘러가버렸다. 코드가 정말 너무너무 마음에 들지않아서 하루지나서 다시 처음부터 문제를 읽고 좀 더 정리하면서 풀어본 코드가 두번째 코드이다. 하지만 끝까지 반례를 찾지 못했고 백준의 질문검색으로 사람들이 올려놓은 질문들과 좀더 추가한 테스트 케이스들을 넣어가며 반레를 찾아낼 수 있었다. 2일에 걸쳐서 같은 문제를 풀면서 좌절감도 좀 많이 느껴졌지만 결국 풀어냈다.\n\n\n\n## 코드\n\n1차 코드.. 충분한 생각없이 문제를 풀기 시작해, 결국 풀지 못했다.\n\n<details> \n    <summary>부끄러워 접어두었다..</summary>\n\n```java\npackage backjoon.algorithm.simulation;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Problem14890 {\n\tstatic int N, L;\n\tstatic char[][] map;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[] sizeStr = br.readLine().split(\" \");\n\t\tN = Integer.parseInt(sizeStr[0]);\n\t\tL = Integer.parseInt(sizeStr[1]);\n\t\tint answer = 0;\n\t\tmap = new char[N][N];\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tmap[i] = br.readLine().replace(\" \", \"\").toCharArray();\n\t\t}\n\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tchar height = map[i][0];\n\t\t\tint height_num = 1;\n\t\t\tint temp_L = L;\n\t\t\tboolean isCan = true;\n\t\t\tfor (int j = 1; j < N; j++) {\n\t\t\t\tif (height == map[i][j]) {\n\t\t\t\t\theight_num++;\n\t\t\t\t} else if (height + 1 == map[i][j] && temp_L == L) {\n\t\t\t\t\tif (height_num >= L) {\n\t\t\t\t\t\theight = map[i][j];\n\t\t\t\t\t\theight_num = 1;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tisCan = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (height - 1 == map[i][j]) {\n\t\t\t\t\tif (--temp_L != 0) {\n\t\t\t\t\t\tisCan = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\theight = map[i][j];\n\t\t\t\t\t\ttemp_L = L;\n\t\t\t\t\t\theight_num = 0;\n\t\t\t\t\t\tisCan = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tisCan = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isCan) {\n\t\t\t\tanswer++;\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tchar height = map[0][i];\n\t\t\tint height_num = 1;\n\t\t\tint temp_L = L;\n\t\t\tboolean isCan = true;\n\t\t\tfor (int j = 1; j < N; j++) {\n\t\t\t\tif (height == map[j][i]) {\n\t\t\t\t\theight_num++;\n\t\t\t\t} else if (height + 1 == map[j][i] && temp_L == L) {\n\t\t\t\t\tif (height_num >= L) {\n\t\t\t\t\t\theight = map[j][i];\n\t\t\t\t\t\theight_num = 1;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tisCan = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (height - 1 == map[j][i]) {\n\t\t\t\t\tif (--temp_L != 0) {\n\t\t\t\t\t\tisCan = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\theight = map[j][i];\n\t\t\t\t\t\theight_num = 0;\n\t\t\t\t\t\ttemp_L = L;\n\t\t\t\t\t\tisCan = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tisCan = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isCan) {\n\t\t\t\tanswer++;\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.println(answer);\n\t}\n}\n```\n</details>\n\n\n- 2차 코드\n\n```java\npackage backjoon.algorithm.simulation;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Problem14890_2 {\n\tstatic int N, L;\n\tstatic int[][] map;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tint sum = 0;\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[] input = br.readLine().split(\" \");\n\t\tN = Integer.parseInt(input[0]);\n\t\tL = Integer.parseInt(input[1]);\n\t\tmap = new int[N][N];\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tString[] values = br.readLine().split(\" \");\n\t\t\tfor (int j = 0; j < N; j++) {\n\t\t\t\tmap[i][j] = Integer.parseInt(values[j]);\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tsum += check(i, 0, 1) ? 1 : 0;\n\t\t\tsum += check(0, i, 0) ? 1 : 0;\n\t\t}\n\t\tSystem.out.println(sum);\n\n\t}\n\n\tpublic static boolean check(int x, int y, int dir) {\n\t\tboolean answer = true;\n\t\tint[] heights = new int[N];\n\t\tif (dir == 0) {\n\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\theights[i] = map[y][i];\n\t\t\t}\n\t\t} else if (dir == 1) {\n\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\theights[i] = map[i][x];\n\t\t\t}\n\t\t}\n\n\t\tint now = heights[0];\n\t\tint heights_n = 1;\n\t\tint down = L;\n\n\t\tfor (int i = 1; i < N; i++) {\n\t\t\tif (now == heights[i] && answer) {\n\t\t\t\theights_n++;\n\t\t\t} else if (now + 1 == heights[i] && answer) {\n\t\t\t\tif (heights_n >= L) {\n\t\t\t\t\tnow = heights[i];\n\t\t\t\t\theights_n = 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (now - 1 == heights[i]) {\n\t\t\t\tdown--;\n\t\t\t\tif (down == 0) {\n\t\t\t\t\tnow = heights[i];\n\t\t\t\t\theights_n = 0;\n\t\t\t\t\tdown = L;\n\t\t\t\t\tanswer = true;\n\t\t\t\t} else {\n\t\t\t\t\tanswer = false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}\n```\n\n<img src=\"images/algorithm-2-3-c.png\" alt=\"algorithm-2-3-c\" style=\"width:150%;\" />\n\n\n\n## 기억에 남길 것!\n\n- 문제를 풀때 충분하게 고민하고 머리속으로 설계가 끝나면 문제를 풀도록 하자. 시간에 쫓겨 풀다보면 더 문제가 심각해진다.\n","excerpt":"…","fields":{"slug":"/Algorithm-6/"},"frontmatter":{"date":"Apr 23, 2020","title":"알고리즘 스터디 2주차 문제3 (경사로)","tags":["algorithm","simulation"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://www.acmicpc.net/problem/1057)\n\n![algorithm-2-2](images/algorithm-2-2.png)\n\n## 풀이 및 주저리..\n\n저번 문제를 풀고 이번주 SW마에스트로 코딩테스트를 대비한다는 생각으로 이어서 바로 풀어봤던 문제였다. 문제내용은 길지만 결국 지민이와 한수가 언제 대결을 하는지 찾는 문제였다. 처음에 단순하게 시뮬레이션으로 배열을 만들고 차례로 줄여나갈까 생각도 했었는데 배열의 크기를 계속 줄이면서 새로만드는 것 자체가 너무 비효율적이라고 생각했다. 결국 지민이와 한수는 **무조건 이긴다** 라는 조건을 잘 생각해봤고 둘이 만나지 않을 경우 -1을 출력하라는 말을 잘 생각해봤다. 토너먼트에서 계속 이기는데 둘이 만나지 않는 경우는 없다고 생각했고 다른 예외로 부전승을 고민하면서 어떻게 구현을 해야하나 고민을 하고 있었다. 그러다 뭔가 수리적인 접근으로 분명 규칙이 있을 것 같다고 생각했다.\n\n만약 1 과 2 중 지민이나 한수가 있으면 12 는 후에 1이되는거고 34 는 2 가 되고... 결국 (지금의 번호 +1) /2 가 다음번의 자신의 번호가 된다고 결론이 나왔다. 그래서 그 둘의 번호가 같아지는 순간? => 지민이와 한수가 만나는 순간. 이라고 생각을 해서 코드를 작성해 보았다. 이게 정답이였지만..\n\n막상 시험에서 이 문제를 만났다고 생각하고 테스트케이스는 넘어갈 수 있지만 정말로 이게 정답인가? 라는 확신이 부족했다. 근래에 봤던 라인, 소마 코테에서 제출을 하더라도 그게 정확한 정답인지 아닌지 확인할 수 없었기 떄문이다. 즉, 테스트케이스가 잘 통과된다고 문제를 넘어가는 순간.. 그 문제를 다시 보지 않게되고 반례가 존재할 경우 문제를 틀리던 경우가 있었다.(라인 1번을..) 생각해보면 소마 1차 온라인 코딩테스트를 통과한 것도 1번을 확실하게 풀었기 때문인 것 같다. 하여튼.. 로직을 짜고 생각을 해보며 반례를 찾았는데 부전승의 위치에 지민이나 한수가 간다면 이상한 정답이 나올거라고 생각했다. 거의 한시간 정도 문제를 고민했고 결국 답에 확신이 없이 제출을 하게 되었다. 다행이 정답이긴 했지만.. 이걸 과연 풀었다고 할 수 있는건지.. 결국 계속 생각하다보니 내가 푼 방식은 부전승에 영향을 받지 않고 수를 줄여나가며 비교하니 반례가 존재하지 않는 것이 였다. 실제 시험에서도 이렇게 맞아서 넘어가게 되면 다행이지만.. 틀릴경우 끝이니 이런 방식이 도움이 될 것 같다. 물론 시간을 좀 많이 쓰는건 좋지 않겠지만..\n\n\n\n## 코드\n\n```java\npackage backjoon.algorthim.simulation;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Problem1057 {\n\tstatic int N, kim, yim;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[] input = br.readLine().split(\" \");\n\t\tint answer = 0;\n\t\tN = Integer.parseInt(input[0]);\n\t\tkim = Integer.parseInt(input[1]);\n\t\tyim = Integer.parseInt(input[2]);\n\t\twhile (kim != yim) {\n\t\t\tkim = (kim + 1) / 2;\n\t\t\tyim = (yim + 1) / 2;\n\t\t\tanswer++;\n\t\t}\n\t\tSystem.out.println(answer);\n\t}\n}\n```\n\n\n\n<img src=\"images/algorithm-2-1-c.png\" alt=\"algorithm-1-1-c\" style=\"width:150%;\" />\n\n\n\n## 기억에 남길 것!\n\n- 문제의 정답을 확인할 때는 언제나 확신에 찬 상태로 제출하도록 하자.\n- 실제 시험에서는 시간과 정확도에 잘 비중을 맞춰서 문제를 풀어야할 것 같다.","excerpt":"문제#  풀이 및 주저리.. 저번 문제를 풀고 이번주 SW…","fields":{"slug":"/Algorithm-5/"},"frontmatter":{"date":"Apr 22, 2020","title":"알고리즘 스터디 2주차 문제2 (토너먼트)","tags":["algorithm","simulation"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://www.acmicpc.net/problem/14891)\n\n너무 길어서 링크에 들어가서 보는걸로 대체..\n\n## 풀이 및 주저리..\n\n저번주에 이어서 백준의 다음 시뮬레이션 문제이다. 정답률은 최근에 풀었던 시뮬레이션 문제보다 높은 54%라서 쉽게 생각하고 접근했다. 조금 어려웠던 부분은 톱니바퀴 하나가 회전을 하기전에 옆의 톱니바퀴를 확인하여 그것을 돌릴지 말지 먼저 결정한 (살짝 DFS 와 비슷한 것 같기도..?) 다음 자신을 회전해야하는데 이 순서가 바뀌거나 자칫 잘못생각하면 무한루프에 빠질 수도 있을 것 같았다. 하지만 좌 우 살피는 `r_check` 와 `l_check` 메소드를 만들고 그 이후 회전하는 `rot_wheel` 메소드로 톱니바퀴를 회전시켰다. 나름 깔끔하게 짰다고 처음에 생각했지만.. 역시나 고난은 있었다.\n\n\n\n테스트 케이스조차 지나가지지 않아서 어디가 문제인지를 파악하는게 좀 오래 걸렸던 것 같다. 당연히 좌우 확인하는 로직에서 문제가 있을거라고 생각해 그쪽 부분을 중점적으로 봤는데 문제는 다른곳인 `rot_wheel` 이 였다. `rot_wheel` 안의 `for`문에서 배열의 값을 오른쪽 왼쪽으로 shift 하는 과정에서 실수로 하나의 값이 계속 옮겨가지게 구현을 한 것이였다. 전처럼 문제에서 놓친부분이 있을거라고 생각하면서 문제를 정말 꼼꼼히 읽고 다시 접근하고 그랬는데.. 언제나 문제는 쉬운곳에 있는 것 같다. \n\n\n\n## 코드\n\n```java\npackage backjoon.algorthim.simulation;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Problem14891 {\n\tstatic char[][] wheel = new char[4][8];\n\tstatic int rot_case_num;\n\tstatic int[][] rot_case;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tint answer = 0;\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\twheel[i] = br.readLine().toCharArray();\n\t\t}\n\t\trot_case_num = Integer.parseInt(br.readLine());\n\t\trot_case = new int[rot_case_num][2];\n\t\tfor (int i = 0; i < rot_case_num; i++) {\n\t\t\tString[] input = br.readLine().split(\" \");\n\t\t\trot_case[i][0] = Integer.parseInt(input[0]) - 1;\n\t\t\trot_case[i][1] = Integer.parseInt(input[1]);\n\t\t}\n\t\tfor (int i = 0; i < rot_case_num; i++) {\n\t\t\tcompare_wheel(rot_case[i][0], rot_case[i][1]);\n\t\t}\n\t\tfor (int i = 0; i < wheel.length; i++) {\n\t\t\tanswer += Character.getNumericValue(wheel[i][0]) * (int) Math.pow(2, i);\n\t\t}\n\t\tSystem.out.println(answer);\n\n\t}\n\n\tpublic static void compare_wheel(int pos, int dir) {\n\t\tl_check(pos, dir);\n\t\tr_check(pos, dir);\n\t\trot_wheel(pos, dir);\n\t}\n\n\tpublic static void l_check(int pos, int dir) {\n\t\tif (pos == 0)\n\t\t\treturn;\n\t\tif (wheel[pos][6] != wheel[pos - 1][2]) {\n\t\t\tl_check(pos - 1, dir * -1);\n\t\t\trot_wheel(pos - 1, dir * -1);\n\t\t}\n\t}\n\n\tpublic static void r_check(int pos, int dir) {\n\t\tif (pos == 3)\n\t\t\treturn;\n\t\tif (wheel[pos][2] != wheel[pos + 1][6]) {\n\t\t\tr_check(pos + 1, dir * -1);\n\t\t\trot_wheel(pos + 1, dir * -1);\n\t\t}\n\t}\n\n\tpublic static void rot_wheel(int pos, int dir) {\n\n\t\tif (dir == 1) {\n\t\t\tchar temp = wheel[pos][7];\n\t\t\tfor (int i = 7; i > 0; i--) {\n\t\t\t\twheel[pos][i] = wheel[pos][i - 1];\n\t\t\t}\n\t\t\twheel[pos][0] = temp;\n\t\t} else if (dir == -1) {\n\t\t\tchar temp = wheel[pos][0];\n\t\t\tfor (int i = 0; i < 7; i++) {\n\t\t\t\twheel[pos][i] = wheel[pos][i + 1];\n\t\t\t}\n\t\t\twheel[pos][7] = temp;\n\t\t}\n\n\t}\n}\n\n```\n\n\n\n<img src=\"images/algorithm-2-1-c.png\" alt=\"algorithm-1-1-c\" style=\"width:150%;\" />\n\n\n\n## 기억에 남길 것!\n\n- 문제점은 쉬운 곳에서 발생하는 경우가 많다. 테스트케이스 조차 통과하지 못한다면 처음부터 천천히 코드를 따라가면서 생각해보자. (어림짐작 금물)","excerpt":"문제# 너무 길어서 링크에 들어가서 보는걸로 대체.. 풀이 및 주저리.. 저번주에 이어서 백준의 다음 시뮬레이션 문제이다. 정답률은 최근에 풀었던 시뮬레이션 문제보다 높은 5…","fields":{"slug":"/Algorithm-4/"},"frontmatter":{"date":"Apr 21, 2020","title":"알고리즘 스터디 2주차 문제1 (톱니바퀴)","tags":["algorithm","simulation"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n<a href = \"https://programmers.co.kr/competitions/144/2020-web-be-first\"><img src=\"images/programmers-devmatching.png\" alt=\"programmers-devmatching\"/></a>\n\n이번 18일에 프로그래머스에서 주관하는 웹 백엔드 개발자 Dev-Mathching을 지원하여 코딩테스트를 보게 되었다. 이번 Dev-Matching 에서는 따로 과제가 없고 코딩테스트로만으로 추후 선택한 기업과 연결해주는 좋은 제도(?) 였다. 상반기 웹 프론트같은 경우 시험을 보지는 않았지만 구글링해본 결과 난이도가 상당히 있어보였고.. 그래서 SQL 문제를 포함한 알고리즘 문제가 상당히 어려울 것이라 예상하고.. 시험을 시작했다. \n\n\n\n하지만..? 결과적으로는 지금까지 봤던 코딩테스트 중에서 개인적으로 가장 난이도가 낮았던 것 같다. 알고리즘 3문제, SQL 1문제였는데 SQL 문제는 `join` 을 활용한 문제로 쉽게 풀 수 있었고 (SQL문제는 대부분 난이도가 높아봐야 거기서 거기인것 같기도..?) 알고리즘 1번은 그리디, 2번은 시뮬레이션으로 쉽게 풀어 나갈 수 있었다. 특히 2번 같은 경우는 최근에 포스팅한 로봇청소기와 뱀 문제 보다 쉬운 형태로 나와 최근 공부가 정말 크게 도움이 되었던 것 같다. 처음 접했으면 정말 어렵게 느껴졌겠지만 최근 시뮬레이션만 풀다보니.. 특히 SW 역량평가의 문제를 읽으면서 문제 이해력이 좀 높아진것 같기도 한것 같다. 그리고 3번.. 문제는  비교적 짧고 간단해보였지만 결국 끝까지 풀지 못했다. 그 이유는 아직 내가 많이 준비하지 못한 DFS 부분이였기 때문.. 문제를 보고 많이 풀어보지 못한 DFS/BFS 부분인 것 같은데 머리가 로직을 따라갈 수가 없었다. 한시간 동안 3문제를 풀고 1시간이란 시간이 남아서 열심히 도전해보았지만.. 결국 문제를 풀지 못했고 아직 많이 부족했다는 것을 알게 되었다. \n\n\n\n조금 더 잘 준비했다면 네 문제를 다 풀수도 있었을 것 같은 시험이였는데.. 정말 아쉬움이 많이 남았고 처음에 알고리즘을 시작하면서 '내가 과연 코딩테스트에서 문제를 다 풀 수 있을까?' 라고 생각했던 날이 다가올뻔 했다. 다음 코딩테스트는 아마  1차 코딩테스트를 합격한 SW마에스트로 2차 코딩테스트가 될 것 같은데... 일주일 정도 남은 기간이다. 이때동안 DFS 와 BFS 를 개념적으로 더 확실하게 익히고 간단한 문제라도 조금은 손댈수 있는 정도가 된 상태로 시험을 봤으면 좋을 것 같은 생각이 들었다. ","excerpt":"이번 18일에 프로그래머스에서 주관하는 웹 백엔드 개발자 Dev-Mathching을 지원하여 코딩테스트를 보게 되었다. 이번 Dev-Matching…","fields":{"slug":"/programmers-backend/"},"frontmatter":{"date":"Apr 18, 2020","title":"프로그래머스 2020 Dev Matching 웹 백엔드 개발자 코딩테스트 후기","tags":["algorithm","codingtest"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://www.acmicpc.net/problem/3190)\n\n<img src=\"images/algorithm-1-3.png\" alt=\"algorithm-1-3\" style=\"width:150%;\" />\n\n## 풀이 및 주저리..\n\n역시나 저번에 이어서 시뮬레이션 문제였다. 정답비율이 너무 낮아서 시작전에 이걸 내가 과연 풀 수 있을까..? 라고 생각하면서 시작했었는데 신기하게 처음 시뮬레이션을 풀었던 로봇 청소기 문제보다 시간이 적게 걸리고 풀었던 것 같다. 시뮬레이션 문제에 조금씩 감이 잡히는 것 같기도하고.. 문제를 잘 이해하고 따라가는 실력이 늘어난 것 같기도 하다. 방향을 회전하거나 좌표를 구해서 움직이는 방법에 좀 친숙해진 느낌이라서 좋았다. \n\n\n\n풀면서 중점이 됐던 부분은 어떻게 뱀이 지나간 위치(몸)를 기억하는 것과 매초 시간이 지날때 규칙이 어떻게 진행 되는지 였던 것 같다. 지나간 위치는 java 에서 제공해주는 컬렉션 프레임워크 중 deque를 잘 활용해서 풀었던 것 같다. 시간 지날때마다 몸의 변화 규칙은 하나하나 천천히 생각해보면서 어떤 규칙이 먼저인지 따져보며 풀어보니 한 두번의 수정으로만으로 해결할 수 있었다.\n\n\n\n규칙: 뱀의 몸길이를 늘려 머리를 다음칸에 위치시킨다.(가장 먼저 다음 위치가 벽인지 아니면 자신의 몸중에 한부분이라도 좌표값이 같은지 확인해본다.) => 벽이나 몸의 일부분이면 종료. 아니라면 사과의 유/무 확인 후 꼬리부분(deque.pollFirst()) 를 할지 말지를 결정. 시간이 지날때 마다 방향변경을 담고있는 맵이 key(시간) 값을 갖고 있는지 확인하며 진행.\n\n\n\n## 코드\n\n```java\npackage backjoon.algorthim.simulation;\n\nimport java.awt.Point;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.Map;\n\n/*\n * 게임은 NxN 정사각 보드위에서 진행되고\n * 보드의 상하좌우 끝에 벽이 있다. \n * 게임이 시작할때 뱀은 맨위 맨좌측에 위치하고 뱀의 길이는 1 이다. \n * 뱀은 처음에 오른쪽을 향한다.\n * \n * 뱀은 매 초마다 이동을 하는데 다음과 같은 규칙을 따른다.\n * \n * 먼저 뱀은 몸길이를 늘려 머리를 다음칸에 위치시킨다.\n * 만약 이동한 칸에 사과가 있다면, 그 칸에 있던 사과가 없어지고 꼬리는 움직이지 않는다.\n * 만약 이동한 칸에 사과가 없다면, 몸길이를 줄여서 꼬리가 위치한 칸을 비워준다. 즉, 몸길이는 변하지 않는다.\n사과의 위치와 뱀의 이동경로가 주어질 때 이 게임이 몇 초에 끝나는지 계산하라.\n * \n * 첫째 줄에 보드의 크기 N이 주어진다. (2 ≤ N ≤ 100) \n * 다음 줄에 사과의 개수 K가 주어진다. (0 ≤ K ≤ 100)\n * \n * 다음 K개의 줄에는 사과의 위치가 주어지는데, 첫 번째 정수는 행, \n * 두 번째 정수는 열 위치를 의미한다. 사과의 위치는 모두 다르며, 맨 위 맨 좌측 (1행 1열) 에는 사과가 없다.\n */\npublic class Problem3190 {\n\tstatic int N, K, L;\n\tstatic int[][] map;\n\tstatic int time = 0;\n\tstatic final int[][] DIR = { { 1, 0 }, { 0, 1 }, { -1, 0 }, { 0, -1 } };\n\tstatic boolean isGame = true;\n\tstatic Map<Integer, Character> dir_map = new HashMap<Integer, Character>();\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tN = Integer.parseInt(br.readLine());\n\t\tmap = new int[N + 2][N + 2];\n\t\tK = Integer.parseInt(br.readLine());\n\n\t\tfor (int i = 0; i < N + 2; i++) {\n\t\t\tmap[0][i] = 1;\n\t\t\tmap[N + 1][i] = 1;\n\t\t\tmap[i][0] = 1;\n\t\t\tmap[i][N + 1] = 1;\n\t\t} // 맵 제일 끝 부분 벽으로 만들기.\n\n\t\tfor (int i = 0; i < K; i++) {\n\t\t\tString[] a_xy = br.readLine().split(\" \");\n\t\t\tmap[Integer.parseInt(a_xy[0])][Integer.parseInt(a_xy[1])] = 3;\n\t\t}\n\n\t\t\n\n\t\tL = Integer.parseInt(br.readLine());\n\t\tfor (int i = 0; i < L; i++) {\n\t\t\tString[] arr_dir = br.readLine().split(\" \");\n\t\t\tdir_map.put(Integer.parseInt(arr_dir[0]), arr_dir[1].toCharArray()[0]);\n\t\t}\n\t\tSnake snake = new Snake();\n\t\twhile (isGame) {\n\t\t\ttime++;\n\t\t\tsnake.go();\n\t\t\tif (dir_map.containsKey(time)) {\n\t\t\t\tsnake.changeDir(dir_map.get(time));\n\t\t\t}\n\n\t\t}\n\t\tSystem.out.println(time);\n\t\t\n//\t\tfor (int i = 0; i < map.length; i++) {\n//\t\t\tfor (int j = 0; j < map[i].length; j++) {\n//\t\t\t\tSystem.out.print(map[i][j]);\n//\t\t\t}\n//\t\t\tSystem.out.println();\n//\t\t} 맵 출력\n\n\t}\n\n\tstatic class Snake {\n\t\tDeque<Point> body = new LinkedList<Point>();\n\t\tint dir = 0;\n\n\t\tpublic Snake() {\n\t\t\tbody.addLast(new Point(1, 1));\n\t\t}\n\n\t\tpublic void go() {\n\t\t\tint y = body.peekLast().y + DIR[dir][1];\n\t\t\tint x = body.peekLast().x + DIR[dir][0];\n\n\n\t\t\tfor (Point pt : body) {\n\t\t\t\tif (pt.x == x && pt.y == y) {\n\t\t\t\t\tisGame = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (map[y][x] == 1) {\n\t\t\t\tisGame = false;\n\t\t\t\treturn;\n\t\t\t} else if (map[y][x] == 0) {\n\t\t\t\tbody.pollFirst();\n\t\t\t} else if (map[y][x] == 3) {\n\t\t\t\tmap[y][x] = 0;\n\t\t\t}\n\n\t\t\tbody.addLast(new Point(x, y));\n\t\t}\n\n\t\tpublic void changeDir(char c) {\n\t\t\tif (c == 'D') {\n\t\t\t\tdir = (dir + 1) % 4;\n\t\t\t} else if (c == 'L') {\n\t\t\t\tdir = dir - 1 >= 0 ? dir - 1 : 3;\n\t\t\t}\n\t\t}\n\n\t}\n}\n\n```\n\n\n\n<img src=\"images/algorithm-1-3-c.png\" alt=\"algorithm-1-3-c\" style=\"width:150%;\" />\n\n> 풀고나서 기록을 하루 넘긴다음 남기다보니 제출한 시간이 1일전이다.\n\n## 기억에 남길 것!\n\n- 언제나 시작점과 끝점은 중요하다.\n- 문제를 잘 보고 클래스로 어떻게 만들면 좋을지 구상을 완벽하게 하고 접근하면 문제가 쉬워진다.\n- 남들이 어렵다고 생각해도 나한테는 쉬운문제일 수도 쉽다고 생각해도 나한테는 어려운 문제일 수도 있다.\n- java라는 언어가 가지고 있는 collection framework 를 잘쓴다면 정말 많은 도움이 된다.\n\n","excerpt":"…","fields":{"slug":"/Algorithm-3/"},"frontmatter":{"date":"Apr 16, 2020","title":"알고리즘 스터디 1주차 문제3 (뱀)","tags":["algorithm","simulation"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://www.acmicpc.net/problem/14499)\n\n<img src=\"images/algorithm-1-2.png\" alt=\"algorithm-1-2\" style=\"width:150%;\" />\n\n## 풀이 및 주저리..\n\n저번에 로봇 청소기를 풀고 시뮬레이션 문제를 좀 더 풀어보고자 바로 도전한 주사위 굴리기 문제이다. 역시나 문제를 잘 읽고 이해를 제대로 하지 않고 시작하면 꽤나 헷갈리는 문제이다. 이렇게 한 두문제 풀다보니 이번에는 시간을 재면서 한시간 반~ 두시간 정도면 풀 수 있을거라 생각했는데.. 테스트케이스가 다 통과해도 실패가 뜨는 문제가 있었다. 코드를 제출하자마자 실패하는 걸로 보아 문제에서 뭔가 내가 놓친게 있다! 라고 계속해서 생각했지만 도통 찾기 힘들었다. 결국 학원에 남아서 조금 더 해도 발견하지 못했고 집에 돌아와 문제를 발견했다. 문제점은 바로.. 주사위의 위치가 r,c 에서 r이 y좌표고 c가 x 좌표였던 것.. 저번에도 이런 비슷한 문제로 시간을 꽤나 잡아먹었는데.. 이번에도 바뀌지 못하고 문제를 풀었던 내가 조금 답답했다:cry: 그래도 끝까지 답을 찾지 않고 집에와서 풀었을 때 기뻤으니 만족! 다음 문제도 아마 시뮬레이션을 풀텐데.. 그때는 정말 실수하지 말자.\n\n\n\n풀고나서 코드량을 보니 이것저것 지저분한 것들도 있는 것 같고... 후에 한번 더 생각나면 깔끔하게 정리하는 법도 생각해보는게 좋을 것 같다. 문제를 풀고 찾아보니 주사위를 클래스로 만들어 생각하는 것도 나쁘지 않았을 것 같은데.. 나는 그냥 배열로 넣고 주석으로 값이 어떻게 변하는지 쓰면서 규칙을 찾아냈다. 심지어 이동하는 것도 한번씩만 훑고 마는 부분인데.. 큐로 만들어서 구현할 필요도 없었다. \n\n## 코드\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.StringTokenizer;\n\n/*\n * 지도의 좌표는 (r, c)로 나타내며, r는 북쪽으로부터 떨어진 칸의 개수, c는 서쪽으로부터 떨어진 칸의 개수\n * 주사위는 지도 위에 윗 면이 1이고, 동쪽을 바라보는 방향이 3인 상태로 놓여져 있으며, 놓여져 있는 곳의 좌표는 \n * (x, y) 이다. 가장 처음에 주사위에는 모든 면에 0이 적혀져 있다.\n * \t\t\t     { 뒤  왼   위   오   앞   밑}\n * 시작     => 밑면 6 { 2, 4, 1, 3, 5, 6}\n * 1(동) => 밑면 3 { 2, 6, 4, 1, 5, 3} (1 -> 2) (2 -> 3) (3 -> 5) (5 -> 1)\n * 2(서) => 밑면 4 { 2, 1, 3, 6, 5, 4} (5 -> 3) (3 -> 2) (2 -> 1) (1 -> 5)\n * 3(북) => 밑면 2 { 1, 4, 5, 3, 6, 2} (0 -> 5) (5 -> 4) (5 -> 2) (2 -> 0) \n * 4(남) => 밑면 5 { 0, 0, 0, 0, 0, 0} (4 -> 5) (5 -> 0) (0 -> 2) (2 -> 5)\n * \n * 시작 => 밑면 5\n * 1 => 밑면 3\n * 지도의 각 칸에는 정수가 하나씩 쓰여져 있다. 주사위를 굴렸을 때, 이동한 칸에 쓰여 있는 수가 0이면, \n * 주사위의 바닥면에 쓰여 있는 수가 칸에 복사된다. 0이 아닌 경우에는 칸에 쓰여 있는 수가 주사위의 바닥면으로 복사되며, \n * 칸에 쓰여 있는 수는 0이 된다.\n * \n * 주사위를 놓은 곳의 좌표와 이동시키는 명령이 주어졌을 때, \n * 주사위가 이동했을 때 마다 상단에 쓰여 있는 값을 구하는 프로그램을 작성하시오.\n * \n * 마지막 줄에는 이동하는 명령이 순서대로 주어진다. 동쪽은 1, 서쪽은 2, 북쪽은 3, 남쪽은 4로 주어진다.\n */\npublic class Problem14499 {\n\tstatic int height, width, x, y, K;\n\n\tstatic int[][] map;\n\n\tstatic int[] dice = { 0, 0, 0, 0, 0, 0 };\n\n\tstatic final int[][] DIR = { { 0, 0 }, { 1, 0 }, { -1, 0 }, { 0, -1 }, { 0, 1 } };\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[] in = br.readLine().split(\" \");\n\t\theight = Integer.parseInt(in[0]);\n\t\twidth = Integer.parseInt(in[1]);\n\n\t\tQueue<Integer> work_q = new LinkedList<Integer>();\n\n      \n\t\ty = Integer.parseInt(in[2]);\n\t\tx = Integer.parseInt(in[3]);\n\t\tK = Integer.parseInt(in[4]);\n\n\t\tmap = new int[height][width];\n\t\tfor (int i = 0; i < height; i++) {\n\t\t\tString[] m_line = br.readLine().split(\" \");\n\t\t\tfor (int j = 0; j < m_line.length; j++) {\n\t\t\t\tmap[i][j] = Integer.parseInt(m_line[j]);\n\t\t\t}\n\t\t}\n\n\t\tStringTokenizer stk = new StringTokenizer(br.readLine());\n\t\twhile (stk.hasMoreTokens()) {\n\t\t\twork_q.add(Integer.parseInt(stk.nextToken()));\n\t\t}\n\n\t\twhile (!work_q.isEmpty()) {\n\t\t\tint dir = work_q.poll();\n\t\t\tboolean isIn = inMap(dir);\n\t\t\tif (isIn) {\n\t\t\t\tmove(dir);\n\t\t\t\tgetMap();\n\t\t\t\tSystem.out.println(dice[2]);\n\t\t\t}\n\t\t}\n\t}\n//\t * 시작     => 밑면 6 { 2, 4, 1, 3, 5, 6}\n//\t * 1(동) => 밑면 3 { 2, 6, 4, 1, 5, 3} (1 -> 2) (2 -> 3) (3 -> 5) (5 -> 1)\n//\t * 2(서) => 밑면 4 { 2, 1, 3, 6, 5, 4} (5 -> 3) (3 -> 2) (2 -> 1) (1 -> 5)\n//\t * 3(북) => 밑면 2 { 1, 4, 5, 3, 6, 2} (0 -> 5) (5 -> 4) (4 -> 2) (2 -> 0) \n//\t * 4(남) => 밑면 5 { 0, 0, 0, 0, 0, 0} (4 -> 5) (5 -> 0) (0 -> 2) (2 -> 5)\n\n\tpublic static void move(int dir) {\n\n\t\tint[] temp_dice = new int[6];\n\t\tswitch (dir) {\n\t\tcase 1:\n\t\t\ttemp_dice[0] = dice[0];\n\t\t\ttemp_dice[1] = dice[5];\n\t\t\ttemp_dice[2] = dice[1];\n\t\t\ttemp_dice[3] = dice[2];\n\t\t\ttemp_dice[4] = dice[4];\n\t\t\ttemp_dice[5] = dice[3];\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\ttemp_dice[0] = dice[0];\n\t\t\ttemp_dice[1] = dice[2];\n\t\t\ttemp_dice[2] = dice[3];\n\t\t\ttemp_dice[3] = dice[5];\n\t\t\ttemp_dice[4] = dice[4];\n\t\t\ttemp_dice[5] = dice[1];\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\ttemp_dice[0] = dice[2];\n\t\t\ttemp_dice[1] = dice[1];\n\t\t\ttemp_dice[2] = dice[4];\n\t\t\ttemp_dice[3] = dice[3];\n\t\t\ttemp_dice[4] = dice[5];\n\t\t\ttemp_dice[5] = dice[0];\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\ttemp_dice[0] = dice[5];\n\t\t\ttemp_dice[1] = dice[1];\n\t\t\ttemp_dice[2] = dice[0];\n\t\t\ttemp_dice[3] = dice[3];\n\t\t\ttemp_dice[4] = dice[2];\n\t\t\ttemp_dice[5] = dice[4];\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\tdice = temp_dice;\n\t}\n\n\tpublic static boolean inMap(int dir) {\n\t\tboolean isIn = true;\n\t\tint x_m = x + DIR[dir][0];\n\t\tint y_m = y + DIR[dir][1];\n\t\tif (x_m >= 0 && x_m < width) {\n\t\t\tx = x_m;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\tif (y_m >= 0 && y_m < height) {\n\t\t\ty = y_m;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\treturn isIn;\n\t}\n\n\tpublic static void getMap() {\n\t\tif (map[y][x] == 0) {\n\t\t\tmap[y][x] = dice[5];\n\t\t} else {\n\t\t\tdice[5] = map[y][x];\n\t\t\tmap[y][x] = 0;\n\t\t}\n\t}\n}\n\n```\n\n\n\n<img src=\"images/algorithm-1-2-c.png\" alt=\"algorithm-1-2-c\" style=\"width:150%;\" />\n\n> 학원에서 풀다가 결국 해결 못하고 집에와서 밥먹고 다시 보자마자.. 틀린부분을 확인하고 고쳐서 제출하였다.\n\n## 기억에 남길 것!\n\n- 문제를 읽으면서 놓치는 부분이 없도록 하자. 테스트 케이스를 통과하고 문제의 답을 확인할 수 있다면 좋겠지만 실전에서는 그럴수 없다. 놓치는 순간 끝인걸 명심하자.\n- 머리로 따라가는게 너무 힘들면 클래스로 만드는 것도 나쁘지 않다.","excerpt":"…","fields":{"slug":"/Algorithm-2/"},"frontmatter":{"date":"Apr 13, 2020","title":"알고리즘 스터디 1주차 문제2 (주사위 굴리기)","tags":["algorithm","simulation"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 문제[#](https://www.acmicpc.net/problem/14503)\n\n<img src=\"images/algorithm-1-1.png\" alt=\"algorithm-1-1\" style=\"width:150%;\" />\n\n## 풀이 및 주저리..\n\n백준에 있는 분류보기로 시뮬레이션을 풀어보려다가 문제를 접하게 되었다. 처음에 정답 비율이 50%인 것을 보고 그냥 달려들었다가 크게 당하고... 엄청나게 시간이 오래걸려서 풀게 되었다. 지금까지 알고리즘을 풀면서 가장 크게 느끼는 것이 내가 문제에 대한 이해가 많이 부족한 상태로 코드를 작성하기 시작하는 것인 것 같다. 이번에도 역시나.. 스스로 문제를 풀때는 이해가 됐다고 생각했지만 마지막에 y가 위로 갈 수록 작아진다는 것을 놓쳐서 정말 한참동안 헤멘 것 같다. 디버깅도 해보고.. 진짜 시험때는 이럴 시간도 없고 해볼수도 없는 과정인데.. 문제를 풀어보고 구글링 해보니 삼성 SW 역량 기출문제였고.. 이정도의 문제가 나올때 내가 IDE 없이 이 문제를 풀 수 있을까 많은 고민을 하게 만든 문제였다. \n\n\n\n풀이는 정말.. 문제에 쓰여져 있는대로만 구현하면 된다. 하지만 그게 너무나도 어려웠다는게 함정. 이런 문제가 참.. 많이 나오는 것 같다. 계속해서 수련하도록 하자!\n\n## 코드\n\n```java\npackage backjoon.algorthim.simulation;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Problem14503 {\n\tstatic final int[] DIR = { 3, 0, 1, 2 };\n\tstatic final int[][] C_DIR = { { 0, -1 }, { -1, 0 }, { 0, 1 }, { 1, 0 } }; // y, x 의 오른쪽\n\tstatic final int[][] R_DIR = { { 1, 0 }, { 0, -1 }, { -1, 0 }, { 0, 1 } }; // y, x 의 반대방향\n\tstatic int x, y, dir;\n\tstatic char[][] map;\n\tstatic int rotation;\n\tstatic boolean isMove = true;\n\tstatic int answer = 0;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[] xy = br.readLine().split(\" \");\n\t\tint map_h = Integer.parseInt(xy[0]);\n\t\tint map_w = Integer.parseInt(xy[1]);\n\n\t\tmap = new char[map_h][map_w];\n\n\t\tString[] roboXY = br.readLine().split(\" \");\n\t\ty = Integer.parseInt(roboXY[0]);\n\t\tx = Integer.parseInt(roboXY[1]);\n\t\tdir = Integer.parseInt(roboXY[2]);\n\n\t\tfor (int i = 0; i < map_h; i++) {\n\t\t\tString input = br.readLine().replace(\" \", \"\");\n\t\t\tmap[i] = input.toCharArray();\n\t\t}\n\n\t\twhile (isMove) {\n\t\t\tcleanArea();\n\t\t\tcheckArea();\n\t\t}\n\t\tSystem.out.println(answer);\n\n\t}\n\n\tpublic static void cleanArea() {\n\t\tif (map[y][x] == '0') {\n\t\t\tmap[y][x] = '2';\n\t\t\tanswer++;\n\t\t}\n\t}\n\n\tpublic static void checkArea() {\n\t\trotation = 0;\n\t\twhile (rotation < 4) {\n\t\t\tif (map[y + C_DIR[dir][0]][x + C_DIR[dir][1]] == '0') {\n\t\t\t\ty += C_DIR[dir][0];\n\t\t\t\tx += C_DIR[dir][1];\n\t\t\t\tdir = DIR[dir];\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tdir = DIR[dir];\n\t\t\t\trotation++;\n\t\t\t}\n\t\t}\n\n\t\tif (map[y + R_DIR[dir][0]][x + R_DIR[dir][1]] == '1') {\n\t\t\tisMove = false;\n\t\t\treturn;\n\t\t} else {\n\t\t\ty += R_DIR[dir][0];\n\t\t\tx += R_DIR[dir][1];\n\t\t\treturn;\n\t\t}\n\n\t}\n}\n```\n\n\n\n<img src=\"images/algorithm-1-1-c.png\" alt=\"algorithm-1-1-c\" style=\"width:150%;\" />\n\n\n\n## 기억에 남길 것!\n\n- String.trim() 은 문자열이 시작되기 전과 후의 공백만 없애준다. 문자열 사이의 공백을 없애주려면 String.replace(\" \", \"\")을 이용하자\n- 복잡해보여도 문제를 좀 더 차분히 읽고 풀 수 있다는 생각으로 접근하자!","excerpt":"문제# 풀이 및 주저리.. 백준에 있는 분류보기로 시뮬레이션을 풀어보려다가 문제를 접하게 되었다. 처음에 정답 비율이 5…","fields":{"slug":"/Algorithm-1/"},"frontmatter":{"date":"Apr 12, 2020","title":"알고리즘 스터디 1주차 문제1 (로봇 청소기)","tags":["algorithm","simulation"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 시작하기에 앞서\n\n코로나가 나라를 뒤덮고 있는 바람에 멀티캠퍼스 수업이 2주간 휴강을 하게 되었다. 그래서 그전에 배우던 Hadoop의 수업이 뒤로 밀리게 되어버렸고.. 갑작스럽게 R을 시작하게 되었다. 선생님도 새로운 분이 오셨는데 개인적으로 전의 선생님도 좋았지만 지금이 최고가 될 것 같은 느낌..? 소마도 지원해보고.. CGV 인턴도 지원하고 살짝 마음이 붕뜨고 있는데 잘 잡아보며 나아갈수 있도록 해야겠다.\n\n\n\n# R\n\n- <h4>R은 통계계산을 위해서 만들어지 프로그래밍 언어이면서 소프트웨어</h4>\n\n> 어떻게 하면 통계적 지식이 별로 없이 데이터 분석을 잘 할 수 있을까? *통계가 아예 필요없는건 아니다.\n\n\n\n### R로 무엇을 할 수 있을까?\n\n- 통계분석 : 기초 통계, 가설검정\n- 머신러닝 \n- 텍스트 마이닝\n- 그외 등등..\n\n> 여기서 적혀있는 것들을 한번 더 찾아서 공부해보자!\n\n\n\n\n\n<h4><i>그렇다면 데이터 분석을 하기 위해서 R이 최선일까??</i></h4>\n-> <b>NO!</b> SAS ,SPSS라는 것들도 있음 하지만 유로툴이고 통계 전문가들이 사용할 때 편의 일반인들이 사용하기 난이도가 너무 높다.\n\nExcel 도 있다. 기본적인 통계기능을 포함한다. \n\n그래서 일반적으로 R을 많이 사용한다. 무료고 유료툴에 버금가는 기능! + 코드 베이스(재연성을 보장한다.)\n\n> 재연성이란? => 코드를 써놓으면 고대로~ 나오는 것. printf(\"Hello Wolrd!\") => Hello World! 출력\n\n\n\n<b>이제 R을 시작해보자!</b>\n\n\n\n## 설치\n\n- R 설치\n\n  [CRAN](https://cran.r-project.org/) 여기로 들어가서 다운을 받아보자!\n\n- IDE 인 R Studio 를 설치해보자\n\n  [링크](https://rstudio.com/products/rstudio/download/#download) 들어가서 OS에 맞는걸 선택하자.\n\n\n\n## 설정\n\nR Studio 의 들어가서 Tools- Global Setting 을 해보자.\n\nCode 의 Soft-wrap 체크 , Saving에서 문자를 UTF-8 로 변경\n\n\n\n## R의 기본\n\n- <h4>주석과 변수 선언</h4>\n\n```R\n# R의 주석은 #을 이용한다.\n\n# Ctrl + Shift + C 여러줄 주석\n# 한 라인에 하나의 statement만 존재한다면 ; 생략가능!\n# 작성된 코드를 실행하려면 ctrl + enter\n# case-sensitive(대소문자를 구별합니다.)\n# camel-case notaion 을 사용하자.\n# 변수 선언과 사칙연산\n# weak type 언어라 => 변수 선언시 type을 명시하지 않는다.\n\n\na = 100 #이것도 가능하지만\na <- 300 #R에서는 이게 기본이다.\n200 -> a #이것도 가능..\n```\n\n\n\n- #### 사칙연산과 출력\n\n```R\n\n# data type(자료형) , data structure(자료구조)\n# vector : 1차원, 같은 데이터 타입만 사용할 수 있음.\n# vecotr 중에 원소가 1개만 있는 vector => scalar\n\nmyvar <- 300 #vector 이면서 scalar 지만 scalar 라고 부르자.\nresult = myvar - 200;\n\nresult\n#[1] 100 이라는 값이 나온다.\n# R은 index 가 0이 아니라 1부터 시작한다.\n\n#print라는 함수로는 하나의 값만이 출력가능하다.\nprint(result)\n\n#두개 이상의 값 출력에는 cat을 사용하자! (linux?)\ncat(result,myvar)\n\n#경로안의 파일에 가서 값을 입력하고 싶을때. 기존의 내용에다가 덮어씀..\ncat(\"결과값은 : \", result, myvar, file=\"C:/R_workspace/R_lecture/test.txt\")\n\n#그렇다면 추가하고싶다면? append =TRUE 를 붙여보자. append =T 도 가능.\ncat(\"결과값은 : \", result, myvar, file=\"C:/R_workspace/R_lecture/test.txt\",append=TRUE)\n\n\n# 기본적인 연산자는 다른 언어와 상당히 유사\nvar1 <- 100\nvar2 <- 3\n\nresult <- var1 / var2\n\nresult # 33.33333 (총 7개의 digits로 표현 - default 가 7개 로 정해져있는 것이다.)\noptions(digits = 5) # 옵션 변경또한 가능.\nresult # 33.333\n\n# c와 java 처리 format 을 이용한 출력도 가능\nsprintf(\"%.8f\", result)\n\nresult = var1 %/% var2 # 몫을 구할때 사용\nresult # 33\n\nresult = var1 %% var2 # 나머지를 구할때 사용\nresult # 1\n```\n\n\n\n- #### 비교 연산과 논리연산\n\n```R\n#비교 연산 => 다른 언어와 같습니다\nvar1 = 100\nvar2 = 200\n\nvar1 == var2\nvar1 != var2\n\n# 논리 연산 => 약간의 주의 필요\n\n# &, && => 의미는 같다.\n# |, || => 의미는 같다.\n#하나짜리와 두개짜라는 vector 인지 scalar 인지에 따라서 동작이 달라집니다.\n\n#combine 함수를 이용해서 vector 를 생성 = > c()\nc(TRUE,FALSE) & c(TRUE,FALSE) # &이면 앞에 것 한번 뒤에것 한번 즉 벡터화 연산을 수행한다.\n\n\n#&&를 이용하면 맨 처음에 있는 요소를 가지고 연산\nc(TRUE,FALSE) && c(TRUE,FALSE)\n```\n\n\n\n## R의 데이터 타입\n\n- #### R의 기본적인 데이터 타입\n\n```R\n# R의 데이터 타입\n# 1. numberic(수치형) : 정수와 실수를 구분하지 않음.\n#   100, 100.3 (둘다 실수) 10L(정수)\n# 2. character(문자형) : 하나의 문자, 문자열 둘 다 문자열로 간주되고 '', \"\" 둘다 혼용해서 사용이 가능하다!\n# 3. logical(논리형) : TRUE(T) FALSE(F) \n# 4. complex(복소수형) : 4 - 3i \n\n# 특수데이터 타입\n# 1. NULL : 가르키는 객체가 없다. (java와 유사)\n# 2. NA(Not Available) : 유효하지 않다. 일반적으로 결측치(ex: 센서에서 값을 가져오다가 날아가는경우)를 표현할때 사용(missing value)\n# 3. NAN(Not A Number) : 수치 값이지만 숫자로 표현이 안되는 값\nsqrt(-9) # NaN\n# 4 . Inf(Infinite) : 양의 무한대\n3 / 0 # Inf\n```\n\n\n\n- #### R에서 사용하는 기본적인 함수 2개\n\n```R\n# R에서 제공하는 기본적인 함수 2개\n# mode() 해당 데이터의 타입을 알려줌\nvar1 <- 200\nmode(var1) # \"numeric\"\n\n# is 계열의 함수\nis.numeric(var1) #TRUE\n```\n\n\n\n- #### R에서 데이터 타입의 입력 우선순위\n\n```R\n#데이터 타입 입력 우선순위\n#character > complex > numberic > logical\n\n#기본적으로 사용되는 자료구조가 vector\nmyvar = c(10,20,30,40)\nmyvar\n\nmyvar = c(10,20,30,FALSE)\nmyvar\n\nmyvar = c(10,\"뿡\",30,FALSE)\nmyvar\n\n#as 계열의 함수를 이용한 casting(형변환)\nmyvar = \"100\"\nas.numeric(myvar)\n```\n\n\n\n## R Package\n\n```R\n\n# R package\n\n# R의 package는 처리할 Data + 기능(함수, 알고리즘) \n# R의 package 시스템은\n# 1. base System (기본적으로 R설치시 따라오는것)\n#   - base package (리얼 기본)\n#   - recommended package (자주 사용하는 애들)\n# 2. other package(그 외의 모든것.) 로 구성된다.\n\n# 간단하게 package를 하나 설치해 보아요!\ninstall.packages(\"ggplot2\")\n\n# package 삭제하려면\n# remove.packages(\"ggplot2\")\n\n# 어디에 설치 되었는지 확인해 보자\n.libPaths()\n\n# 경로를 바꾸려면?\n.libPaths(\"C:/myLib\")\n\n#이렇게 package를 설치한 후 사용을 하기이해서는\n# 메모리에 loading 을 해야해요!\nlibrary(ggplot2)\nrequire(ggplot2)\n\nmyvar = c(\"남자\",\"여자\",\"여자\",\"여자\",\"여자\",\"남자\")\n\nqplot(myvar)\n\n# 평균\nhelp(mean)\n# help()를 이용해도 좋으나 RDcoumentation.org 사이트를 이용하는게 더 좋아보인다!\n```\n\n\n\n## R의 자료구조\n\n```R\n## 자료구조\n\n## 자료형은 저장된 데이터의 타입을 지칭\n## 자료구조는 데이터가 메모리에 어떤 방식으로 저장되어 있는가\n\n## homogeneous (동질의 = 같은 종류의) 데이터 종류가 같은 애들의 집합\n#   - 1. vector : 1 차원 선형구조, 순서개념이 존재.\n#                 같은 종류의 데이터 타입을 이용\n#   - 2. metrix : 2 차원 구조. 인덱스를 사용할 수 있음.\n#                 같은 종류의 데이터 타입을 이용.\n#   - 3. array  : 3 차원 이상의 구조. 인덱스를 사용할 수 있음.\n#                 같은 종류의 데이터 타입을 이용.\n\n\n## heterogeneous(다른 종류의) 데이터 종류가 다른 집합\n#   - 1. list   : 1 차원 선형구조, 순서개념이 존재.\n#                 실제 저장되는 구조는 map구조\n#   - 2. data frame : 2차원 테이블 구조 \n```\n\n\n\n## Vector\n\n```R\n\n# vector : 1차원 선형자료구조. 순서의 개념이 있다. \n#          index를 이용하여 vector 를 사용 할 수 있다.\n#          index의 시작은 1.\n#          []를 이용하여 각 요소를 access 할 수 있다.\n#          요소가 1개짜리 vector => scalar\nmyvar = c(100)\n\n# vector 를 만드는 방법\n# 1. combine() 함수를 이용하기 => c()\n#    vector를 만드는 가장 대표적인 방법이다.\n#    2개 이상의 vector 를 하나의 vector로 만들때도 사용할 수 있다!\nmyVar1 = c(10,20,30)\nmyVar2 = c(3.14,10,100) \n\nmyVar1\nmyVar2 #3.14 10.00 100.00 형태를 같게 만들어준다\n\nresult <- c(myVar1,myVar2) #합치기!\n\n# 2. \":\" 을 이용해서 만들수 있다!\n#     수치형 데이터에만 사용할 수 있고\n#     단조증가,단조감소 형태의 vector를 생성\nmyVar = 1:10\nmyVar # 1 2 3 4 5 6 7 8 9 10\nmyVar = 8.7 : 2\nmyVar # 8.7 7.7 6.7 5.7 4.7 3.7 2.7\n\n# 3. 2번의 일반형\nmyVar = seq(1,10,2)\nmyVar # 1 3 5 7 9\n\nmyVar = seq(from = 10, to = 3, by = -3); #가능하면 이렇게 사용\nmyVar # 10 7 4\n\n# 4. 반복적인 값을 이용해서 vector 생성\n#     rep()\nmyVar = rep(1:3, times =3)\nmyVar # 1 2 3 1 2 3 1 2 3\n\nmyVar = rep(1:3, each=3)\nmyVar # 1 1 1 2 2 2 3 3 3\n\n# 많이 사용하는 함수중 하나가 vector안의 요소 개수를\n# 알아 내는 함수\nlength(myVar)\n\n# vector 요소의 사용(indexing 방식)\nmyVar = c(3.14, 100, \"Hello\", TRUE, 300)\nmyVar\n\n# *****\nmyVar[1] # 첫번째 요소\nmyVar[length(myVar)] # 마지막 요소를 access\n\nresult = myVar[2:4] # 2~4 번째 요소를 가져오자\n                    # slicing\nresult # \"100\" \"Hello\" \"TRUE\"\n\nresult =  myVar[c(2,3,5)] # 2,3,5 번째 요소를 가져오자\n                          # fancy indexing\nresult # \"100\" \"Hello\" \"300\"\n\nmyVar[-1] # 1번빼고 나머지!\nmyVar[-(3:4)] # 3 ~ 4 번째 빼고 나머지\nmyVar[-c(1,4,5)] # 1,4,5 번째 뺴고 나머지!\n\n### Vector 데이터에 이름을 붙여보자\nmyVar = c(10,20,30,40,50)\n\nnames(myVar) # NULL 이름을 아직 정해주지 않았다.\n\nnames(myVar) = c(\"a\",\"b\",\"c\",\"d\",\"e\")\n\nnames(myVar) # \"a\" \"b\" \"c\" \"d\" \"e\"\n\nmyVar \n# a  b  c  d  e \n# 10 20 30 40 50 \nmyVar[1] # a 10\nmyVar[\"a\"] # a 10\n\n###################################\n\n# vector : 연산\n\nmyVar1 = 1:3 # 1 2 3\nmyVar2 = 4:6 # 4 5 6\n\nresult = myVar1 + myVar2\nresult # 5 7 9\n\nmyVar3 = 1:6 # 1 2 3 4 5 6\n\nresult = myVar1 + myVar3 #(rectcle rule)\n      #1 2 3 1 2 3  1 2 3 4 5 6\nresult#2 4 6 5 7 9\n\n# vector에 대한 집합연산(합집합, 교집합, 차집합)\nvar1 = 1:5 # 1 2 3 4 5\nvar2 = 3:7 # 3 4 5 6 7\n\nunion(var1,var2) # 합집합: 1 2 3 4 5 6 7 \nintersect(var1,var2) # 교집합: 3 4 5\nsetdiff(var1,var2) # 차집합: 1 2 \n```\n\n","excerpt":"시작하기에 앞서 코로나가 나라를 뒤덮고 있는 바람에 멀티캠퍼스 수업이 2주간 휴강을 하게 되었다. 그래서 그전에 배우던 Hadoop의 수업이 뒤로 밀리게 되어버렸고.. 갑작스럽게 R…","fields":{"slug":"/R-01/"},"frontmatter":{"date":"Mar 09, 2020","title":"R 정리 -01","tags":["R","TIL"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n\n## hadoop 환경설정\n\n1> vm / 리눅스 설치\n\n-yum 업데이트 방지 설정\n\n![ifcfg-eno16777736](images/ifcfg-eno16777736.PNG)\n\n- CentOS-Baserepo 설정\n\n![CentOS-Base.repo](images/CentOS-Base.repo.PNG)\n\n- CentOS-Sources.repo 설정\n\n![CentOS-Sources.repo](images/CentOS-Sources.repo.PNG)\n\n> 프로그램의 소프트웨어에서 자동업그레이드 켜져있는 것들을 다 꺼주면 된다. + 소프트웨어 공급원에서 확인도 안함으로 변경하기!\n\n2> selinux 방지설정\n\n![selinx-disabled](images/selinx-disabled.PNG)\n\n3> 방화벽 해제(root)\n\nsystemctl status firewalld 확인후 해제\n\n![firewall_disabled](images/firewall_disabled.PNG)\n\n\n\nrpm -qa | grep jdk 를 하면 자바가 잡힘\n\nyum remove java 를 하면 삭제\n\n후에 다시 쳐보면 잡히는게 없다 그후에 새로운 jdk 를 설치하자.\n\n> jdk 설치는 스킵! 압축을 풀고 환경변수를 설정하자!\n\n\n\n4> hadoop 설치\n\n/root/다운로드/*\n\n/home/사용자명디렉토리/다운로드/hadoop\n\n\n\n*우리는 완전분산 모드로 하둡을 구성한다*\n\n\n\n---\n\n\n\n가상머신 세개를 더 만들어주면서 network 에서 새로운 키값을 생성한다음 넣어주자.\n\nslave 1\n\n00:50:56:3F:87:A4\n\nslave2\n\n00:50:56:2E:92:37\n\nslave3\n\n00:50:56:20:EE:19\n\n\n\n\n\ngedit /etc/sysconfig/network-scripts/ifcfg-eno~~~ -> 여기서 아이피설정\n\nhostnamectl set-hostname [호스트네임]\n\nsystemctl restart network 로 네트워크 다시 설정하고 조금의 시간 이후 다시 변경됐는지 ifconfig 로 확인해보자.\n\n![master_host](images/master_host.PNG)\n\n\n\n그후 셋다 systemctl restart network 후에 master에서 ping 으로 확인해보자\n\n![network_ping](images/network_ping.PNG)\n\n\n\n\n\n후에 다른 slave로 접속할때 을 할때 비밀번호 입력을 피하기 위해서 암호키를 생성하고 복사해준다.\n\n- 암호키생성(참고로 root 계정이 아닌 사용자계정인 hadoop 에서 작업한다.)\n\n![하둡 암호키 생성](images/hadoop_password_make.PNG)\n\n- 암호키 복사\n\n![하둡키 공유](images/hadoop_key_share.PNG)\n\n\n\n그다음 master 계정에서 몇가지 파일을 수정해야한다. \n\n![마스터에서 hadoop-1.21.설정](images/hadoop-1.21.PNG)\n\n요 빨간 네모들을 하나씩 수정해보자\n\n- hadoop-env.sh\n\n![hadoop-env.sh 설정](images/hadoop-env.sh.PNG)\n\n> export 쪽이 주석되어있을텐데 바꿔줘야한다.\n\n\n\n- masters\n\n들어가보면 localhost 일텐데 그걸 마스터 다음의 슬레이브중에 하나로 설정을한다 ex)slave1 으로\n\n- slaves\n\n![slaves 설정](images/slaves.PNG)\n\n> localhost 라고 되어있을텐데 slave가 될 아이들을 넣어준다.\n\n\n\n- 마스터에서 xml 세개를 설정해준다.\n\n```xml\ngedit hadoop-1.2.1/conf/core-site.xml\n\n<configuration>\n  \t  <property>\n    \t    <name>fs.default.name</name>\n            <value>hdfs://master:9000</value>\n          </property>\n          <property>\n            <name>hadoop.tmp.dir</name>\n            <value>/home/hadoop/hadoop-data/</value>\n          </property>\n</configuration>\n\n\n\ngedit hadoop-1.2.1/conf/hdfs-site.xml\n\n<configuration>\n  \t  <property>\n    \t    <name>dfs.replication</name>\n     \t    <value>3</value>\n  \t  </property>\n  \t  <property>\n    \t    <name>dfs.http.address</name>\n    \t    <value>master:50070</value>\n  \t  </property>\n  \t  <property>\n    \t    <name>dfs.secondary.http.address</name>\n    \t    <value>slave1:50090</value>\n  \t  </property>\n</configuration>\n\n\n\n\ngedit hadoop-1.2.1/conf/mapred-site.xml\n \t<configuration>\n  \t  <property>\n   \t    <name>mapred.job.tracker</name>\n   \t    <value>master:9001</value>\n  \t  </property>\n</configuration>\n```\n\n\n\nscp hadoop-env.sh hadoop@slave1:/home/hadoop/hadoo-1.2.1/conf\n\n-> slave1에 hadoop-env.sh 파일을 보내준다. 뒤의 경로에\n\n나머지 두개도 똑같이 진행한다.\n\n\n\nscp *-site.xml hadoop@slave1:/home/hadoop-1.2.1/conf\n\n로 변경한 xml 세개를 다 보내준후 source /home/hadoop/.bash_profile 로 변경사항을 적용한다\n\n\n\n그후 hadoop namenode -format 이라는 명령어로 하둡을 포맷시켜 실행준비\n\nstart-all.sh 를 실행하여 하둡을 실행한다.\n\n그다음 jps 로 연결이 되어있는지 각각 슬레이브들과 마스터에서 확인.\n\n\n\n이렇게 하둡 설정이 완료된다.. 힘들어..","excerpt":"hadoop 환경설정 1> vm / 리눅스 설치 -yum 업데이트 방지 설정  CentOS-Baserepo 설정  CentOS-Sources.repo…","fields":{"slug":"/hadoop-post-01/"},"frontmatter":{"date":"Feb 24, 2020","title":"Hadoop 정리 -01","tags":["hadoop","linux"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n\n\n\n# Mybatis\n\n\n\n## jdbc 에서 Mybatis로\n\n- 기존의 jdbc 구조\n\n  try{ \n\n1. Class.forName(\"...\")\n\n2. Connection c = DriverManaget.getConnection(jdbc,url,id,pw);\n\n3. sql - 결과\n\n4. c.close }\n\n5. catch (Exception e) {\n\n6. e.print\n\n   }\n\n\n\n단점 : 코드 반복 많다. sql + 자바 언어가 섞인다. db 연결 복잡한 정보가 매번 작성되어야한다.\n\n해결법 : 1~2 는 한번만 가져다 쓰기 4 는 Mybatis 에게 맡기기 // sql만 빼도록해보자\n\n=> db-config.xml 파일에 연결에 관한 작성.\n\n=>sql-mapping.xml 파일에 sql 언어를 작성,\n\n\n\n위에 과정을 거치면\n\n1. xml 설정 읽어라\n2. db 연결 객체 가져옴\n3. sql 정보도 가져와서 실행 요청 - 결과\n4. 출력\n\n\n\n\n\n\n\n## rownum\n\n- rownum 함수 : 조회 레코드 번호\n- \\> \\>= (단, 1 제외) 이유는 데이터를 본다음 rownum 이 매겨지기 때문.\n- employees 테이블에서 11~20번째 데이터 조회\n\n```sql\nselect r, first_name, hire_date\nfrom (select rownum r, first_name, hire_date from employees) where r >= 11 and r <=20;\n-- 안된다 생각해봐\n\n3. select r, first_name, hire_date\nfrom (2. select rownum r, first_name, hire_date from (1. select * from employees order by hire_date desc)) where r >= 11 and r <=20\n-- 1. 먼저 정렬을 하고 2. 그다음 생성 3. 그다음 조건을 거쳐서 보기\n```\n\n","excerpt":"Mybatis jdbc 에서 Mybatis로 기존의 jdbc 구조 try{  Class.forName(\"...\") Connection c = DriverManaget.getConnection(jdbc,url,id,pw); sql - 결과 c.close…","fields":{"slug":"/mybatis-post-01/"},"frontmatter":{"date":"Feb 15, 2020","title":"Mybatis 정리 -01","tags":["Mybatis","spring"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 시작하기에 앞서\n\n4일차 스프링 정리\n\n\n\n\n\n## Spring Post 사용시 한글 깨짐 해결\n\n- web.xml 에 이런 코드를 작성한다.\n\n```xml\n\t<filter>\n\t\t<filter-name>EncodingFilter</filter-name>\n\t\t<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n\t\t<init-param>\n\t\t\t<param-name>encoding</param-name>\n\t\t\t<param-value>UTF-8</param-value>\n\t\t</init-param>\n\t</filter>\n\n\t<filter-mapping>\n\t\t<filter-name>EncodingFilter</filter-name>\n\t\t<url-pattern>/*</url-pattern>\n\t</filter-mapping>\n\n```\n\n> 왜 깨지는걸까?? 한번 생각해보자\n\n\n\n## 컨트롤러 메소드 리턴타입\n\n- `ModelAndView` : 모델 + 뷰 가 둘다 필요할때 (명시하면 그대로, 아니면 자동)\n- `String` : 뷰(수동) (return \"뷰이름\")\n- `void` : 뷰(url 자동)\n- `Map` : 모델 + 뷰(url 자동)\n\n> 어떤 경우에도 뷰가 없을 수는 없다. 이유를 생각해보자.\n\n\n\n## 컨트롤러 메소드 매개변수\n\n- `HttpServletRequest` : 무언가 전달받아 그것을 Servlet 페이지로 전달할때 사용\n\n```java\n@RequestMapping(name = \"/login\", method = RequestMethod.POST)\npublic ModelAndView loginSuccess(HttpServletRequest request) {\n    String id = request.getParameter(\"id\");\n    String pw = request.getParameter(\"pw\");\n    ModelAndView mv = new ModelAndView();\n    if (id.equalsIgnoreCase(\"spring\") && pw.equals(\"spring\")) {\n        mv.addObject(\"loginresult\", true);\n    } else {\n        mv.addObject(\"loginresult\", false);\n    }\n    mv.setViewName(\"loginsuccess\");\n    return mv;\n}\n```\n\n\n\n- `String, int, double, boolean` : form 에서 input 으로 전달되는 파라미터의 name이 같은 이름일 때 사용가능.\n\n```java\n@RequestMapping(name = \"/login\", method = RequestMethod.POST)\npublic ModelAndView loginSuccess(String id, String pw) {\n    //form input name = \"id\" : 요청파라미터이름이 id인 것으로 전송한다.\n    //요청 파라미터이름과 컨트롤러 메소드 매개변수 이름이 동일하면 자동으로 저장된다.\n    //form 입력 name 값 = 매개변수이름 동일 = db 컬럼명과 동일 하게 만들어서 저장하면 매우 단순해지고 좋음.\n    ModelAndView mv = new ModelAndView();\n    if (id.equalsIgnoreCase(\"spring\") && pw.equals(\"spring\")) {\n        mv.addObject(\"loginresult\", true);\n    } else {\n        mv.addObject(\"loginresult\", false);\n    }\n    mv.setViewName(\"loginsuccess\");\n    return mv;\n}\n\n@RequestMapping(name = \"/login\", method = RequestMethod.POST)\npublic ModelAndView loginSuccess(@RequestParam(\"id\") String id2, String pw) { // @RequestParam(\"id\")라고 써있는 부분 = > id2 에 자동 저장되게 해줌.\n    위와 동일...\n}\n\n@RequestMapping(name = \"/login\", method = RequestMethod.POST)\npublic ModelAndView loginSuccess(@RequestParam(value = \"id\", required = false, defaultValue = \"spring\") String id2,String pw, int age) \n//jsp 에서 age에 입력하는 값이 반드시 int 로 변형가능한 값이면 자동으로 연결해 준다.\n}\n```\n\n- `Object(객체)`\n\n```java\n@RequestMapping(name = \"/login\", method = RequestMethod.POST)\npublic ModelAndView loginSuccess(LoginVO vo) {\n// 요청 파라미터이름과 컨트롤러 메소드 매개변수가 객체일 떄 객체 내부 멤버 변수가 이름이 동일하면 자동 저장.\n\n    //컨트롤러 메소드 매개변수 객체일 때 자동 모델로 사용가능하다\n    // 모델 이름은 클래스 이름으로 자동 결정이 된다: 앞글자 소문자로 만들고 사용 가능 \n    // 즉 mv.addObject(\"loginVO\",vo);  라고 써준것과 같은 효과가 적용됨.\n    //ex)loginVO\n    ModelAndView mv = new ModelAndView();\n    if (vo.getId().equalsIgnoreCase(\"spring\") && vo.getPw().equals(\"spring\")) {\n        mv.addObject(\"loginresult\", true);\n    } else {\n        mv.addObject(\"loginresult\", false);\n    }\n    mv.setViewName(\"loginsuccess\");\n    return mv;\n}\n\n@RequestMapping(name = \"/login\", method = RequestMethod.POST)\npublic ModelAndView loginSuccess(@ModelAttribute(\"login\")LoginVO vo) {\n    //이번에는 vo 객체를 \"login\"이란 이름으로 보낸닷!\n   ...\n}\n\n```\n\n\n\n- LoginVO.java\n\n```java\npackage edu.multi.mvc;\n\npublic class LoginVO {\n\t// ID PW AGE 요청 파라미터 입력 저장 변수들\n\tString id;\n\tString pw;\n\tint age;\n\n\tpublic String getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(String id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic String getPw() {\n\t\treturn pw;\n\t}\n\n\tpublic void setPw(String pw) {\n\t\tthis.pw = pw;\n\t}\n\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n}\n```\n\n\n\n- loginform.jsp\n\n```html\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n\tpageEncoding=\"UTF-8\"%>\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\t<h1>loginform.jsp 파일이 보입니다.</h1>\n\t<form action=\"http://localhost:8080/mvc/login\" method=\"post\">\n\t\tID: <input type=\"text\" name=\"id\"> <br> \n\t\tPW : <input type=\"password\" name=\"pw\"> <br> \n\t\t나이: <input type=\"text\" name=\"age\"> <br> \n\t\t<input type=\"submit\" value=\"로그인\">\n\t</form>\n</body>\n</html>\n```\n\n\n\n### 컨트롤러 매핑된 메소드 매개 변수\n\n- `@RequestParam(value = \"\", required = , defaultValue= \" \")`\n\n- `@ModelAttribute(\"\") LoginVO vo 또는 객체`\n\n\n\n$(\"jquery\")\n\n${jspl}\n\n\n\n초창기 ajax\n\nasynchronous javascript and xml(초창기는 xml을 써서 xml로 주고받았지만 후에 태그가 너무 많다보니 json으로 많이쓴당)\n\njson = javascript object notaion\n\njavascript 의 객체는 var obj = {name:\"홍길동\", age:21}\n\n\n\nAJAX\n\n1. 요청1- 서버처리 -....\n2. 클라이언트 동시 브라우저 화면 구성\n3. \n\n현재화면의 전체는 그대로 부분만 바꿔보자!\n\n\n\n- ajax클라이언트\n\n$.ajax(\n\n{\n\nurl : '/test'\n\ndata : {\"id\" : \"spring\" }\n\ntype : 'get'\n\ndataType : 'json'\n\nsuccess : function(server){\n\n​\t\t\tserver = \"{\\\\\"status\\\\\" : true}\"; //이미 저장되어 있음.\n\n​\t\t\t$(\"div\").html(server.status);\n\n​\t\t\tserver.status\n\n​\t\t}\n\n​\t}\n\n);\n\n\n\n- ajax서버\n\n@Controller\n\nclass A{\n\n@RequestMapping(\"/test\")\n\n@ResponseBody\n\na(String id){\n\n//처리\n\n//결과 응답\n\nreturn \"{\\\\\"status\\\\\" : true}\";\n\n}\n\n}","excerpt":"시작하기에 앞서 4일차 스프링 정리 Spring Post 사용시 한글 깨짐 해결 web.xml…","fields":{"slug":"/spring-post-03/"},"frontmatter":{"date":"Feb 06, 2020","title":"Spring 정리 -03","tags":["Spring","java"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 시작하기에 앞서\n\n2일차 스프링과 3일차 스프링 정리\n\n\n\n## AOP(ASPECT ORIENTED PROGRAMMING)\n\n- aspect : 모든 스프링 클래스 공통 구현 사항들\n- 공통관심코드=횡단관심코드=핵심관심코드 구현 공통 필요 반복 구현 사항들\n\n![Proxy](images/Proxy-1580775374061.png)\n\n![Spring_aop](images/Spring_aop-1580775374061.png)\n\n### 사용 하는 방법\n\n1. 스프링 프로젝트 기본 jar 라이브러리 파일들 다운로드\n2. aop 관련 라이브러리 추가 [다운로드](https://mvnrepository.com/) \n3. aspect 클래스 정의 (공통관심)\n4. target 클래스 정의 (핵심관심)\n5. pointcut 문법 (공통(메소드:a) \n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd\">\n\t\n\t<bean id=\"member\" class=\"aop1.Member\" />\n\t<bean id=\"board\" class=\"aop1.Board\" />\n\t<bean id=\"common\" class=\"aop1.Common\" />\n\t\n\t<aop:config>\n\t\t<aop:pointcut expression=\"execution (public * aop1.*.*(..))\" id=\"pc\"/>\n\t\t<!-- modifier 리턴타입 패키지명.클래스명.메소드(매개변수개수) \n\t\t<aop:pointcut expression=\"execution (public *[리턴타입] aop1[패키지명].*[클래스].*[메소드](..)[매개변수])\" id=\"pc\"/>\n\t\t* : 모든\n\t\t(..) : 모든 매개변수\n\t\t.. : 하위패키지 포함\n\t\t-->\n\t\t<aop:aspect id=\"aspect1\" ref=\"common\">\n<!-- \t\t\t<aop:before method=\"a\" pointcut-ref=\"pc\"/>\n\t\t\t<aop:after method=\"b\" pointcut-ref=\"pc\"/> -->\n\t\t\t<aop:around method=\"c\" pointcut-ref=\"pc\"/>\n\t\t</aop:aspect>\n\t</aop:config>\n</beans>\n\n```\n\n\n\n- Annotaion 을 활용한 AOP\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\n\t\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd\">\n\n\t<context:component-scan base-package=\"annotaion.aopexam\"> </context:component-scan>\n\t<aop:aspectj-autoproxy/> <!--Annotaion으로 연결만 잘되어있다면 한방에 해결.. -->\n\n\n</beans>\n\n```\n\n### AOP in Annotaion\n\n- `@Aspect`: 공통 관심 클래스 위에 선언\n\n- `@PointCut`: 메소드 내 부 내용을 구현하지 않고 위에 선언후 경로를 설정.\n\n  ```java\n  @Component\n  @Aspect\n  public class AnimalAspect {\n  \t\n  \t@Pointcut(\"execution (public * annotaion.aopexam.*.*(..))\")\n  \tpublic void eat() { };\n  \t\n  \t@Before(\"eat()\")\n  \tpublic void whatEat() {\n  \t\tSystem.out.println(\"오늘 점심에 뭐 먹었어요?\");\n  \t}\n  \n  \t@AfterReturning(pointcut= \"eat()\", returning = \"returning\")\n  \tpublic void afterEat(Object returning) {\n  \t\ttry {\n  \t\t\tif (returning != null) {\n  \t\t\t\tSystem.out.println(returning + \"먹습니다\");\n  \t\t\t}\n  \t\t} catch (Throwable e) {\n  \t\t\t// TODO Auto-generated catch block\n  \t\t\te.printStackTrace();\n  \t\t}\n  \t}\n  }\n  ```\n\n\n\n\n\n# FrontControlller 패턴 + MVC 패턴\n\n1. FrontControllerServlet 호출 (모든 url 을 받아옴)\n\n```java\npublic class FrontControllerServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// 1. 모든요청은 FrontController 로 들어옴.\n\t\t// 2. uri 가장 뒤 요소 분석 http.../hello\n\t\tresponse.setContentType(\"text/html;charset=UTF-8\");\n\t\tPrintWriter out = response.getWriter();\n\t\tout.println(\"<h1> FrontControllerServlet </h1>\");\n\t\tout.println(request.getRequestURL());\n\t\tout.println(request.getRequestURI());\n\n\t\tString s[] = request.getRequestURI().split(\"/\");\n\t\t// 3. hello - 일시키자 --MVC --> SPRING 의 내부환경을 이해해 보자!\n\t\tHandlerMapping mapping = new HandlerMapping();\n\t\tController controller = mapping.getController(s[s.length - 1]);\n\t\tString viewName = controller.handleRequest(request, response);\n\n\t\tRequestDispatcher rd = request.getRequestDispatcher(viewName);\n\t\trd.forward(request, response);\n\t}\n}\n```\n\n2. HelloController 호출\n\n- xxxController : handleRequest 를 갖는다는 약속(인터페이스로 구성)\n\n```java\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic interface Controller {\n\tpublic String handleRequest(HttpServletRequest request, HttpServletResponse response);\n}\n\npublic class HelloController implements Controller {\n\tpublic String handleRequest(HttpServletRequest request, HttpServletResponse response) {\n\t\tSystem.out.println(\"HelloController 실행중입니다.\");\n\t\t//servlet ---> jsp 데이터 전달 = 공유\n\t\trequest.setAttribute(\"model\", \"Hello Spring\");\n\t\treturn \"/Hello.jsp\";\n\t\t//request.getAttribute(\"model\");\n\t\t//${model}\n\t}\n}\n\npublic class HandlerMapping {\n\tHashMap<String, Controller> mappings;\n\n\tpublic HandlerMapping() {\n\t\tmappings = new HashMap<String, Controller>();\n\t\tmappings.put(\"hello\", new HelloController());\n\t}\n\t\n\tpublic Controller getController(String name) {\n\t\treturn mappings.get(name);\n\t}\n}\n```\n\n3. \"hello spring\" 문자열값 생성(model)\n\n4.  hello.jsp 가 출력(view)\n\n   ---> hello.jsp\n\n```html\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>스프링 mvc 테스트</title>\n</head>\n<body>\n<h1>컨트롤러 에서 전달 받은 값 : ${model}</h1>\n<h1>컨트롤러 에서 전달 받은 값 : <%=request.getAttribute(\"model\") %></h1>\n</body>\n</html>\n```\n\n\n\n- spring bean configutartion file => di, aop\n\n- spring mvc configuration file => di, aop , mvc (ex: servlet-context.xml)\n\n- web server configuration file => spring mvc , servlet.jsp(web.xml)\n\n> model - 용어 /개념 -view 보여줄 데이터(생성+결과)\n\n\n\n##  spring mvc xml 태그설정 &  annotaion 설정\n\n들어가기 앞서서 일단 Spring MVC가 어떻게 동작하는지 보고가자.\n\n![Spring_MVC](images/Spring_MVC.png)\n\n\n\n**Spring MVC**내에서 처리되는 하나의 요청에 대한 Life Cycle과정은 위 그림과 같다.\n\n클라이언트의 요청에 대한 최초 진입 지점은 DispatcherServlet이 담당하게 된다. 대부분의 MVC를 지원하는 프레임워크가 메인 Servlet을 가지는 것처럼 Spring MVC 또한 메인 Servlet이 최초 진입지점으로 다음의 작업을 처리하게 된다. \n\n**DispatcherServlet**은 Spring Bean Definition에 설정되어 있는 Handler Mapping 정보를 참조하여 해당 요청을 처리하기 위한 Controller를 찾는다.\n\n**DispatcherServlet**은 선택된 Controller를 호출하여 클라이언트가 요청한 작업을 처리한다.** \n\n**Controller**는 Business Layer와의 통신을 통하여 원하는 작업을 처리한 다음 요청에 대한 성공유무에 따라 ModelAndView 인스턴스를 반환한다. ModelAndView 클래스에는 UI Layer에서 사용할 Model데이터와 UI Layer로 사용할 View에 대한 정보가 포함되어 있다.\n\n**DispatcherServlet**은 ModelAndView의 View의 이름이 논리적인 View 정보이면 ViewResolver를 참조하여 이 논리적인 View 정보를 실질적으로 처리해야할 View를 생성하게 된다.\n\n**DispatcherServlet**은 ViewResolver를 통하여 전달된 View에게 ModelAndView를 전달하여 마지막으로 클라이언트에게 원하는 UI를 제공할 수 있도록 한다. 마지막으로 클라이언트에게 UI를 제공할 책임은 View 클래스가 담당하게 된다.\n\n\n\n코드로 한번 확인해보자. web-xml 밑부분을 보자.\n\n```xml\n\t<servlet>\n\t\t<servlet-name>appServlet</servlet-name>\n\t\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n\t\t<init-param>\n\t\t\t<param-name>contextConfigLocation</param-name>\n\t\t\t<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>\n\t\t</init-param>\n\t\t<load-on-startup>1</load-on-startup>\n\t</servlet>\n\n\t<servlet-mapping>\n\t\t<servlet-name>appServlet</servlet-name>\n\t\t<url-pattern>/</url-pattern>\n\t</servlet-mapping>\n```\n\n> 이 부분에서 DispatcherServlet 쪽으로 연결이되어서 Controller쪽에 연결을 해준다고 생각하면된다.\n\n그후 src\\main\\webapp\\WEB-INF\\spring\\appServlet안에 있는 servlet-context.xml 을 보자\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans:beans\n\txmlns=\"http://www.springframework.org/schema/mvc\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:beans=\"http://www.springframework.org/schema/beans\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd\n\t\thttp://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\">\n\n\t<!-- DispatcherServlet Context: defines this servlet's request-processing \n\t\tinfrastructure -->\n\n\t<!-- Enables the Spring MVC @Controller programming model -->\n\t<annotation-driven />\n\t<!-- @Componet @Service @Repository @Autowired -->\n\t<context:component-scan base-package=\"edu.multi.mvc\" />\n\n\t<!-- Handles HTTP GET requests for /resources/** by efficiently serving \n\t\tup static resources in the ${webappRoot}/resources directory -->\n\t<resources mapping=\"/resources/**\" location=\"/resources/\" />\n\n\t<!-- Resolves views selected for rendering by @Controllers to .jsp resources \n\t\tin the /WEB-INF/views directory -->\n\t<beans:bean\n\t\tclass=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n\t\t<beans:property name=\"prefix\" value=\"/WEB-INF/views/\" />\n\t\t<beans:property name=\"suffix\" value=\".jsp\" />\n\t</beans:bean>\n\n<!-- \t1.xml 태그 spring mvc 설정\n\t<beans:bean id=\"hc\" class=\"test.HelloController\" />\n\t<beans:bean id=\"board\" class=\"test.BoardController\" />\n\n\t<beans:bean id=\"urlMapping\"\n\t\tclass=\"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping\">\n\t\t<beans:property name=\"mappings\">\n\t\t\t<beans:props>\n\t\t\t\t<beans:prop key=\"/hello\">hc</beans:prop>\n\t\t\t\t<beans:prop key=\"/board\">board</beans:prop>\n\t\t\t</beans:props>\n\t\t</beans:property>\n\t</beans:bean> -->\n    \n</beans:beans>\n\n```\n\n꽤 많은 설정들이 있는데 주석들을 읽으면 어떠한 역활을 하는지 알 수 있다. 마지막 주석 문단은 이제 위에서 사용했던 코드들을 Spring식으로 변환하기 위한 설정들.\n\n실습에서는 DAO 클래스와 VO 클래스들을 만들고 jdbc로 연결을 통해 작업을 해보았는데 그것은 제외히고 HelloController만 보면\n\n```java\npublic class HelloController implements Controller {\n\n\t@Override\n\tpublic ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) {\n\t\tSystem.out.println(\"HelloController 실행중입니다.\");\n\t\t\n\t\tModelAndView mv = new ModelAndView();\n\t\t//servlet ---> jsp 데이터 전달 = 공유 == Model\n\t\tmv.addObject(\"model\",\"Hello Spring\"); // request.setAttribute()\n\t\tmv.setViewName(\"hello\"); //view 세팅\n\t\treturn mv;\n\t}\n}\n```\n\n이렇게 위에서 써있는대로 `ModelAndView` 객체를 만들고 그것을 전달하여 view를 생성한다.\n\n그걸로 생성해낸 hello.jsp 코드다.\n\n```html\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>스프링 mvc 테스트</title>\n</head>\n<body>\n<h1>컨트롤러 에서 전달 받은 값 : ${model}</h1>\n<h1>컨트롤러 에서 전달 받은 값 : <%=request.getAttribute(\"model\") %></h1>\n</body>\n</html>\n```\n\n\n\n이걸이제 Annotaion 형식으로 한번 바꿔보자!\n\n먼저 MVC형식의 Annotaion 을 사용하기 위해서는 servlet-context.xml 파일에서 추가가 필요하다.\n\n(사실 이미 위에도 추가되어있다. 주석으로 써진 이유가 이미 내 코드가 Annotaion 이기 때문..)\n\n```xml\n\t<!-- Enables the Spring MVC @Controller programming model -->\n\t<annotation-driven />\n```\n\n요 한줄..이 핵심이다. 잘 생각해보자.\n\n그리고 변경된 HelloController\n\n```java\n@Controller\npublic class HelloController{\n\t\n\t@RequestMapping(\"/hello\") //<beans:prop key = \"/hello\">hc<beans:prop>\n\tpublic ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) {\n\t\tSystem.out.println(\"HelloController 실행중입니다.\");\n\t\t\n\t\tModelAndView mv = new ModelAndView();\n\t\t//servlet ---> jsp 데이터 전달 = 공유 == Model\n\t\tmv.addObject(\"model\",\"Hello Spring(어노테이션)\"); //request.setAttribute()\n\t\tmv.setViewName(\"hello\"); //view 세팅 없으면 annotaion과 같은 이름으로 만들어줌.\n\t\treturn mv;\n\t}\n}\n```\n\nmv.setViewName 같은 경우 후에 다시 설명해준다고 하셨다. Annotaion 설정시 있어도 없어도 된다고는 하는데.. 한번 공부해보자.\n\n\n\n`@Controller` : 클래스 위에 선언\n\n`@RequestMapping(\"/context명\")` : 메소드(또는 클래스)\n\n`@RequestMapping(name=\"/hello\" , method=RequestMethod.GET)`\n\n- GET\n  - http:...login?name1=value1&name2=value2\n  - url 뒤 요청 파라미터 값을 적어 전송 방식 : GET방식이다!\n  - url?변수명1=값1\n  - 특수문자나 한글 인코딩하여 전송\n  - url 공백은 포함하면 안된다.\n  - url 길이 제한\n\n\n\n- POST(기본적으로 GET방식을 가지며)\n  - 전송 파라미터 값이 우리 눈에 보이지 않음.\n  - 전달 길이 무제한\n  - 파일 업로드, 암호 전송\n\n```java\n@Controller\npublic class LoginController {\n\n\t@RequestMapping(name = \"/login\", method = RequestMethod.GET)\n\t// 1. Request매핑 메소드 리턴타입 String\n\t// 뷰이름으로 되는 규칙이 있음. 모델은 필요없고 뷰의 이름만 필요할때는 이렇게 사용하는게 좋다\n\tpublic String loginform() {\n\n\t\t// 로그인폼 출력\n\n\t\treturn \"loginform\";\n\t}\n\n\t@RequestMapping(name = \"/login\", method = RequestMethod.POST)\n\tpublic ModelAndView loginSuccess(HttpServletRequest request) {\n\t\tModelAndView mv = new ModelAndView();\n\t\tmv.addObject(\"loginresult\", true);\n\t\tmv.setViewName(\"loginsuccess\");\n\t\treturn mv;\n\t}\n}\n```\n\n이렇게 같은 url 요청이여도 그것이 어떤 방식으로 가냐에 따라서 다른 jsp 페이지를 요청 할 수도 있다는 것을 기억하자!","excerpt":"시작하기에 앞서 2일차 스프링과 3일차 스프링 정리 AOP(ASPECT ORIENTED PROGRAMMING) aspect…","fields":{"slug":"/spring-post-02/"},"frontmatter":{"date":"Feb 04, 2020","title":"Spring 정리 -02","tags":["Spring","java"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 시작하기에 앞서\n\n수업이 좀 진행되었지만 Spring 을 다시 정리하고자 글을 남긴다. 혼자 보기 용으로 쓴 글이라 매우 난잡..\n\n# Spring\n\n- 스프링의 기본구조 - 코어 위에서 다양한 동작을 독립적으로 사용가능하다 (ex: AOP와 DAO만 사용 등등)\n\n![Spring_basic](images/Spring_basic.png)\n\n스프링 파일 정리\n\n- Maven: 프로젝트 관리 도구(?) (하는일: 구조를 만들어준다.)\n- class -> library(jquery) -> frame work(spring)\n\n\n\nSpring Bean\n\n- Java 에서는 new 라는걸로 객체 생성\n- Spring 에서는 bean으로 생성,\n\n\n\n## 스프링의 특징\n\n1. 여러가지 모듈 단위별\n2. 스프링 이전 개발 자바 객체 그대로 재사용 가능.\n3. POJO 클래스들도 사용 가능.\n4. 다양한 데이터베이스 연결이 가능 Spring ORM or Spring Dao jdbc 등 가능하지만 우리는 mabatis 를 활용한다.\n\n\n\n## DI\n\n- IOC (Inversion of Control) \n\n  ```java\n  class A{\n  \t//B b1 = new B(); //일반적인 객체 생성\n      B b1;\n      A(B b1){\n          this.b1 = b1; //외부에서 전달한 객체로 b1을 생성하는 법.\n      }\n  }\n  ```\n\n  평소에 객체를 만드는 방식으로 만드는 것이 아니라. 만들고자 하는 객체를 스프링에 전달해주면 그걸 스프링이 만들어줌. = `new`가 사라지고 스프링 대신 생성 객체 전달받는다. \n\n- Dependency Injection (의존성 주입)\n\n  1. 생성자 DI\n  2. setter DI\n\n## 설정\n\npom.xml 안의 \n\njava 버전 1.8 하고 스프링 버전을 4.3.18 로 바꾸고 Properties에서 java build path 에서 자바 버전을 바꾸고 project facets 에서도 java 버전 변경 그리고 runtimes 에서 tomcat 설정\n\n\n\n> pojo : 스프링/web/일반 main 재사용이 가능한 자바 객체\n>\n> 스프링 자바객체 = spring bean\n\n\n\n<bean id = \"bean이름\" class=\"패키지명.클래스명\"//>\n\n\n\n- DO : Data object = value object = data transfer object 값 저장 객체\n\n- DAO :  Data access object / jdbc/ io / 네트워크 값이 저장되어있는 곳에 접근해서 값을 가져오는 객체\n\n`ApplicationContext` 는 spring 에서 factory 역활을 해준다.\n\n\n\n## 스프링 내부 규칙\n\n1.  스프링 xml 안에서 같은 이름 같은 타입 객체 1개 생성 - 공유 싱글턴 방식으로 생성됨\n2.  스프링 공장 생성 객체만 전달.\n3.  스프링 규칙대로 강제적\n\n## Repository\n\n```java\n@Repository(\"dao\")\npublic class EmpDAO{\n    EmpVO vo;\n    setVO(EmpVo vo){\n        this.vo = vo;\n    }\n}\n\n@Repository\t//\"empDAO\" 라는 이름으로 객체가 생성됨.\npublic class EmpDAO{\n    @Autowired \t//setVO라는 함수를 대체함\n    EmpVO vo;\n}\n\n@Repository(\"vo\")\npublic class EmpVO{\n    String name;\n    double salary;\n}\n```\n\n위 코드를 사용하기위해서는\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\">\n\n\t<!--@Repository, @Component, @Autowired 설정 인식 표현을 해줘야 인식함.  -->\n\t<context:component-scan base-package=\"annotaion.empspring\" />\n\t\n\t<bean id=\"vo\" class=\"annotaion.empspring.EmpVO\">\n\t\t<property name=\"name\" value=\"김사원\"></property>\n\t\t<property name=\"salary\" value=\"10000\"></property>\n\t\t<property name=\"deptname\" value=\"영업부\"></property>\n\t</bean>\n\n</beans>\n\n```\n\n### 참고\n\n- ejb vs spring [링크](https://m.blog.naver.com/sillllver/220593543939)\n- Framework 책 27pg\n- DI(Dependency Injection) - IoC (https://itgosu.tistory.com/10) + 책 143pg\n- AOP(Aspect Oriented Programming) - 관점지향프로그래밍 143pg\n- POJO: plain old java object (과거부터 계속해서 쓰여왔던 java 클래스 어디에서나 쓰일수 있음. ex: class B)\n     bean 27~후에 나옴.\n\n- MVC - 책313pg\n\n> 스프링은 양방향 응용, 웹 ,모바일 등 다 사용가능,  타 프레임워크랑 호환이 좋음.\n\n- [참고사이트](https://wizcenter.tistory.com/)\n\n> 책은 토비의 스프링 추천해주셨음.","excerpt":"시작하기에 앞서 수업이 좀 진행되었지만 Spring 을 다시 정리하고자 글을 남긴다. 혼자 보기 용으로 쓴 글이라 매우 난잡.. Spring 스프링의 기본구조 - 코어 위에서 다양한 동작을 독립적으로 사용가능하다 (ex: AOP와 DAO…","fields":{"slug":"/spring-post-01/"},"frontmatter":{"date":"Jan 31, 2020","title":"Spring 정리 -01","tags":["Spring","java"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 시작하기에 앞서\n\nOracle Database를 활용하여 데이터베이스 기초를 배우고 있는 중이다. ddl과 dml에 대해서 학습하고 정리해본 내용이다.\n\n\n\n## where & order by\n\n* 기본적으로 SCOTT/TIGER에서 진행하였다.\n\n```sql\n--where 절에서는 as 사용 x\nselect ename,sal,comm,sal+nvl(comm,0) as \"총급여\"\nfrom emp\nwhere sal + nvl(comm, 0) >= 2000;\n\n--정렬\nselect ename,sal,comm,sal+nvl(comm,0) as \"총급여\"\nfrom emp\norder by sal;\n--셀값만 준다면 기본적으로는 오름차순 (asc인데 생략가능)\n\nselect ename,sal,comm,sal+nvl(comm,0) as \"총급여\"\nfrom emp\norder by sal desc;\n--desc는 내림차순\n\nselect ename,sal,comm,sal+nvl(comm,0) as \"총급여\"\nfrom emp\norder by sal asc, comm desc;\n--각각 조건도 가능.\n\nselect ename, sal, sal + nvl(comm, 0) as \"총급여\"\nfrom emp\nwhere comm is null\norder by sal;\n--is null is not null로도 사용가능.\n\nselect ename, sal, sal + nvl(comm, 0) as \"총급여\"\nfrom emp\nwhere comm is null\norder by \"총급여\";\n```\n\n\n\n## 단일행 함수(dual)\n\n```sql\n-- 단일행 함수\nselect dname, lower(dname), loc, lower(loc)\nfrom dept;\n\nselect round(44.55), round(44.55,1), trunc(44.55) \nfrom dual;\n--round 반올림, 몇번째 짜리까지 반올림, 소수점 잘림.\n\nselect sal, sal*0.03 as \"TAX\"\nfrom emp;\n--기본적인 연산도 가능하다.\n\n--어디서부터 시작해서 몇개 나오는지\nselect ename, hiredate, substr(hiredate,4,2)\nfrom emp\nwhere substr(hiredate,4,2) like 12;\n\n--날짜에 관련된 함수와 형식변환\nselect sysdate ,substr(sysdate,4,2) from dual;\n\nselect sysdate , to_char(sysdate, 'YY') from dual;\nselect sysdate , to_char(sysdate, 'YYYY') from dual;\nselect sysdate , to_char(sysdate, 'MM') from dual;\nselect sysdate , to_char(sysdate, 'day') from dual;\nselect sysdate , to_char(sysdate, 'mm') from dual;\nselect sysdate , to_char(sysdate, 'dd') from dual;\n\n--emp에서 사원들의 사원명, 입사월, 요일 정보를 출력하세요.\nselect ename, to_char(hiredate,'mm') as \"입사월\", to_char(hiredate,'day') as \"입사 요일\"\nfrom emp\norder by \"입사월\";\n\nselect sysdate, to_date('2019/12/24') from dual;\nselect sysdate, to_date('2019-12-24') from dual;\nselect sysdate, to_date('29 12 24', 'dd-mm-yy') from dual;\n\n-- decode 함수\n--decode(어디에서,몇번째,해줄것, 몇번재, 해줄것)\nselect ename, sal, deptno, decode(deptno, 10, sal*1.2, 20, sal* 0.7) as \"보너스\"\nfrom emp\norder by deptno;\n```\n\n\n\n---\n\n\n\n## join\n\n> join은 두 개의 상관있는 테이블을 연결하여 서로의 테이블에서 데이터를 가져올 때 사용된다.\n\n```sql\nselect ename,dname,loc\nfrom emp,dept\nwhere EMP.DEPTNO = dept.deptno;\n--두 개의 테이블이 어떤 관계인지 정의내려줘야한다.\n\nselect ENAME, EMP.DEPTNO, DNAME, LOC\nfrom EMP,DEPT\nwhere EMP.DEPTNO = DEPT.DEPTNO;\n\nselect ename, e.deptno,dname,loc\nfrom emp e, dept d\nwhere e.deptno = d.deptno;\n\n--sal > 2000 크면서 deptno가 20인 사원의 이름, sal loc 출력\nselect ename, sal, loc\nfrom emp e, dept d\nwhere e.DEPTNO = d.DEPTNO and e.SAL > 2000 and e.DEPTNO = 20;\n\n*********************\n-- Ansi join 표준(맘대로 하면 복잡하니 표준을 만들자) : , => (inner) join where => on\n*********************\n\n--inner join 둘의 공통\nselect ename, sal, loc\nfrom emp e join dept d\non e.deptno = d.deptno\nwhere sal > 2000 and e.deptno = 20;\n\n--outer join\n--Oracle\n--null 쪽에 + 마킹 : +가 있는 쪽에 있는 모든걸 보여준다 null 이여도.\nselect ename, d.deptno, dname, loc\nfrom emp e, dept d\nwhere e.deptno(+) = d.deptno;\n\n--Ansi join\n-- right 쪽이 테이블이 마스터가 된다. \n-- 기준이 교집합에서 오른쪽이 다 차있는 교집합이라고 생각하면 될듯 .\nselect ename, d.deptno, dname, loc\nfrom emp e right outer join dept d\non e.deptno = d.deptno;\n\n***********************\n-- non equi join\n***********************\n\nselect * from salgrade;\n\n-- oracle join\nselect ename,sal,grade\nfrom emp, salgrade\nwhere sal between losal and hisal;\n\n\n--ansi join\nselect ename, sal, grade\nfrom emp join salgrade\non sal between losal and hisal;\n\n\n*****************\n-- n개의 테이블 join\n*****************\n-- 사원명, sal, 부서이름, salgrade\n\n--oracle\nselect ename, sal, dname, grade\nfrom emp, dept, salgrade\nwhere emp.deptno = dept.deptno and sal between losal and hisal;\n\n\n-- ansi join\nselect ename, sal, dname, grade\nfrom emp \n\tjoin dept\n\ton emp.deptno = dept.deptno\n\tjoin salgrade\n\ton sal between losal and hisal \nwhere sal > 1500;\n\n******************\n-- oracle self join\n******************\n-- 사원의 이름과 그 사원의 상사 이름 출력\nselect e.ename, m.ename\nfrom emp e, emp m\nwhere e.mgr = m.empno;\n\nselect e.ename, m.ename\nfrom emp e, emp m\nwhere e.mgr = m.empno(+);\n\n-- 상사보다 월급을 더 많이 받는 직원\nselect e.ename, m.ename, e.sal, m.sal\nfrom emp e, emp m\nwhere e.mgr = m.empno(+) and e.sal > m.sal;\n\n--ansi left와 right 는 outer 생략가능. \nselect e.ename, m.ename\nfrom emp e join emp m\non e.mgr = m.empno;\n\n\nselect e.ename \"사원명\", e.sal, m.ename \"상사이름\", m.sal\nfrom emp e \njoin emp m\non e.mgr = m.empno\nwhere e.sal >= m.sal;\n```\n\n\n\n## 집계함수\n\n```sql\n--집계함수\nselect ename, round(sal) from emp;\n\nselect ename, avg(sal) from emp; --안됨.\n\nselect avg(sal) from emp;\n\nselect round(avg(sal)) \"전체 평균급여\" from emp;\n\nselect round(avg(sal))|| '원' from emp;\n\nselect deptno, round(avg(sal)) from emp group by deptno;\n--집계함수에서는 group by로 들어간 아이만 select 절에 들어갈 수 있다.\n\nselect dname, avg(sal), count(*), min(sal), max(sal), count(mgr)\nfrom emp\nright join dept\non emp.deptno = dept.deptno\ngroup by dname\norder by dname;\n\n--부서번호, 부서이름, 부서평균급여, 부서에 있는 사람수, 부서별 최소,최대 월급\nselect e.deptno, dname, avg(sal), count(*), min(sal), max(sal)\nfrom emp e, dept d\nwhere e.deptno = d.deptno\ngroup by e.deptno, dname;\n\n\n--group by 이후 조건을 주는것이 having 절\n***************\nselect\nfrom\nwhere\ngroup by\nhaving\norder by\n***************\n\n--평균 급여가 2000이상인 사람.\nselect e.deptno, dname, round(avg(sal)) \"평균급여\"\nfrom emp e, dept d\nwhere e.deptno = d.deptno\ngroup by e.deptno, dname\nhaving avg(sal) > 2000;\n```\n\n\n\n## subQuery\n\n```sql\n--subQuery\n--Ford 보다 급여가 많은 사원 목록\n\nselect sal from emp where ename = 'FORD';\n\nselect * from emp where sal > 3000;\n\nselect * \nfrom emp\nwhere sal > (select sal from emp where ename = 'FORD');\n\n\n-- 전체 평균 급여보다 적게 받는 사원 목록\nselect ename, sal\nfrom emp\nwhere sal < (select avg(sal) from emp);\n\nselect ename, sal\nfrom emp\nwhere sal = (select min(sal) from emp);\n\n-- 부서별 최고 급여를 받는 사원 목록\n\nselect ename, sal, max(sal)\nfrom emp e\njoin dept\non e.deptno = dept.deptno\ngroup by e.deptno;\n\n\n--부서별 최고 급여 받는 사원\nselect *\nfrom emp\nwhere sal in (select max(sal) from emp group by deptno);\n\nselect *\nfrom emp\nwhere (deptno, sal) in (select deptno, max(sal) from emp group by deptno)\norder by deptno;\n\n\n*************\n-- rownum: 자동적으로 1~n 개의 수가 column에 주어짐.\n*************\n\nselect ename, job, sal\nfrom emp;\n\nselect rownum, ename, job, sal\nfrom emp;\n\nselect rownum, ename, job, sal\nfrom emp\norder by sal;\n\nselect rownum, ename, job, sal\nfrom (select * from emp order by sal);\n\n--급여 top 3\nselect rownum, ename, job, sal\nfrom (select * from emp order by sal desc)\nwhere rownum < 4;\n\nselect rownum, ename, job, sal\nfrom (select * from emp order by sal desc)\nwhere rownum between 6 and 10; --rownum 은 1부터 시작하는 경우가 아니니 작동하지 않음.\n\n--oracle page 처리\n\nselect *\nfrom (\n\tselect rownum row#, ename, job, sal\n\tfrom (select * from emp order by sal desc)\n)\nwhere row# between 6 and 10;\n--rownum을 먼저 생성한후 그것을 row#으로 받고 그다음 그 목록에서 6~10의 수를 보여줌.\n```\n\n","excerpt":"시작하기에 앞서 Oracle Database를 활용하여 데이터베이스 기초를 배우고 있는 중이다. ddl과 dml에 대해서 학습하고 정리해본 내용이다. where & order by 기본적으로 SCOTT/TIGER에서 진행하였다. 단일행 함수(dual…","fields":{"slug":"/database-post-03/"},"frontmatter":{"date":"Dec 26, 2019","title":"데이터베이스 정리 -03","tags":["sql","database","TIL","oracle"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 시작하기에 앞서\n\nOracle Database를 활용하여 데이터베이스 기초를 배우고 있는 중이다. 다양한 Select, join, 집계함수, subQuery에 대해서 학습하고 정리해본 내용이다.\n\n\n\n## where & order by\n\n* 기본적으로 SCOTT/TIGER에서 진행하였다.\n\n```sql\n--where 절에서는 as 사용 x\nselect ename,sal,comm,sal+nvl(comm,0) as \"총급여\"\nfrom emp\nwhere sal + nvl(comm, 0) >= 2000;\n\n--정렬\nselect ename,sal,comm,sal+nvl(comm,0) as \"총급여\"\nfrom emp\norder by sal;\n--셀값만 준다면 기본적으로는 오름차순 (asc인데 생략가능)\n\nselect ename,sal,comm,sal+nvl(comm,0) as \"총급여\"\nfrom emp\norder by sal desc;\n--desc는 내림차순\n\nselect ename,sal,comm,sal+nvl(comm,0) as \"총급여\"\nfrom emp\norder by sal asc, comm desc;\n--각각 조건도 가능.\n\nselect ename, sal, sal + nvl(comm, 0) as \"총급여\"\nfrom emp\nwhere comm is null\norder by sal;\n--is null is not null로도 사용가능.\n\nselect ename, sal, sal + nvl(comm, 0) as \"총급여\"\nfrom emp\nwhere comm is null\norder by \"총급여\";\n```\n\n\n\n## 단일행 함수(dual)\n\n```sql\n-- 단일행 함수\nselect dname, lower(dname), loc, lower(loc)\nfrom dept;\n\nselect round(44.55), round(44.55,1), trunc(44.55) \nfrom dual;\n--round 반올림, 몇번째 짜리까지 반올림, 소수점 잘림.\n\nselect sal, sal*0.03 as \"TAX\"\nfrom emp;\n--기본적인 연산도 가능하다.\n\n--어디서부터 시작해서 몇개 나오는지\nselect ename, hiredate, substr(hiredate,4,2)\nfrom emp\nwhere substr(hiredate,4,2) like 12;\n\n--날짜에 관련된 함수와 형식변환\nselect sysdate ,substr(sysdate,4,2) from dual;\n\nselect sysdate , to_char(sysdate, 'YY') from dual;\nselect sysdate , to_char(sysdate, 'YYYY') from dual;\nselect sysdate , to_char(sysdate, 'MM') from dual;\nselect sysdate , to_char(sysdate, 'day') from dual;\nselect sysdate , to_char(sysdate, 'mm') from dual;\nselect sysdate , to_char(sysdate, 'dd') from dual;\n\n--emp에서 사원들의 사원명, 입사월, 요일 정보를 출력하세요.\nselect ename, to_char(hiredate,'mm') as \"입사월\", to_char(hiredate,'day') as \"입사 요일\"\nfrom emp\norder by \"입사월\";\n\nselect sysdate, to_date('2019/12/24') from dual;\nselect sysdate, to_date('2019-12-24') from dual;\nselect sysdate, to_date('29 12 24', 'dd-mm-yy') from dual;\n\n-- decode 함수\n--decode(어디에서,몇번째,해줄것, 몇번재, 해줄것)\nselect ename, sal, deptno, decode(deptno, 10, sal*1.2, 20, sal* 0.7) as \"보너스\"\nfrom emp\norder by deptno;\n```\n\n\n\n---\n\n\n\n## join\n\n> join은 두 개의 상관있는 테이블을 연결하여 서로의 테이블에서 데이터를 가져올 때 사용된다.\n\n```sql\nselect ename,dname,loc\nfrom emp,dept\nwhere EMP.DEPTNO = dept.deptno;\n--두 개의 테이블이 어떤 관계인지 정의내려줘야한다.\n\nselect ENAME, EMP.DEPTNO, DNAME, LOC\nfrom EMP,DEPT\nwhere EMP.DEPTNO = DEPT.DEPTNO;\n\nselect ename, e.deptno,dname,loc\nfrom emp e, dept d\nwhere e.deptno = d.deptno;\n\n--sal > 2000 크면서 deptno가 20인 사원의 이름, sal loc 출력\nselect ename, sal, loc\nfrom emp e, dept d\nwhere e.DEPTNO = d.DEPTNO and e.SAL > 2000 and e.DEPTNO = 20;\n\n*********************\n-- Ansi join 표준(맘대로 하면 복잡하니 표준을 만들자) : , => (inner) join where => on\n*********************\n\n--inner join 둘의 공통\nselect ename, sal, loc\nfrom emp e join dept d\non e.deptno = d.deptno\nwhere sal > 2000 and e.deptno = 20;\n\n--outer join\n--Oracle\n--null 쪽에 + 마킹 : +가 있는 쪽에 있는 모든걸 보여준다 null 이여도.\nselect ename, d.deptno, dname, loc\nfrom emp e, dept d\nwhere e.deptno(+) = d.deptno;\n\n--Ansi join\n-- right 쪽이 테이블이 마스터가 된다. \n-- 기준이 교집합에서 오른쪽이 다 차있는 교집합이라고 생각하면 될듯 .\nselect ename, d.deptno, dname, loc\nfrom emp e right outer join dept d\non e.deptno = d.deptno;\n\n***********************\n-- non equi join\n***********************\n\nselect * from salgrade;\n\n-- oracle join\nselect ename,sal,grade\nfrom emp, salgrade\nwhere sal between losal and hisal;\n\n\n--ansi join\nselect ename, sal, grade\nfrom emp join salgrade\non sal between losal and hisal;\n\n\n*****************\n-- n개의 테이블 join\n*****************\n-- 사원명, sal, 부서이름, salgrade\n\n--oracle\nselect ename, sal, dname, grade\nfrom emp, dept, salgrade\nwhere emp.deptno = dept.deptno and sal between losal and hisal;\n\n\n-- ansi join\nselect ename, sal, dname, grade\nfrom emp \n\tjoin dept\n\ton emp.deptno = dept.deptno\n\tjoin salgrade\n\ton sal between losal and hisal \nwhere sal > 1500;\n\n******************\n-- oracle self join\n******************\n-- 사원의 이름과 그 사원의 상사 이름 출력\nselect e.ename, m.ename\nfrom emp e, emp m\nwhere e.mgr = m.empno;\n\nselect e.ename, m.ename\nfrom emp e, emp m\nwhere e.mgr = m.empno(+);\n\n-- 상사보다 월급을 더 많이 받는 직원\nselect e.ename, m.ename, e.sal, m.sal\nfrom emp e, emp m\nwhere e.mgr = m.empno(+) and e.sal > m.sal;\n\n--ansi left와 right 는 outer 생략가능. \nselect e.ename, m.ename\nfrom emp e join emp m\non e.mgr = m.empno;\n\n\nselect e.ename \"사원명\", e.sal, m.ename \"상사이름\", m.sal\nfrom emp e \njoin emp m\non e.mgr = m.empno\nwhere e.sal >= m.sal;\n```\n\n\n\n## 집계함수\n\n```sql\n--집계함수\nselect ename, round(sal) from emp;\n\nselect ename, avg(sal) from emp; --안됨.\n\nselect avg(sal) from emp;\n\nselect round(avg(sal)) \"전체 평균급여\" from emp;\n\nselect round(avg(sal))|| '원' from emp;\n\nselect deptno, round(avg(sal)) from emp group by deptno;\n--집계함수에서는 group by로 들어간 아이만 select 절에 들어갈 수 있다.\n\nselect dname, avg(sal), count(*), min(sal), max(sal), count(mgr)\nfrom emp\nright join dept\non emp.deptno = dept.deptno\ngroup by dname\norder by dname;\n\n--부서번호, 부서이름, 부서평균급여, 부서에 있는 사람수, 부서별 최소,최대 월급\nselect e.deptno, dname, avg(sal), count(*), min(sal), max(sal)\nfrom emp e, dept d\nwhere e.deptno = d.deptno\ngroup by e.deptno, dname;\n\n\n--group by 이후 조건을 주는것이 having 절\n***************\nselect\nfrom\nwhere\ngroup by\nhaving\norder by\n***************\n\n--평균 급여가 2000이상인 사람.\nselect e.deptno, dname, round(avg(sal)) \"평균급여\"\nfrom emp e, dept d\nwhere e.deptno = d.deptno\ngroup by e.deptno, dname\nhaving avg(sal) > 2000;\n```\n\n\n\n## subQuery\n\n```sql\n--subQuery\n--Ford 보다 급여가 많은 사원 목록\n\nselect sal from emp where ename = 'FORD';\n\nselect * from emp where sal > 3000;\n\nselect * \nfrom emp\nwhere sal > (select sal from emp where ename = 'FORD');\n\n\n-- 전체 평균 급여보다 적게 받는 사원 목록\nselect ename, sal\nfrom emp\nwhere sal < (select avg(sal) from emp);\n\nselect ename, sal\nfrom emp\nwhere sal = (select min(sal) from emp);\n\n-- 부서별 최고 급여를 받는 사원 목록\n\nselect ename, sal, max(sal)\nfrom emp e\njoin dept\non e.deptno = dept.deptno\ngroup by e.deptno;\n\n\n--부서별 최고 급여 받는 사원\nselect *\nfrom emp\nwhere sal in (select max(sal) from emp group by deptno);\n\nselect *\nfrom emp\nwhere (deptno, sal) in (select deptno, max(sal) from emp group by deptno)\norder by deptno;\n\n\n*************\n-- rownum: 자동적으로 1~n 개의 수가 column에 주어짐.\n*************\n\nselect ename, job, sal\nfrom emp;\n\nselect rownum, ename, job, sal\nfrom emp;\n\nselect rownum, ename, job, sal\nfrom emp\norder by sal;\n\nselect rownum, ename, job, sal\nfrom (select * from emp order by sal);\n\n--급여 top 3\nselect rownum, ename, job, sal\nfrom (select * from emp order by sal desc)\nwhere rownum < 4;\n\nselect rownum, ename, job, sal\nfrom (select * from emp order by sal desc)\nwhere rownum between 6 and 10; --rownum 은 1부터 시작하는 경우가 아니니 작동하지 않음.\n\n--oracle page 처리\n\nselect *\nfrom (\n\tselect rownum row#, ename, job, sal\n\tfrom (select * from emp order by sal desc)\n)\nwhere row# between 6 and 10;\n--rownum을 먼저 생성한후 그것을 row#으로 받고 그다음 그 목록에서 6~10의 수를 보여줌.\n```\n\n","excerpt":"시작하기에 앞서 Oracle Database를 활용하여 데이터베이스 기초를 배우고 있는 중이다. 다양한 Select, join, 집계함수, subQuery에 대해서 학습하고 정리해본 내용이다. where & order by 기본적으로 SCOTT…","fields":{"slug":"/database-post-02/"},"frontmatter":{"date":"Dec 26, 2019","title":"데이터베이스 정리 -02","tags":["sql","database","TIL","oracle"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 시작하기 앞서서\n\n멀티캠퍼스 데이터베이스 수업시간에 Oracle 데이터베이스를 활용하는 수업을 진행하였다. 처음으로 배우는 데이터베이스다 보니 뭔가 개념적으로 확실하게 이해되는 것이 좀 부족했던 것 같아 집에서 더 공부를 하고자 노트북을 키게 됐다. 그러나... 내가 사용하는 맥북에서는 Oracle 데이터베이스 설치가 바로는 불가하다는 것을 알게되었다...\n\n\n\n## Docker\n\n그래서 구글링 결과! Docker라는 것을 통해 설치를 할 수 있다는 것을 알게되었고 바로 시도하기로 하였다. 여기서 Docker란 컨테이너 기반의 오픈소스 가상화 플랫폼으로 실행 환경에 상관없이 동일한 환경을 제공해주는(?) 아주 편리한 녀석인 것 같았다. 지금 나의 상황으로는 컨테이너 기반은 뭔지.. 또 이게 어떻게 동작하는지 잘 알 수 없기에 후에 공부하고 알게되면 그 때 또 포스트를 작성하도록 하겠다.\n\n먼저 [Docker 홈페이지](https://hub.docker.com/editions/community/docker-ce-desktop-mac)로 접속하여 가입 후 다운을 받았고 실행까지 성공하였다. 실행을 하고 나면 이제 터미널에서 docker 명령어들을 사용가능한데 터미널에서 **docker search oracle-xe-11g** 를 입력하여 다운로드할 이미지들을 검색하였다.![image-20191225222855710](images/image-20191225222855710.png)\n\n나는 [여기](https://whitepaek.tistory.com/40)블로그를 보면서 했기 때문에 똑같이 **jaspeen/oracle-xe-11g**를 다운 받아 진행하였고 \n\n**docker run --name oracle11g-test -d -p 8080:8080 -p 1521:1521 jaspeen/oracle-xe-11g** 이 명령어를 통해 docker에서 컨테이너 생성과 실행을 할 수 있었다.\n\n그 후 **docker exec -it oracle11g-test sqlplus** 입력으로 오라클 데이터베이스 실행을 성공할 수 있었다! 아마 나보다는 위에 설명해놓은 블로그가 더 예쁘고 자세히 설명해 놓았으니.. 저걸 보고 따라하는게 더 좋을 것 같기도 하다.\n\n정지 후 다시 시작할때는 **docker start oracle11g-test** 으로 docker에서 실행한 후 진행 할 수 있으면 될 것 같다.\n\n\n\n## Eclipse에서의 Oracle Databas연동\n\n그 후에 나머지 SQL devloper라던가.. 나머지 환경 설정은 쉽게 할 수 있었다. 하지만.. 이클립스에서 바로바로 확인 할 수 있는 환경을 하기 위해서는 또 다른 설정이 필요하였다. 먼저 [이곳](https://www.oracle.com/database/technologies/jdbcdriver-ucp-downloads.html) 에서 ojdbc6.jar 를 다운 받고 시작하자.\n\n도커와 다른 설정을 마쳤으면 이클립스에서의 Perspective 를 java EE로 설정해주자.![image-20191225224439918](images/image-20191225224439918.png)\n\n그 후 아래의 DataSource Explorer에 있는 Database Connections에서 하나를 생성하자.![Eclipse_oracle](images/Eclipse_oracle.png)\n\n후에 창에서 Driver 칸 옆에 있는 톱니바퀴를 클릭하자. 제 Theme 에서는 노란색 파인애플 처럼 생겼군요.\n\n![image-20191225224819896](images/image-20191225224819896.png)\n\n그 다음 Oracle Thin Driver 버전 11를 선택하고 jar List에 있는 것을 모두 삭제하고 처음 받았던 ojdbc6.jar를 추가하고 User name과 Password를 적고 Test Connection후 성공이 나온다면 데이터베이스 공부를 시작하도록 하자!! 참고로 포트 번호는 글마다 다르던데 처음에 docker에서 명령어 사용으로 다르게 설정하거나 그럴 수 있는 것 같다.\n\n> 나라가 이상하다고 나오는 경우가 있는데 그럴때는 시스템 환경설정에서 언어 및 지역을 미국으로 바꾸고 다시 한국으로 한다음 껐다가 키고 다시 하면 된다는 소리가 있다. SQL developer에서도 마찬가지로..","excerpt":"시작하기 앞서서 멀티캠퍼스 데이터베이스 수업시간에 Oracle…","fields":{"slug":"/mac-oracle/"},"frontmatter":{"date":"Dec 25, 2019","title":"Mac에서 Oracle Database 사용하기","tags":["mac","Oracle","database"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n## 시작하기에 앞서\n\n멀티캠퍼스에서 데이터베이스 관련 수업이 시작되었다. \n처음 배우는 데이터베이스지만 과거에 부스트코스 안드로이드 프로그래밍을 하면서 다뤄봤던 적이 있던 주제였다. 그 때 당시에는 따라 쓰기에 급급하고 매번 구글링으로만 해결하던 문제들을 이해하도록 노력해보자!\n\n\n\n## 환경설정\n\n* [Database 18c Express Edition](https://www.oracle.com/database/technologies/xe-downloads.html) 이전버전 다운로드.\n\n* [SQL Developer](https://www.oracle.com/tools/downloads/sqldev-downloads.html) 써도 되지만 이클리스에서 제공함. \n\n  자바 환경이 구축된 공간에서는Windows 64-bit with JDK 8 included 으로 돌리는게 편함 .\n\n\n\n\n## 생성과 실행\n\n* 관리자 계정 접속.\n\n```bash\nC:\\Users\\student>sqlplus system/password\n\n\nSQL*Plus: Release 11.2.0.2.0 Production on 월 12월 23 10:10:49 2019\n\nCopyright (c) 1982, 2010, Oracle.  All rights reserved.\n\n\nConnected to:\nOracle Database 11g Express Edition Release 11.2.0.2.0 - Production\n\nSQL>\n```\n\n>  잘된예시\n\n\n\n* hr/hr에 접근하려 하지만 락이 걸려있음. 접근하기 위해서는 관리자에서 락을 풀어줘야한다.\n\n```sql\nSQL> conn hr/hr\nERROR:\nORA-28000: the account is locked\n\nalter user hr identified by hr account unlock;\n--락을 풀어주는 부분\n```\n\n\n\n* TABLESPACE 생성\n\n```sql\ncreate TABLESPACE <NAME>\ndatafile 'C:\\oraclexe\\app\\oracle\\oradata\\XE\\<NAME>.dbf'\nsize 10M\nautoextend on next 1M maxsize UNLIMITED;\n--TABLESPACE를 만드는 부분이다.\n```\n\n> C:\\oraclexe\\app\\oracle\\oradata\\XE :실질적인 데이터가 들어있는 디렉토리.\n>\n> 테이블 스페이스 : 어떠한 계정에 들어갈 데이터들의 공간. \n>\n> 테이블을 만들면 실질적인 데이터 들은 oradata로 들어간다.\n\n\n\n```sql\ncreate user <NAME> identified by <PASSWORD> \n--계정이름고 비밀번호 정하기.\ndefault TABLESPACE <FILENAME>; \n--기본값일 파일 이름 안해줄시 system에 연결이 되어버린다..\n```\n\n오라클에서 계정을 만들고 default 값을 설정하지않으면 시스템영역을 사용해버림.  주의하자.\n\n\n\n> 오라클에서 계정은 스키마라고 부릅니다.  SQL에서는 데이터베이스를 말하는 부분.\n\n> 정규화과정 = 테이블을 쪼개는 것. 중복되는 데이터들을 뽑아내서 테이블을 만드는것.\n\n\n\n## 권한과 삭제\n\n```sql\ngrant connect,resource,dba to test01; \n--권한부여 권한없이 접근할경우 접근되지않음.\n\nrevoke dba from test01; \n--dba 권한만 뺏음. 커넥트 권한은 있음.\nrevoke connect from test01;\n--connect 권한마저 뺏어버림\n\ndrop user test01 cascade; \n--test01 삭제 뒤의 cascade 는 강제성을줌\n\n```\n\n\n\n## SELECT와 관련된 명령문\n\n```sql\ndesc emp;\n--emp의 구조를 보여주세요.\n\nselect distinct job\nfrom emp; \n--distinct 중복제거.\n\n\nselect sal, sal*12\nfrom emp;\n--연산식도 사용가능.\n\nselect sal, sal*12 as \"연봉\"\nfrom emp; \n--연산식의 이름을 설정도 가능. 유일하게 `\"`을 사용. 나머지는 다`'`으로 사용한다.\n\nselect ename, job, sal, comm,  sal+comm as \"실급여\", **nvl(comm, -1)**\nfrom emp; \n--nvl = null 이라면 -1 이라는 값으로 바꿔줘. oracle 함수임.\n\nselect empno, ename, nvl(to_char(mgr), `'<<CEO>>'`) as \"매니저 코드\"\nfrom emp;\n--nvl 을 사용할때는 컬럼의 타입을 잘 확인해야함.  desc로 잘 확인하여 맞춰주자.\n\nselect ename, job, ename||'  '||job\nfrom emp;  \n--|| 문자열 연결.\n\nselect 20\\*20\\*4\nfrom dual; \n--`dual`가상의 테이블로 값을 확인.\n\nselect sysdate\nfrom dual; \n--날짜정보.\n\nselect user\nfrom dual; \n--로그인한 유저의 정보.\n\nselect empno, ename, nvl(to_char(mgr), '<<CEO>>') as \"매니저 코드\"\nfrom emp;\n--nvl 로 null 형식의 값을 초기화시켜준다.\n\nselect ename, job, ename||'  '||job\nfrom emp;\n--문자열 삽입\n\nselect 20*20*4\nfrom dual;\n--간단한 값 표시. 가상공간 dual을 사용\n\n--row 제한을 걸때 where 절\nselect ename, job, deptno\nfrom emp\nwhere job = 'MANAGER';\n\n--대문자로 통일\nselect ename, job, deptno\nfrom emp\nwhere upper(job) = upper('manager');\n\nselect ename, hiredate\nfrom emp\nwhere hiredate >= '82/01/01';\n\n\nselect ename, hiredate\nfrom emp\nwhere hiredate <> '82/01/23';\n-- <>은 != 의 의미이다.\n\nselect ename, sal \nfrom emp\nwhere sal >=2450 AND sal < 3000;\n--between and = between 은 =이 포함된다. 작은값이 꼭 앞에 오기.\n\nselect ename, sal \nfrom emp\nwhere sal BETWEEN 2450 AND 3000;\n\n\nselect ename, job, deptno\nfrom emp\nwhere deptno = 10 or deptno = 20;\n\n--in 연산자\nselect ename, job, deptno\nfrom emp\nwhere deptno in (10,20);\n\nselect *\nfrom dept\nwhere (deptno,loc) in ((20, 'DALLAS'), (30, 'CHICAGO'));\n\n-- like 연산자\n--A로 시작\nselect *\nfrom emp\nwhere ename like 'A%';\n\n--A로 끝나냐\nselect *\nfrom emp\nwhere ename like '%A';\n\n--A가 포함\nselect *\nfrom emp\nwhere ename like '%A%';\n\n--A가 포함되긴 하는데 뒤에서 세번째\nselect *\nfrom emp\nwhere ename like '%A__';\n\n--81년도에 입사한 사원 목록.\nselect *\nfrom emp\nwhere hiredate like '%81%';\n\n--쓰레기값을 날려보자\nSQL> purge recyclebin;\n```\n\n### SQL 명령어 분류\n\n- Query : SELECT\n- DML : INSERT, UPDATE, DELETE (롤백이 여지가 있음.)\n- Transaction Control : COMMIT, ROLLBACK\n- DDL : CREATE, DROP, TRUNCATE, ALTER (**롤백의 여지가 없다.**)\n- DCL : GRANT, REVOKE\n\n\n\n## 제약조건\n\n|    종류     | 예제                                                         |\n| :---------: | ------------------------------------------------------------ |\n| PRIMARY-KEY | 하나의 행에서 그행을 대표하는 컬럼이며 FOREIGN-KEY 칼럼이 참조하는 칼럼은 반드시 PRIMARY-KEY 칼럼이여야 한다. |\n| FOREIGN-KEY | 입력되어야 할 값이 다른 테이블의 PRIMARY-KEY 칼엄의 값인 컬럼 |\n|   UNIQUE    | 칼럼의 값이 테이블 전체에서 **유일**한 값.                   |\n|  NOT NULL   | 칼럼에 NULL 값이 입력되어서는 안되는 경우                    |\n|    CHECK    | 임의의 제약조건을 추가한다.                                  |\n\n\n\n\n> 처음 시작시 데이터베이스의 생성(oracle에서는 스키마 생성)과  흐름을 이해하는게 부족한 것 같다. \n>\n> 특히 select 문의 like 부분은 한번씩 와서 확인할 수 있도록 해보자. 나중에 도움이 될것같다.\n>\n> <<<<<<< HEAD\n> =======\n\n\n\n## 환경설정\n\n* [Database 18c Express Edition](https://www.oracle.com/database/technologies/xe-downloads.html) 이전버전 다운로드.\n\n* [SQL Developer](https://www.oracle.com/tools/downloads/sqldev-downloads.html) 써도 되지만 이클리스에서 제공함. \n\n  자바 환경이 구축된 공간에서는Windows 64-bit with JDK 8 included 으로 돌리는게 편함 .\n>>>>>>> d4f525ef8f2adbde4816c829181cea3e98f9d3de\n","excerpt":"…","fields":{"slug":"/database-post-01/"},"frontmatter":{"date":"Dec 23, 2019","title":"데이터베이스 정리 -01","tags":["sql","database","TIL","oracle"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 시작하기에 앞서\n\n파이썬에서 웹 크롤링하는 것에 대한 정리이다. `bs4` `flask` `jinja` 등 다양한 라이브러리를 사용하면서 진행해보았다.\n\n\n\n## requests\n\n* URL에 요청을 보내고 그에 맞는 응답을 해석하고 크롤링 해보았다.\n\n```python\n'''\n1. request > naver.com\n2. response > bs4\n3. webbroser\n\n'''\nimport requests\nfrom bs4 import BeautifulSoup as bs\nimport webbrowser\n\nurl = \"https://www.naver.com\"\nrequests.get(url)\nresponse = requests.get(url).text\n\n#\"html.parser\" : 받아올 형식을 의미함. \ndoc = bs(response, 'html.parser')\n\n# . > class\n# # > id\n# result = doc.select_one(\".ah_k\")\n\n#\".ah_k\"로 끝나는 클래스에서의 값을 리스트 형태로 모조리 받아온다. 하나 받으려면 select_one\nresult = doc.select(\".ah_k\")\n\nsearch_url = \"https://search.naver.com/search.naver?query=\"\nfor i in range(5): \n    # 실시간 검색어 다섯개를 받아. 새로운 브라우저를 띄워보았다.\n    webbrowser.open(search_url + result[i].text)\n    # print(result[i].text)\n\n```\n\n\n\n## flask\n\n* 이번에는 요청이 왔을 때 그것에 맞는 응답을 보여주는 것이다.\n\n   flask 라이브러리를 사용해서 간단하게 서버를 구성해보았다.\n\n**app.py**\n\n```python\nfrom flask import Flask, render_template, request\nimport random\nimport datetime\n\napp = Flask(__name__) \n#서버의 이름을 app으로 하겠다.\n#파일이름도 똑같게 app으로 하면 명령어 flask run으로 만으로도 동작가능하다.\n\n\n#url을 관리해주는 친구 > @시작하는 @app.route(\"/\")\n\n\n@app.route(\"/\")\ndef hello():\n    return \"안녕!!\"\n\n@app.route(\"/dday\")\ndef dday():\n    today = datetime.datetime.now()\n    final = datetime.datetime(2020, 6, 9)\n    result = final - today\n    #f 문자열 포맷방법 파이썬에서 매우 유용하게 쓰이는것 같다.\n    #리턴값은 무엇무엇 오는지는 모르겠지만 string 타입이여야 하는것 같다.\n    return f\"힘을 내야 하는 날이 {result.days}일 남았습니다.\"\n\n@app.route(\"/lotto\")\ndef lotto():\n    numbers = random.sample(range(1,46), 6)\n    return f\"{numbers}\"\n\n##오늘이 크리스마스인지 알려준다!\n@app.route(\"/christmas\")\ndef christmas():\n    now = datetime.date.today()\n    today = datetime.datetime.now()\n\n    print(today.date().strftime(\"%y년 %m월 %d일\"))\n    if now.month == 12 and now.day == 25:\n        return \"크리스마스에요!\"\n    else :\n        return \"<h1>아니에요 열심히 기다려봐요<h1>\"\n\n@app.route(\"/movies\")\ndef movies():\n    movies = [\"겨울왕국2\", \"클라우스\", \"어바웃 타임\", \"나홀로 집에2\", \"이터널선샤인\", \"반지의 제왕\"]\n    return render_template(\"movie.html\", movies = movies) \n##앞 movies가 html 쪽 movies 뒤에는 어떤 리스트를 보낼지.\n\n\n@app.route(\"/greeting/<name>\")\ndef greeting(name):\n    return f\"안녕하세요 {name}님!\"\n\n@app.route(\"/cube/<int:num>\")\ndef cube(num):\n    result = num ** 3\n    return str(result)\n\n'''\ndef render_template(str, **args) :\n    *이 있으면 파이썬에서는 가변적인 개수가 들어가도 상관없다.\n'''\n\n\n# 식사 메뉴 추천.\n# 1. random\n# 2. Dynamic route: @app.route(\"/lunch/1 2 3 4\")\n# - 숫자를 받아서 명수 개수 만큼 \n# - List : 자장면, 짬뽕, 오므라이스, 볶음밥, 고추잡채, 탕수육, 돈까스, \n# - <int:num> 숫자 만큼 뽑기\n\n@app.route(\"/lunch/<int:num>\")\ndef lunch(num):\n    lunches = [\"자장면\", \"짬뽕\", \"오므라이스\", \"볶음밥\", \"고추잡채\", \"탕수육\", \"돈까스\"]\n    #리스트 자체를 넣어줘서 랜덤으로 뽑아줄 수도 있다. 중복허용X\n    #중복을 허용하고 싶으면 choice로 뽑아주자.\n    lunch = random.sample(lunches,num)\n    return render_template(\"lunch.html\", lunches = lunches,people = num, pick_lunch = lunch)\n\n#render_template(\"lunch.html\", lunches = lunces)에서 먼저 폴더안에 templates라는 폴더안에\n#\"lunch.html\" 라는 파일이 있어야한다. 그리고 jinja 라이브러리로 아래의 html에 lunches에 py안의 lunches를 보내준다.\n\n\n\n#실행시 debug모드로 들어가 실시간 변화를 감지하게 도와준다.\nif __name__ == \"__main__\":\n    app.run(debug=True)\n```\n\n\n**lunch.html**\n```html\n<!DOCTYPE html>\n<html lang=\"ko\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>점심 메뉴</title>\n</head>\n<body>\n    <h1>점심 메뉴 리스트</h1>\n    <ul>\n        {% for lunch in lunches %}\n            <li>{{lunch}}</li>\n        {% endfor %}\n    </ul>\n    <h1>가고자하는 인원 : {{people}}</h1>\n    <h1>뽑힌 점심 메뉴</h1>\n    {{pick_lunch}}\n</body>\n</html>\n```\n\n> jinja를 사용할때는 형식에 주의하자\n\n* 이번에는 웹에서 원하는 요청문을 보낸 후 그것에 맞는 웹을 만들어보자. ([vonvon](https://kr.vonvon.me/quiz/329)을 참고해서 만들어봤다.)\n\n**app.py**\n\n```python\n@app.route(\"/vonvon\")\ndef vonvon():\n    return render_template(\"vonvon.html\")\n\n@app.route(\"/godmademe\")\ndef godmademe():\n    #vonvon에서 보낸 \"name\"이라는 키값의 value 를 가져온다. \n    #여기서 request 라이브러리를 사용하는데 이름에 주의하자!\n    name = request.args.get(\"name\")\n    first_list = [\"잘생김\", \"어중간함\", \"덤벙거림\", \"착함\", \"찌질\", \"재력\", \"귀여움\"]\n    second_list = [\"애교\", \"힘\", \"용기\", \"지능\", \"센스\", \"식욕\", \"계획력\"]\n    third_list = [\"운\", \"행복\", \"긍정\", \"생기\", \"감성\", \"재수없음\", \"답답함\"]\n\n    #choice는 반환해주는 값이 string 이더라.\n    first = random.choice(first_list)\n    second = random.choice(second_list)\n    third = random.choice(third_list)\n\n    return render_template(\"godmademe.html\", name = name, first = first, second = second, third = third)\n```\n\n**vonvon.html**\n```html\n<!DOCTYPE html>\n<html lang=\"ko\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>vonvon</title>\n</head>\n<body>\n    <h1> 신이 당신을 만들 때</h1>\n    <form action=\"/godmadeeme\">\n        <input type=\"text\" name=\"name\">\n        <input type=\"submit\">\n    </form>\n</body>\n</html>\n```\n\n> form 부분을 좀 더 공부해야겠다. 헷갈린다.\n\n**godmademe.html**\n\n```html\n<!DOCTYPE html>\n<html lang=\"ko\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>신이 당신을 만들때는</title>\n</head>\n<body>\n    <h1>신이 <b>{{ name }}</b>을/를 만들 때...</h1>\n    <p> <b>{{ first }}</b>을 한 스푼~</p>\n    <p> <b>{{ second }}</b>도 넣어주고~</p>\n    <p> 그리고 <b>{{ third }}</b>도 조그....으어ㅡ아아ㅏ아ㅏㅏ</p>\n</body>\n</html>\n```\n\n\n\n\n* HTML 태그\n  * `ol` =순서가 있는 목록\n  * `ul` = 순서가 없는 목록\n\n\n\n### 참고링크\n\n* [jinja라이브러리](https://snacky.tistory.com/7)\n\n\n\n","excerpt":"시작하기에 앞서 파이썬에서 웹 크롤링하는 것에 대한 정리이다.    등 다양한 라이브러리를 사용하면서 진행해보았다. requests URL에 요청을 보내고 그에 맞는 응답을 해석하고 크롤링 해보았다. flask…","fields":{"slug":"/python-post-02/"},"frontmatter":{"date":"Dec 19, 2019","title":"파이썬 정리 -02","tags":["python","TIL"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 시작하기에 앞서\n\n멀티캠퍼스 3주차 깃 특강중에 배웠던 파이썬을 정리해보자. \n\n정말 간단하게 배우고 있는 중이라 매우 기본적인 내용이 많다.\n\n\n\n## String\n\n```python\n# 1. 글자 합체\n\nname = \"happy\" + \" \" + \"hacking\"\n\n# 2. 글자 삽입\n\nfirst = \"tony\"\nage = 20\n\ntext = \"안녕하세요. 제 이름은 {}입니다. 나이는 {}입니다.\" .format(first, age)\n\n# 문자열을 5번째 까지 출력한다.\ntest_name = text[:5]\n# 문자열을 5번째 부터 뒤를 출력한다.\ntext_age = text[5:]\n\n# 문자열을 자르는데 변수를 넣어줘서 자를수 있다. 기본값은 공백 \ntext_split = text.split()\n```\n\n> 문자열을 출력할때는 음수도 사용가능하다. -1이면 뒤부터 시작!\n\n\n\n## List와 Dictionary\n\n```python\n# List\nmenus = [\"순남 시래기\", \"양자강\", \"20층...\"]\nphone_nums = [\"02-3441-5858\", \"02-3818-7588\", \"02-4343-9595\"]\n\n#추가하고 싶을때는 append를 사용하자!\n\n# Dictionary { key : value } Map과 비슷 하지만 key 가 중복은 안됨.\ndict_nums ={\n    \"순남 시래기\":\"02-3441-5858\",\n    \"양자강\" : \"02-3818-7588\",\n    \"20층\" : \"02-4343-9595\",\n}\n\nprint(dict_nums[\"순남 시래기\"]) #value 값이 나온다.\n\n```\n\n> `dictionary`는 중괄호를 사용해서 감싸준다!\n\n\n\n## if\n\n```python\nif dust > 150:\n    #앞의 네칸을 띄워줘야 문법이 제대로 작동한다.\n    print(\"매우 나쁨\") \nelif dust > 100:\n    print(\"나쁨\")\nelse:\n    print(\"적당함\")\n```\n\n\n\n## range\n\n```python\n#인수 1개 - 시작 숫자를 지정해 주지 않으면 range 함수는 0부터 시작한다.\nlist(range(5))\n[0, 1, 2, 3, 4]\n\n# 인수 2개 - 입력으로 주어지는 2개의 인수는 시작 숫자와 끝 숫자를 나타낸다.\n# 단, 끝 숫자는 해당 범위에 포함되지 않는다는 것에 주의하자.\nlist(range(5, 10))\n[5, 6, 7, 8, 9]\n\n# 인수 3개 - 세 번째 인수는 숫자 사이의 간격을 말한다.\nrange(1, 10, 3)\n[1, 4, 7]\n\nrange(20, 10, -2)\n[20, 18, 16, 14, 12]\n\n```\n\n\n\n## for\n\n```python\nmenus = [\"순남 시래기\", \"양자강\", \"20층...\", \"밥묵장\"]\n\n#menu 라는 변수에 menus에 있는 것을 한번씩 넣으면서 한번 순회한다.\nfor menu in menus:\n    print(menu)\n\n#i라는 변수에 0~4까지의 수를 넣으면서 한번 순회한다.\nfor i in range(4):\n    print(menus[i])\n\n    \n```\n\n> range 를 잘 사용하는 것이 후에 반복문에 큰 도움이 될 것 같다.","excerpt":"시작하기에 앞서 멀티캠퍼스 3주차 깃 특강중에 배웠던 파이썬을 정리해보자.  정말 간단하게 배우고 있는 중이라 매우 기본적인 내용이 많다. String 문자열을 출력할때는 음수도 사용가능하다. -1이면 뒤부터 시작! List와 Dictionary…","fields":{"slug":"/python-post-01/"},"frontmatter":{"date":"Dec 19, 2019","title":"파이썬 정리 -01","tags":["python","TIL"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 시작하기에 앞서\n\n깃 상태와 취소 그리고 Stash에 대해 알아보자.\n\n\n\n# Git status & undoing\n\n### git commit\n\n```bash\n#gogo.txt 를 생성하고 add하지 않고 commit 한 경우 \n$ git commit\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nUntracked files:\n        gogo.txt\n\nnothing added to commit but untracked files present\n#gogo.txt를 해결해야함 해결한 후\n$ git commit\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nnothing to commit, working tree clean\n```\n\n### git status\n\n1. add 한 이전\n\n```bash\n$ git status\nOn branch master\nYour branch is up to date with 'origin/master'.\n\n#add를 하지 않고 생성만 한 후 status 를 본 상황.\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        gogo.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n```\n\n2. add 한 이후\n\n```bash\n$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n  (use \"git push\" to publish your local commits)\n\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n        new file:   gogo.txt\n```\n\n### commit 메시지 작성하기 (메시지 없이 commit 한 경우)\n\n```bash\n$ git commit\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# On branch master\n# Your branch is ahead of 'origin/master' by 1 commit.\n#   (use \"git push\" to publish your local commits)\n#\n# Changes to be committed:\n#       new file:   gogo.txt\n#빔 상황에 빠졌다!\n\n```\n\n* 편집(입력모드) :  단축키 `I`\n  * 문서 편집이 가능\n* 명령 모드 : `esc`\n  * `dd` : 라인삭제\n  * `wq`: 저장 및 종료 (`w:write` 저장 `q:quit` 종료)\n  * `q!` 강제 종료 (`q:quit`종료 `!`강제)\n\n> vim adventure 라는 게임을 통해 vim 을 학습 할수 있다. 시간이 나면 해보자\n>\n> [고고](https://vim-adventures.com/)\n\n\n\n### log\n\n> 커밋은 해시 값에 의해서 구분된다.\n>\n> (commit 옆의 값)\n\n```bash\n$ git log\ncommit 75767bea66848e61476fb098e1833d80449ee1cb (HEAD -> master)\nAuthor: choihwan2 <choihwan2@naver.com>\nDate:   Wed Dec 18 09:40:03 2019 +0900\n\n    Add a. txt\n\n    * a.txt 내용 추가\n    * blahblah\n#~~~밑에 줄줄줄\n\n$ git log -1\ncommit 75767bea66848e61476fb098e1833d80449ee1cb (HEAD -> master)\nAuthor: choihwan2 <choihwan2@naver.com>\nDate:   Wed Dec 18 09:40:03 2019 +0900\n\n    Add a. txt\n\n    * a.txt 내용 추가\n    * blahblah\n    \n$ git log -1 --oneline\n75767be (HEAD -> master) Add a. txt\n\n\n```\n\n> 좋은 commit 메시지를 위해 언제나 노력하자 다양한 회사 기술블로그를 참고하는게 좋음.\n>\n> [참고링크](https://meetup.toast.com/posts/106)\n\n### commit undoing\n\n\n\n1. 커밋 메시지 수정\n\n```bash\n$ git commit --amend\nAdd a. txt\n\n* a.txt 내용 추가\n* blahblah\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# Date:      Wed Dec 18 09:40:03 2019 +0900\n#\n# On branch master\n# Your branch is ahead of 'origin/master' by 2 commits.\n#   (use \"git push\" to publish your local commits)\n#\n# Changes to be committed:\n#       new file:   gogo.txt\n#\n# Changes not staged for commit:\n#       modified:   Git status & undoing.md\n#\n\n```\n\n커밋 메시지 수정하는 경우 해시값이 변경되므로, 다른 이력으로 관리가 된다.\n\n**따라서, 공개된 저장소[원격저장소]에 이미 push 한 경우 절대 수정해서는 안된다.**\n\n> commit 을 역사라고 생각하고 역사를 바꾸려는 시도는 가능하면 하지말자.\n\n2. 특정 파일 추가하기\n   * `c.txt` 파일을 같이 커밋하려고 했는데 `add` 를 하지 않고 커밋 해버린 경우.\n\n```bash\n$ git add c.txxt\n$ git commit --amend\n# add하지 않았던 c.txt를 add하고 commit --amend 로 시점을 돌려서 commit 을 한다고 생각.\n```\n\n\n\n### Staging area\n\n1. 커밋 이력이 있는 파일 수정 하는 경우\n\n```bash\n$ git status\nOn branch master\n#변경 사항인데 staging은 아닌 상황.\nYour branch is ahead of 'origin/master' by 3 commits.\n  (use \"git push\" to publish your local commits)\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   a.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ git add a.txt\n# git add로 staging에 올림.\n$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 3 commits.\n  (use \"git push\" to publish your local commits)\n\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n        modified:   a.txt\n\n\n\n```\n\n\n\n### add 취소하기\n\n```bash\n$ git restore --staged <file>\n# 다시 내려와!!\n\n$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 3 commits.\n  (use \"git push\" to publish your local commits)\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   a.txt\n# 내려왔음 ㅠㅠ..\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n* 구 버전의 git 에서는 아래의 명령어를 사용해야 한다.\n\n  ```bash\n  $ git reset HEAD <file>\n  ```\n\n\n\n### WD 변화 삭제하기(되돌리기)\n\n> git에서는 모든 commit 시점으로 되돌릴 수는 있다.\n>\n> 다만 WD 삭제하는 것은 되돌릴 수가 없다. \n\n```bash\n$ git status\n#지워진 파일 확인\n$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 3 commits.\n  (use \"git push\" to publish your local commits)\n\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        deleted:    .gitignore\n        modified:   Git status & undoing.md\n        deleted:    a.txt\n        deleted:    b.txt\n        deleted:    c.txt\n$ git resotre <file>\n# 지워진 파일을 돌아가자. 혹은 그 시점으로 돌아간다\n```\n\n* 구버전 git 에서는 아래의 명령어를 사용해야 한다.\n\n  ```bash\n  $ git checkout -- <file>\n  # 과거에 친구와 함께 팀플할때는 이거 썼었는데..\n  ```\n\n\n\n-----\n\n\n\n# Stash\n\n> 변경사항을 임시로 저장 해놓는 공간.\n\n```\n1. feature branch에서 a.txt 변경 및 커밋\n2. master branch에서 a.txt 수정 (add commit 상태)\n3. merge \n```\n\n\n\nstash 저장\n\n```bash\n\n$ git stash\nSaved working directory and index state WIP on master: c489627 Update:Git status.md\n```\n\n\n\nstash 목록\n\n```bash\n$ git stash list\nstash@{0}: WIP on master: c489627 Update:Git status.md\n```\n\n\n\n### 해결\n\n```bash\n$ git stash # 임시 공간 저장\n$ git merge feature # 병합\n$ git stash pop # 임시 공간에서 병합.\n\n# 충돌 발생, 해결 후 작업 이어가기\n```\n\n\n\n## Reset vs Revert\n\n>  공개된 저장소[원격 저장소]에 push 된 이력은 절대 reset 하지 않는다.\n>\n> 혼자 하던 일을 지워버리고 잊어버리는건 가능하지만. 팀으로 할 경우 충돌이 일어난다.\n\n```bash\n$ git reset [해시코드]\n```\n\n* `기본 [--mixed]`: 이후 변경 사항을 WD에 위치시켜줌\n* `--hard `: 이후 변경 사항이 모두 삭제함.**주의**\n* `--sort`: 지금 작업하고 있는 내용(WD) 및 변경 사항을 WD에 유지시켜줌.\n\n\n\n### Revert\n\n> 해당 커밋 으로 되돌렸다는 이력 (rever commit)을 남긴다. 즉, 다른 사람과의 작업에 방해가 적어진다. 지금까지 해왔던 것 위에 새로운 commit 을 생성하는 것이니\n\n```bash\n$ git revert [해시코드]\n```\n\n* vim -> 커밋 메시지 작성\n\n\n\n## 후에 찾아보기\n\n* github student pack\n* jetbrains 학생 - IDE(통합개발환경)\n* notion student\n\n","excerpt":"시작하기에 앞서 깃 상태와 취소 그리고 Stash에 대해 알아보자. Git status & undoing git commit git status add 한 이전 add 한 이후 commit 메시지 작성하기 (메시지 없이 commit…","fields":{"slug":"/git-post-03/"},"frontmatter":{"date":"Dec 18, 2019","title":"깃 정리 -03","tags":["git","TIL"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 시작하기에 앞서\n\n저번 깃 정리의 이어서 이번엔 Git을 좀 더 효율적으로 관리하는 git flow 에 대해 알아보고 다양한 상황에서의 해결을 보여주고자 한다.\n\n## [Git flow](https://drive.google.com/open?id=1bkvYHMN2Rz8b0GZNw7GY5-flTOKF8pZj)\n\n\n\n### 상황 1. fast-foward\n\n> fast-foward는 feature 브랜치 생성된 이후 master 브랜치에 변경 사항이 없는 상황\n\n1. feature/test branch 생성 및 이동\n\n   ```bash\n   $ git checkout -b feature/test\n   Switched to a new branch 'feature/test'\n   \n   (feature/test) $\n   ```\n\n   \n\n2. 작업 완료 후 commit\n\n   ```bash\n   $ touch test.txt\n   $ git add text.txt\n   $ git commit -m \"Complete test\"\n   \n   [feature/test c6a0e86] Complete test\n    1 file changed, 0 insertions(+), 0 deletions(-)\n    create mode 100644 test.txt\n   \n   ```\n\n   \n\n3. master 이동\n\n   ```bash\n   $ git checkout master\n   Switched to branch 'master'\n   \n   ```\n\n   \n\n4. master에 병합\n\n   ```bash\n   (master) $ git merge feature/test\n   Updating c08aa0a..c6a0e86\n   Fast-forward\n    test.txt | 0\n    1 file changed, 0 insertions(+), 0 deletions(-)\n    create mode 100644 test.txt\n   ```\n\n   \n\n5. 결과 -> fast-foward (단순히 HEAD를 이동)\n\n6. branch 삭제\n\n------\n\n### 상황 2. merge commit\n\n> 서로 다른 이력(commit)을 병합(merge)하는 과정에서 다른 파일이 수정되어 있는 상황\n>\n> git이 auto merging을 진행하고, commit이 발생된다.\n\n1. feature/signout branch 생성 및 이동\n\n   ```bash\n   $ git checkout -b feature/signout\n   Switched to a new branch 'feature/signout'\n   ```\n\n2. 작업 완료 후 commit\n\n   ```bash\n   $ git add signout\n   $ git commit -m \"Add:signout\"\n   [feature/signout 1c3facd] Add:signout\n    1 file changed, 0 insertions(+), 0 deletions(-)\n    create mode 100644 signout\n   $ git checkout master\n   Switched to branch 'master'\n   (master)\n   $ git log --oneline\n   1c3facd (HEAD -> feature/signout) Add:signout\n   c6a0e86 (master) Complete test\n   c08aa0a Add:aaa.txt\n   fe93429 Add README.MD\n   ```\n   \n3. master 이동\n\n   ```bash\n   $ git checkout master\n   Switched to branch 'master'\n   $ git log --oneline\n   c6a0e86 (HEAD -> master) Complete test\n   c08aa0a Add:aaa.txt\n   fe93429 Add README.MD\n   ```\n\n4. *master에 추가 commit 이 발생시키기!!*\n\n   - **다른 파일을 수정 혹은 생성하세요!**\n\n   ```bash\n   $ touch hotfix.txt\n   $ git add .\n   $ git commit -m \"hotfix on master\"\n   [master 28d7a84] hotfix on master\n    1 file changed, 0 insertions(+), 0 deletions(-)\n    create mode 100644 hotfix.txt\n    \n   $ git log --oneline\n   28d7a84 (HEAD -> master) hotfix on master\n   c6a0e86 Complete test\n   c08aa0a Add:aaa.txt\n   fe93429 Add README.MD\n   ```\n   \n5. master에 병합\n\n   ```bash\n   (master) $ git merge feature/signout\n   ```\n   \n6. 결과 -> 자동으로 *merge commit 발생*\n\n   - vim 편집기 화면이 나타납니다.\n   - 자동으로 작성된 커밋 메시지를 확인하고, `esc`를 누른 후 `:wq`를 입력하여 저장 및 종료를 합니다.\n     - `w` : write\n     - `q` : quit\n   - 커밋이 확인 해봅시다.\n\n   ```bash\n   $ git merge feature/signout\n   Merge made by the 'recursive' strategy.\n    signout | 0\n    1 file changed, 0 insertions(+), 0 deletions(-)\n    create mode 100644 signout\n   ```\n\n   \n\n7. 그래프 확인하기\n\n   ```bash\n   $ git log --oneline\n   5b87e65 (HEAD -> master) Merge branch 'feature/signout'\n   28d7a84 hotfix on master\n   1c3facd (feature/signout) Add:signout\n   c6a0e86 Complete test\n   c08aa0a Add:aaa.txt\n   fe93429 Add README.MD\n   ```\n\n   \n\n8. branch 삭제\n\n------\n\n### 상황 3. merge commit 충돌\n\n> 서로 다른 이력(commit)을 병합(merge)하는 과정에서 동일 파일이 수정되어 있는 상황\n>\n> git이 auto merging을 하지 못하고, 해당 파일의 위치에 라벨링을 해준다.\n>\n> 원하는 형태의 코드로 직접 수정을 하고 merge commit을 발생 시켜야 한다.\n\n1. feature/board branch 생성 및 이동\n\n   ```bash\n   $ git checkout -b feature/board\n   ```\n\n   \n\n2. 작업 완료 후 commit\n\n   ```bash\n   (board) $ touch board.html\n   # README.md 수정\n   $ git add .\n   $ git commit -m \"Complete board & update README.md\"\n   \n   $ git log --oneline\n   5b87e65 (HEAD -> feature/board, master) Merge branch 'feature/signout'\n   28d7a84 hotfix on master\n   1c3facd Add:signout\n   c6a0e86 Complete test\n   c08aa0a Add:aaa.txt\n   fe93429 Add README.MD\n   ```\n\n   \n\n3. master 이동\n\n   ```bash\n   $ git checkout master\n   ```\n\n   \n\n4. *master에 추가 commit 이 발생시키기!!*\n\n   ```bash\n   $ git add .\n   $ git commit -m \"add:board and board branch\"\n   ```\n\n   \n\n   - **동일 파일을 수정 혹은 생성하세요!**\n\n   README.md 파일 수정\n\n5. master에 병합\n\n   ```bash\n   $ git merge feature/boarding\n   Auto-merging README.md\n   CONFLICT (content): Merge conflict in README.md\n   Automatic merge failed; fix conflicts and then commit the result\n   \n   (master|MERGING)\n   ```\n\n   \n\n6. 결과 -> *merge conflict발생*\n\n7. 충돌 확인 및 해결\n\n   `visual code` 에서 확인후에 고쳐나감.\n\n8. merge commit 진행\n\n   ```\n   $ git commit\n   ```\n\n   - vim 편집기 화면이 나타납니다.\n\n   ```bash\n   Merge branch 'feature/boarding'\n   \n   # Conflicts:\n   #       README.md\n   #\n   # It looks like you may be committing a merge.\n   # If this is not correct, please remove the file\n   #       .git/MERGE_HEAD\n   # and try again.\n   \n   \n   # Please enter the commit message for your changes. Lines starting\n   # with '#' will be ignored, and an empty message aborts the commit.\n   #\n   # On branch master\n   # All conflicts fixed but you are still merging.\n   #\n   # Changes to be committed:\n   #       modified:   README.md\n   #       new file:   boarding.html\n   #\n   ~\n   ```\n\n   \n\n   - 자동으로 작성된 커밋 메시지를 확인하고, `esc`를 누른 후 `:wq`를 입력하여 저장 및 종료를 합니다.\n     - `w` : write\n     - `q` : quit\n   - 커밋이 확인 해봅시다.\n\n   ```bash\n   [master d8b8c95] Merge branch 'feature/boarding'\n   ```\n\n   \n\n9. 그래프 확인하기\n\n   ```bash\n   $ git log --oneline\n   d8b8c95 (HEAD -> master) Merge branch 'feature/boarding'\n   3bcec90 Update:README.md\n   3c365ef (feature/boarding) update:README.md\n   3275a17 Complete boarding\n   48b58ea add:board\n   dbc3d10 add:board and board branch\n   5b87e65 Merge branch 'feature/signout'\n   28d7a84 hotfix on master\n   1c3facd Add:signout\n   c6a0e86 Complete test\n   c08aa0a Add:aaa.txt\n   fe93429 Add README.MD\n   ```\n\n   중간에 이것저것 하느라 조금 지저분하다.\n\n10. branch 삭제\n\n","excerpt":"시작하기에 앞서 저번 깃 정리의 이어서 이번엔 Git을 좀 더 효율적으로 관리하는 git flow 에 대해 알아보고 다양한 상황에서의 해결을 보여주고자 한다. Git flow 상황 1. fast-foward fast-foward는 feature…","fields":{"slug":"/git-post-02/"},"frontmatter":{"date":"Dec 18, 2019","title":"깃 정리 -02","tags":["git","TIL"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 시작하기에 앞서\n\n멀티캠퍼스 수업에서의 3주차에서 3일간에 걸친 Git 강의가 끝이 났다. 이것저것 배우면서 배웠던 것을 한 곳에 모아 포스트 형식으로 올려놓은 것이다. 대략적으로 깃의 기초, 원격저장소 설정,  .gitignore에 대해 알아보자.\n\n\n\n# Git 기초\n\n## 0. 준비 사항\n\n* [git bash](https://gitforwindows.org/)\n  * git을 활용하기 위한 CLI(command Line interface)를 제공한다\n  * source, tree, github desktop 등을 통해 GUI 환경에서도 활용 가능하다.\n\n\n## 1. 로컬 저장소 활용하기\n\n\n### 1. 저장소 초기화\n\n```bash\n$ git init\ninitialized existing Git repository in C:/Users/student/Desktop/git_tutorial/.git/\n```\n\n* 저장소(repository)를 초기화 하게 되면 .git 폴더가 해당 디렉토리에 생성된다.\n* bush 창에서는 (master) 라고 표기된다.\n  * 현재 브랜치가 master라는 것을 의미한다.\n\n### 2. add ~staging area\n\n> git으로 관리되는 파일들은 Working directory(작업 환경), Staging Area, commit 단계를 거쳐 이력에 저장된다.\n\n```bash\n$ git add a.txt #파일명\n$ git add images #폴더명\n$ git add . #현재 디렉토리의 모든파일 및 폴더\n```\n\n* add 후 상태\n\n```bash\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n        new file:   b.txt\n```\n\n### 3. commit\n\n> 커밋은 코드의 이력을 남기는 과정이다.\n\n```bash\n$ git commit -m \"add:b.txt\"\n[master 46b3223] add:b.txt\n 1 file changed, 1 insertion(+)\n create mode 100644 b.txt\n\n```\n\n* 커밋 메시지는 항상 해당 이력에 대한 정보를 담을 수 있도록 작성하는 것이 좋다.\n\n* 일관적인 커밋 메시지를 작성하는 습관을 들이자\n\n* 이력 확인을 위해서는 아래의 명령어를 활용한다.\n\n  ```bash\n  $ git log\n  commit 46b32233afb1f111445cd3d2bbf586ae2e2725d8 (HEAD -> master)\n  Author: choihwan2 <choihwan2@naver.com>\n  Date:   Mon Dec 16 14:23:38 2019 +0900\n  \n      add:b.txt\n  \n  commit d5e516b29033aad088fe91bdead201ffd7c38eb7\n  Author: choihwan2 <choihwan2@naver.com>\n  Date:   Mon Dec 16 11:41:25 2019 +0900\n  \n      Fix:a.txt\n  \n  commit 76a5998098344000b84b2517e9104e507fcf3681\n  Author: choihwan2 <choihwan2@naver.com>\n  Date:   Mon Dec 16 11:30:19 2019 +0900\n  \n      Add: a.txt\n  \n  ```\n\n  **항상 status 명령어를 통해 git의 상태를 확인하자! commit 이후에는 log 명령어를 통해 이력들을 확인하자**\n\n\n\n-----\n\n\n\n## 원격 저장소 활용하기\n\n> 원격 저장소(remote repository)를 제공하는 서비스는 다양하게 존재한다.\n>\n> github을 기준으로 설명한다.\n\n## 0. 준비하기\n\n* Github에서 저장소(repository) 생성\n\n### 1. 원격 저장소 설정\n\n```bash\n$ git remote add origin {github url}\n```\n\n* {github url} 부분에는 원격 저장소 url을 작성한다.\n* 원격 저장소(remote)로 {github url}  을 orgin 이라는 이름으로 추가(add)하는 명령어이다.\n* 원격 저장소 목록을 보기 위해서는 아래의 명령어를 활용한다.\n\n```bash\n$ git remote -v\norigin  https://github.com/choihwan2/TR.git (fetch)\norigin  https://github.com/choihwan2/TR.git (push)\n```\n\n### 2. push\n\n```bash\n$ git push origin master\n\nEnumerating objects: 4, done.\nCounting objects: 100% (4/4), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 2.44 KiB | 2.44 MiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/choihwan2/TR.git\n   46b3223..3c6588e  master -> master\n```\n\n* 설정된 원격 저장소(origin) 으로 push!\n\n폴더의 내용을 수정 및 삭제, 생성 등을 하게 된다면 add comit push 명령어를 통해서 이력을 저장하고 push 명령어를 통해 업로드를 한다.\n\n\n\n## 3. git commit -am\n\n```bash\n$ git commit -am \"update skill sets\"\n\n```\n\n`add`와 `commit` 이 한번에 가능하게 해주는 명령어 입니다. 그동안의 기록들이 올라가지만 깃헙에서는 최신의 기록만 보여줍니다.\n\n> 혹시라도 vim 에 빠지게 된다면`ESC + : wq` : 빔 탈출! 후에 깃 상태의 포스트에서 빔에 대해서도 간략하게 설명해 놓았다.\n\n\n\n-----\n\n\n\n## Gitignore\n\n> Git 을 통한 프로젝트 시작시 반드시 설정하자!\n\n### 활용법\n\n```java\n*.xlss # 확장자가 xlss인 파일\n  test/ # text 폴더\n  a.txt # 특정파일\n```\n\n보통 `.gitignore` 에 등ㅇ록 되는 파일은 iDE(이클립스)설정과 관련된 내용 혹은 프로그래밍 언어별 임시 파일, 윈도우 등 OS 관련 파일을 등록한다. (프로젝트 소스코드와 무관)\n\n잘 모르는 경우 해당 환경을 [gitignore.io](http://gitignore.io/) 에서 검색하며 설정하자.\n\n예) `eclipse`, `java`, `windows...`\n\n\n","excerpt":"시작하기에 앞서 멀티캠퍼스 수업에서의 3주차에서 3일간에 걸친 Git 강의가 끝이 났다. 이것저것 배우면서 배웠던 것을 한 곳에 모아 포스트 형식으로 올려놓은 것이다. 대략적으로 깃의 기초, 원격저장소 설정,  .gitignore…","fields":{"slug":"/git-post-01/"},"frontmatter":{"date":"Dec 18, 2019","title":"깃 정리 -01","tags":["git","TIL"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 첫 시작\n\n멀티캠퍼스 3주째 깃헙 특강을 오신 선생님께서 깃허브 블로그 만들기를 알려 주셨다. 처음에는 bootstrap 으로 간단하게 포트폴리오를 만들어보고 후에 원한다면 jekyll 과 Gatsby 두개를 소개해주셨다. 과거에 jekyll 를 이용해서 블로그를 만들다 포기했던 기억이 있어서 이번엔 Gatsby로 도전해 봤다.\n\n\n\n가장 기초적인 것부터 하나하나 만들어가는 것은 너무 무리일 것 같아 검색하다 좋은 설명글과 테마가 있어서 가져와 사용해보았다.  [참고](https://junhobaik.github.io/create-gatsby-blog/)\n\n완전 처음 해보는 것이라서 꽤 시간을 소비했는데.. 가장 크게 막혔던 것은 과거에 jekyll 을 사용할 때도 그랬지만 cmd창에서 무언가 설치를 상당히 많이하면서 진행하다보니 이게 내가 잘 하고 있는건지.. 아니면 잘못하고 있는지 알기 힘들뿐 아니라 실행을 해서 안될 경우 어디서 문제가 있는지 참 찾기 어렵기 때문인 것 같다. 내가 가장 크게 실수한것은 바로.. 설명글에 있던 기술스택(?)이라고 설명해 놓으신 곳에 있는 것들을 설치를 하지않아서 였던 것 같다. 그래서 다른 쓸데없는걸 너무 많이 설치해버린..\n\n하여튼 결국 많은 설치과.. 엄청 많은 시간을 쓴건 아니지만 적당한 시간 소비로 깔끔하게 블로그를 가져와 사용할 수 있게 되었다! \n\n이제 앞으로 많은 수정을 통해서 내것으로 바꿔가려고 노력하겠지만.. 일단 과거에 했던것 처럼 댓글기능과 포스트들을 추가해볼 예정이다. 일단 상당 메뉴 부분도 왼쪽으로 바꿔보고 싶은데.. 시간이 꽤 걸릴것 같다. 마지막으로 훌륭한 테마를 만들어주신 [Junho Baik](https://junhobaik.github.io/)님께 감사드리며.. 마치겠다.\n\n","excerpt":"첫 시작 멀티캠퍼스 3주째 깃헙 특강을 오신 선생님께서 깃허브 블로그 만들기를 알려 주셨다. 처음에는 bootstrap 으로 간단하게 포트폴리오를 만들어보고 후에 원한다면 jekyll 과 Gatsby 두개를 소개해주셨다. 과거에 jekyll…","fields":{"slug":"/first-blog/"},"frontmatter":{"date":"Dec 17, 2019","title":"첫 블로그 생성기","tags":["blog"],"update":"Jan 01, 0001"}}}]}},"pageContext":{}}}