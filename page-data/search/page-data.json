{"componentChunkName":"component---src-pages-search-js","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\r\n## 시작하기에 앞서\r\n\r\n파이썬에서 웹 크롤링하는 것에 대한 정리이다. `bs4` `flask` `jinja` 등 다양한 라이브러리를 사용하면서 진행해보았다.\r\n\r\n\r\n\r\n# requests\r\n\r\n* URL에 요청을 보내고 그에 맞는 응답을 해석하고 크롤링 해보았다.\r\n\r\n```python\r\n'''\r\n1. request > naver.com\r\n2. response > bs4\r\n3. webbroser\r\n\r\n'''\r\nimport requests\r\nfrom bs4 import BeautifulSoup as bs\r\nimport webbrowser\r\n\r\nurl = \"https://www.naver.com\"\r\nrequests.get(url)\r\nresponse = requests.get(url).text\r\n\r\n#\"html.parser\" : 받아올 형식을 의미함. \r\ndoc = bs(response, 'html.parser')\r\n\r\n# . > class\r\n# # > id\r\n# result = doc.select_one(\".ah_k\")\r\n\r\n#\".ah_k\"로 끝나는 클래스에서의 값을 리스트 형태로 모조리 받아온다. 하나 받으려면 select_one\r\nresult = doc.select(\".ah_k\")\r\n\r\nsearch_url = \"https://search.naver.com/search.naver?query=\"\r\nfor i in range(5): \r\n    # 실시간 검색어 다섯개를 받아. 새로운 브라우저를 띄워보았다.\r\n    webbrowser.open(search_url + result[i].text)\r\n    # print(result[i].text)\r\n\r\n```\r\n\r\n\r\n\r\n## flask\r\n\r\n* 이번에는 요청이 왔을 때 그것에 맞는 응답을 보여주는 것이다.\r\n\r\n   flask 라이브러리를 사용해서 간단하게 서버를 구성해보았다.\r\n\r\n**app.py**\r\n\r\n```python\r\nfrom flask import Flask, render_template, request\r\nimport random\r\nimport datetime\r\n\r\napp = Flask(__name__) \r\n#서버의 이름을 app으로 하겠다.\r\n#파일이름도 똑같게 app으로 하면 명령어 flask run으로 만으로도 동작가능하다.\r\n\r\n\r\n#url을 관리해주는 친구 > @시작하는 @app.route(\"/\")\r\n\r\n\r\n@app.route(\"/\")\r\ndef hello():\r\n    return \"안녕!!\"\r\n\r\n@app.route(\"/dday\")\r\ndef dday():\r\n    today = datetime.datetime.now()\r\n    final = datetime.datetime(2020, 6, 9)\r\n    result = final - today\r\n    #f 문자열 포맷방법 파이썬에서 매우 유용하게 쓰이는것 같다.\r\n    #리턴값은 무엇무엇 오는지는 모르겠지만 string 타입이여야 하는것 같다.\r\n    return f\"힘을 내야 하는 날이 {result.days}일 남았습니다.\"\r\n\r\n@app.route(\"/lotto\")\r\ndef lotto():\r\n    numbers = random.sample(range(1,46), 6)\r\n    return f\"{numbers}\"\r\n\r\n##오늘이 크리스마스인지 알려준다!\r\n@app.route(\"/christmas\")\r\ndef christmas():\r\n    now = datetime.date.today()\r\n    today = datetime.datetime.now()\r\n\r\n    print(today.date().strftime(\"%y년 %m월 %d일\"))\r\n    if now.month == 12 and now.day == 25:\r\n        return \"크리스마스에요!\"\r\n    else :\r\n        return \"<h1>아니에요 열심히 기다려봐요<h1>\"\r\n\r\n@app.route(\"/movies\")\r\ndef movies():\r\n    movies = [\"겨울왕국2\", \"클라우스\", \"어바웃 타임\", \"나홀로 집에2\", \"이터널선샤인\", \"반지의 제왕\"]\r\n    return render_template(\"movie.html\", movies = movies) \r\n##앞 movies가 html 쪽 movies 뒤에는 어떤 리스트를 보낼지.\r\n\r\n\r\n@app.route(\"/greeting/<name>\")\r\ndef greeting(name):\r\n    return f\"안녕하세요 {name}님!\"\r\n\r\n@app.route(\"/cube/<int:num>\")\r\ndef cube(num):\r\n    result = num ** 3\r\n    return str(result)\r\n\r\n'''\r\ndef render_template(str, **args) :\r\n    *이 있으면 파이썬에서는 가변적인 개수가 들어가도 상관없다.\r\n'''\r\n\r\n\r\n# 식사 메뉴 추천.\r\n# 1. random\r\n# 2. Dynamic route: @app.route(\"/lunch/1 2 3 4\")\r\n# - 숫자를 받아서 명수 개수 만큼 \r\n# - List : 자장면, 짬뽕, 오므라이스, 볶음밥, 고추잡채, 탕수육, 돈까스, \r\n# - <int:num> 숫자 만큼 뽑기\r\n\r\n@app.route(\"/lunch/<int:num>\")\r\ndef lunch(num):\r\n    lunches = [\"자장면\", \"짬뽕\", \"오므라이스\", \"볶음밥\", \"고추잡채\", \"탕수육\", \"돈까스\"]\r\n    #리스트 자체를 넣어줘서 랜덤으로 뽑아줄 수도 있다. 중복허용X\r\n    #중복을 허용하고 싶으면 choice로 뽑아주자.\r\n    lunch = random.sample(lunches,num)\r\n    return render_template(\"lunch.html\", lunches = lunches,people = num, pick_lunch = lunch)\r\n\r\n#render_template(\"lunch.html\", lunches = lunces)에서 먼저 폴더안에 templates라는 폴더안에\r\n#\"lunch.html\" 라는 파일이 있어야한다. 그리고 jinja 라이브러리로 아래의 html에 lunches에 py안의 lunches를 보내준다.\r\n\r\n\r\n\r\n#실행시 debug모드로 들어가 실시간 변화를 감지하게 도와준다.\r\nif __name__ == \"__main__\":\r\n    app.run(debug=True)\r\n```\r\n\r\n**lunch.html**\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"ko\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>점심 메뉴</title>\r\n</head>\r\n<body>\r\n    <h1>점심 메뉴 리스트</h1>\r\n    <ul>\r\n        {% for lunch in lunches %}\r\n            <li>{{lunch}}</li>\r\n        {% endfor %}\r\n    </ul>\r\n    <h1>가고자하는 인원 : {{people}}</h1>\r\n    <h1>뽑힌 점심 메뉴</h1>\r\n    {{pick_lunch}}\r\n</body>\r\n</html>\r\n```\r\n\r\n> jinja를 사용할때는 형식에 주의하자\r\n\r\n\r\n\r\n\r\n\r\n* 이번에는 웹에서 원하는 요청문을 보낸 후 그것에 맞는 웹을 만들어보자. ([vonvon](https://kr.vonvon.me/quiz/329)을 참고해서 만들어봤다.)\r\n\r\n**app.py**\r\n\r\n```python\r\n@app.route(\"/vonvon\")\r\ndef vonvon():\r\n    return render_template(\"vonvon.html\")\r\n\r\n@app.route(\"/godmademe\")\r\ndef godmademe():\r\n    #vonvon에서 보낸 \"name\"이라는 키값의 value 를 가져온다. \r\n    #여기서 request 라이브러리를 사용하는데 이름에 주의하자!\r\n    name = request.args.get(\"name\")\r\n    first_list = [\"잘생김\", \"어중간함\", \"덤벙거림\", \"착함\", \"찌질\", \"재력\", \"귀여움\"]\r\n    second_list = [\"애교\", \"힘\", \"용기\", \"지능\", \"센스\", \"식욕\", \"계획력\"]\r\n    third_list = [\"운\", \"행복\", \"긍정\", \"생기\", \"감성\", \"재수없음\", \"답답함\"]\r\n\r\n    #choice는 반환해주는 값이 string 이더라.\r\n    first = random.choice(first_list)\r\n    second = random.choice(second_list)\r\n    third = random.choice(third_list)\r\n\r\n    return render_template(\"godmademe.html\", name = name, first = first, second = second, third = third)\r\n```\r\n\r\n**vonvon.html**\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"ko\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>vonvon</title>\r\n</head>\r\n<body>\r\n    <h1> 신이 당신을 만들 때</h1>\r\n    <form action=\"/godmadeeme\">\r\n        <input type=\"text\" name=\"name\">\r\n        <input type=\"submit\">\r\n    </form>\r\n</body>\r\n</html>\r\n```\r\n\r\n> form 부분을 좀 더 공부해야겠다. 헷갈린다.\r\n\r\n**godmademe.html**\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"ko\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>신이 당신을 만들때는</title>\r\n</head>\r\n<body>\r\n    <h1>신이 <b>{{ name }}</b>을/를 만들 때...</h1>\r\n    <p> <b>{{ first }}</b>을 한 스푼~</p>\r\n    <p> <b>{{ second }}</b>도 넣어주고~</p>\r\n    <p> 그리고 <b>{{ third }}</b>도 조그....으어ㅡ아아ㅏ아ㅏㅏ</p>\r\n</body>\r\n</html>\r\n```\r\n\r\n\r\n\r\n\r\n* HTML 태그\r\n  * `ol` =순서가 있는 목록\r\n  * `ul` = 순서가 없는 목록\r\n\r\n\r\n\r\n### 참고링크\r\n\r\n* [jinja라이브러리](https://snacky.tistory.com/7)\r\n\r\n\r\n\r\n","fields":{"slug":"/python-post-02/"},"frontmatter":{"title":"파이썬 정리 -02","published":true}}},{"node":{"rawMarkdownBody":"\r\n## 시작하기에 앞서\r\n\r\n멀티캠퍼스 3주차 깃 특강중에 배웠던 파이썬을 정리해보자. \r\n\r\n정말 간단하게 배우고 있는 중이라 매우 기본적인 내용이 많다.\r\n\r\n\r\n\r\n# String\r\n\r\n```python\r\n# 1. 글자 합체\r\n\r\nname = \"happy\" + \" \" + \"hacking\"\r\n\r\n# 2. 글자 삽입\r\n\r\nfirst = \"tony\"\r\nage = 20\r\n\r\ntext = \"안녕하세요. 제 이름은 {}입니다. 나이는 {}입니다.\" .format(first, age)\r\n\r\n# 문자열을 5번째 까지 출력한다.\r\ntest_name = text[:5]\r\n# 문자열을 5번째 부터 뒤를 출력한다.\r\ntext_age = text[5:]\r\n\r\n# 문자열을 자르는데 변수를 넣어줘서 자를수 있다. 기본값은 공백 \r\ntext_split = text.split()\r\n```\r\n\r\n> 문자열을 출력할때는 음수도 사용가능하다. -1이면 뒤부터 시작!\r\n\r\n\r\n\r\n## List와 Dictionary\r\n\r\n```python\r\n# List\r\nmenus = [\"순남 시래기\", \"양자강\", \"20층...\"]\r\nphone_nums = [\"02-3441-5858\", \"02-3818-7588\", \"02-4343-9595\"]\r\n\r\n#추가하고 싶을때는 append를 사용하자!\r\n\r\n# Dictionary { key : value } Map과 비슷 하지만 key 가 중복은 안됨.\r\ndict_nums ={\r\n    \"순남 시래기\":\"02-3441-5858\",\r\n    \"양자강\" : \"02-3818-7588\",\r\n    \"20층\" : \"02-4343-9595\",\r\n}\r\n\r\nprint(dict_nums[\"순남 시래기\"]) #value 값이 나온다.\r\n\r\n```\r\n\r\n> `dictionary`는 중괄호를 사용해서 감싸준다!\r\n\r\n\r\n\r\n## if\r\n\r\n```python\r\nif dust > 150:\r\n    #앞의 네칸을 띄워줘야 문법이 제대로 작동한다.\r\n    print(\"매우 나쁨\") \r\nelif dust > 100:\r\n    print(\"나쁨\")\r\nelse:\r\n    print(\"적당함\")\r\n```\r\n\r\n\r\n\r\n## range\r\n\r\n```python\r\n#인수 1개 - 시작 숫자를 지정해 주지 않으면 range 함수는 0부터 시작한다.\r\nlist(range(5))\r\n[0, 1, 2, 3, 4]\r\n\r\n# 인수 2개 - 입력으로 주어지는 2개의 인수는 시작 숫자와 끝 숫자를 나타낸다.\r\n# 단, 끝 숫자는 해당 범위에 포함되지 않는다는 것에 주의하자.\r\nlist(range(5, 10))\r\n[5, 6, 7, 8, 9]\r\n\r\n# 인수 3개 - 세 번째 인수는 숫자 사이의 간격을 말한다.\r\nrange(1, 10, 3)\r\n[1, 4, 7]\r\n\r\nrange(20, 10, -2)\r\n[20, 18, 16, 14, 12]\r\n\r\n```\r\n\r\n\r\n\r\n## for\r\n\r\n```python\r\nmenus = [\"순남 시래기\", \"양자강\", \"20층...\", \"밥묵장\"]\r\n\r\n#menu 라는 변수에 menus에 있는 것을 한번씩 넣으면서 한번 순회한다.\r\nfor menu in menus:\r\n    print(menu)\r\n\r\n#i라는 변수에 0~4까지의 수를 넣으면서 한번 순회한다.\r\nfor i in range(4):\r\n    print(menus[i])\r\n\r\n    \r\n```\r\n\r\n> range 를 잘 사용하는 것이 후에 반복문에 큰 도움이 될 것 같다.","fields":{"slug":"/python-post-01/"},"frontmatter":{"title":"파이썬 정리 -01","published":true}}},{"node":{"rawMarkdownBody":"\r\n## 시작하기에 앞서\r\n\r\n깃 상태와 취소 그리고 Stash에 대해 알아보자.\r\n\r\n\r\n\r\n# Git status & undoing\r\n\r\n### git commit\r\n\r\n```bash\r\n#gogo.txt 를 생성하고 add하지 않고 commit 한 경우 \r\n$ git commit\r\nOn branch master\r\nYour branch is up to date with 'origin/master'.\r\n\r\nUntracked files:\r\n        gogo.txt\r\n\r\nnothing added to commit but untracked files present\r\n#gogo.txt를 해결해야함 해결한 후\r\n$ git commit\r\nOn branch master\r\nYour branch is up to date with 'origin/master'.\r\n\r\nnothing to commit, working tree clean\r\n```\r\n\r\n### git status\r\n\r\n1. add 한 이전\r\n\r\n```bash\r\n$ git status\r\nOn branch master\r\nYour branch is up to date with 'origin/master'.\r\n\r\n#add를 하지 않고 생성만 한 후 status 를 본 상황.\r\nUntracked files:\r\n  (use \"git add <file>...\" to include in what will be committed)\r\n        gogo.txt\r\n\r\nnothing added to commit but untracked files present (use \"git add\" to track)\r\n```\r\n\r\n2. add 한 이후\r\n\r\n```bash\r\n$ git status\r\nOn branch master\r\nYour branch is ahead of 'origin/master' by 1 commit.\r\n  (use \"git push\" to publish your local commits)\r\n\r\nChanges to be committed:\r\n  (use \"git restore --staged <file>...\" to unstage)\r\n        new file:   gogo.txt\r\n```\r\n\r\n### commit 메시지 작성하기 (메시지 없이 commit 한 경우)\r\n\r\n```bash\r\n$ git commit\r\n# Please enter the commit message for your changes. Lines starting\r\n# with '#' will be ignored, and an empty message aborts the commit.\r\n#\r\n# On branch master\r\n# Your branch is ahead of 'origin/master' by 1 commit.\r\n#   (use \"git push\" to publish your local commits)\r\n#\r\n# Changes to be committed:\r\n#       new file:   gogo.txt\r\n#빔 상황에 빠졌다!\r\n\r\n```\r\n\r\n* 편집(입력모드) :  단축키 `I`\r\n  * 문서 편집이 가능\r\n* 명령 모드 : `esc`\r\n  * `dd` : 라인삭제\r\n  * `wq`: 저장 및 종료 (`w:write` 저장 `q:quit` 종료)\r\n  * `q!` 강제 종료 (`q:quit`종료 `!`강제)\r\n\r\n> vim adventure 라는 게임을 통해 vim 을 학습 할수 있다. 시간이 나면 해보자\r\n>\r\n> [고고](https://vim-adventures.com/)\r\n\r\n\r\n\r\n### log\r\n\r\n> 커밋은 해시 값에 의해서 구분된다.\r\n>\r\n> (commit 옆의 값)\r\n\r\n```bash\r\n$ git log\r\ncommit 75767bea66848e61476fb098e1833d80449ee1cb (HEAD -> master)\r\nAuthor: choihwan2 <choihwan2@naver.com>\r\nDate:   Wed Dec 18 09:40:03 2019 +0900\r\n\r\n    Add a. txt\r\n\r\n    * a.txt 내용 추가\r\n    * blahblah\r\n#~~~밑에 줄줄줄\r\n\r\n$ git log -1\r\ncommit 75767bea66848e61476fb098e1833d80449ee1cb (HEAD -> master)\r\nAuthor: choihwan2 <choihwan2@naver.com>\r\nDate:   Wed Dec 18 09:40:03 2019 +0900\r\n\r\n    Add a. txt\r\n\r\n    * a.txt 내용 추가\r\n    * blahblah\r\n    \r\n$ git log -1 --oneline\r\n75767be (HEAD -> master) Add a. txt\r\n\r\n\r\n```\r\n\r\n> 좋은 commit 메시지를 위해 언제나 노력하자 다양한 회사 기술블로그를 참고하는게 좋음.\r\n>\r\n> [참고링크](https://meetup.toast.com/posts/106)\r\n\r\n### commit undoing\r\n\r\n\r\n\r\n1. 커밋 메시지 수정\r\n\r\n```bash\r\n$ git commit --amend\r\nAdd a. txt\r\n\r\n* a.txt 내용 추가\r\n* blahblah\r\n\r\n# Please enter the commit message for your changes. Lines starting\r\n# with '#' will be ignored, and an empty message aborts the commit.\r\n#\r\n# Date:      Wed Dec 18 09:40:03 2019 +0900\r\n#\r\n# On branch master\r\n# Your branch is ahead of 'origin/master' by 2 commits.\r\n#   (use \"git push\" to publish your local commits)\r\n#\r\n# Changes to be committed:\r\n#       new file:   gogo.txt\r\n#\r\n# Changes not staged for commit:\r\n#       modified:   Git status & undoing.md\r\n#\r\n\r\n```\r\n\r\n커밋 메시지 수정하는 경우 해시값이 변경되므로, 다른 이력으로 관리가 된다.\r\n\r\n**따라서, 공개된 저장소[원격저장소]에 이미 push 한 경우 절대 수정해서는 안된다.**\r\n\r\n> commit 을 역사라고 생각하고 역사를 바꾸려는 시도는 가능하면 하지말자.\r\n\r\n2. 특정 파일 추가하기\r\n   * `c.txt` 파일을 같이 커밋하려고 했는데 `add` 를 하지 않고 커밋 해버린 경우.\r\n\r\n```bash\r\n$ git add c.txxt\r\n$ git commit --amend\r\n# add하지 않았던 c.txt를 add하고 commit --amend 로 시점을 돌려서 commit 을 한다고 생각.\r\n```\r\n\r\n\r\n\r\n### Staging area\r\n\r\n1. 커밋 이력이 있는 파일 수정 하는 경우\r\n\r\n```bash\r\n$ git status\r\nOn branch master\r\n#변경 사항인데 staging은 아닌 상황.\r\nYour branch is ahead of 'origin/master' by 3 commits.\r\n  (use \"git push\" to publish your local commits)\r\n\r\nChanges not staged for commit:\r\n  (use \"git add <file>...\" to update what will be committed)\r\n  (use \"git restore <file>...\" to discard changes in working directory)\r\n        modified:   a.txt\r\n\r\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\r\n$ git add a.txt\r\n# git add로 staging에 올림.\r\n$ git status\r\nOn branch master\r\nYour branch is ahead of 'origin/master' by 3 commits.\r\n  (use \"git push\" to publish your local commits)\r\n\r\nChanges to be committed:\r\n  (use \"git restore --staged <file>...\" to unstage)\r\n        modified:   a.txt\r\n\r\n\r\n\r\n```\r\n\r\n\r\n\r\n### add 취소하기\r\n\r\n```bash\r\n$ git restore --staged <file>\r\n# 다시 내려와!!\r\n\r\n$ git status\r\nOn branch master\r\nYour branch is ahead of 'origin/master' by 3 commits.\r\n  (use \"git push\" to publish your local commits)\r\nChanges not staged for commit:\r\n  (use \"git add <file>...\" to update what will be committed)\r\n  (use \"git restore <file>...\" to discard changes in working directory)\r\n        modified:   a.txt\r\n# 내려왔음 ㅠㅠ..\r\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\r\n```\r\n\r\n* 구 버전의 git 에서는 아래의 명령어를 사용해야 한다.\r\n\r\n  ```bash\r\n  $ git reset HEAD <file>\r\n  ```\r\n\r\n\r\n\r\n### WD 변화 삭제하기(되돌리기)\r\n\r\n> git에서는 모든 commit 시점으로 되돌릴 수는 있다.\r\n>\r\n> 다만 WD 삭제하는 것은 되돌릴 수가 없다. \r\n\r\n```bash\r\n$ git status\r\n#지워진 파일 확인\r\n$ git status\r\nOn branch master\r\nYour branch is ahead of 'origin/master' by 3 commits.\r\n  (use \"git push\" to publish your local commits)\r\n\r\nChanges not staged for commit:\r\n  (use \"git add/rm <file>...\" to update what will be committed)\r\n  (use \"git restore <file>...\" to discard changes in working directory)\r\n        deleted:    .gitignore\r\n        modified:   Git status & undoing.md\r\n        deleted:    a.txt\r\n        deleted:    b.txt\r\n        deleted:    c.txt\r\n$ git resotre <file>\r\n# 지워진 파일을 돌아가자. 혹은 그 시점으로 돌아간다\r\n```\r\n\r\n* 구버전 git 에서는 아래의 명령어를 사용해야 한다.\r\n\r\n  ```bash\r\n  $ git checkout -- <file>\r\n  # 과거에 친구와 함께 팀플할때는 이거 썼었는데..\r\n  ```\r\n\r\n\r\n\r\n-----\r\n\r\n\r\n\r\n# Stash\r\n\r\n> 변경사항을 임시로 저장 해놓는 공간.\r\n\r\n```\r\n1. feature branch에서 a.txt 변경 및 커밋\r\n2. master branch에서 a.txt 수정 (add commit 상태)\r\n3. merge \r\n```\r\n\r\n\r\n\r\nstash 저장\r\n\r\n```bash\r\n\r\n$ git stash\r\nSaved working directory and index state WIP on master: c489627 Update:Git status.md\r\n```\r\n\r\n\r\n\r\nstash 목록\r\n\r\n```bash\r\n$ git stash list\r\nstash@{0}: WIP on master: c489627 Update:Git status.md\r\n```\r\n\r\n\r\n\r\n### 해결\r\n\r\n```bash\r\n$ git stash # 임시 공간 저장\r\n$ git merge feature # 병합\r\n$ git stash pop # 임시 공간에서 병합.\r\n\r\n# 충돌 발생, 해결 후 작업 이어가기\r\n```\r\n\r\n\r\n\r\n## Reset vs Revert\r\n\r\n>  공개된 저장소[원격 저장소]에 push 된 이력은 절대 reset 하지 않는다.\r\n>\r\n> 혼자 하던 일을 지워버리고 잊어버리는건 가능하지만. 팀으로 할 경우 충돌이 일어난다.\r\n\r\n```bash\r\n$ git reset [해시코드]\r\n```\r\n\r\n* `기본 [--mixed]`: 이후 변경 사항을 WD에 위치시켜줌\r\n* `--hard `: 이후 변경 사항이 모두 삭제함.**주의**\r\n* `--sort`: 지금 작업하고 있는 내용(WD) 및 변경 사항을 WD에 유지시켜줌.\r\n\r\n\r\n\r\n### Revert\r\n\r\n> 해당 커밋 으로 되돌렸다는 이력 (rever commit)을 남긴다. 즉, 다른 사람과의 작업에 방해가 적어진다. 지금까지 해왔던 것 위에 새로운 commit 을 생성하는 것이니\r\n\r\n```bash\r\n$ git revert [해시코드]\r\n```\r\n\r\n* vim -> 커밋 메시지 작성\r\n\r\n\r\n\r\n## 후에 찾아보기\r\n\r\n* github student pack\r\n* jetbrains 학생 - IDE(통합개발환경)\r\n* notion student\r\n\r\n","fields":{"slug":"/git-post-03/"},"frontmatter":{"title":"깃 정리 -03","published":true}}},{"node":{"rawMarkdownBody":"\r\n## 시작하기에 앞서\r\n\r\n저번 깃 정리의 이어서 이번엔 Git을 좀 더 효율적으로 관리하는 git flow 에 대해 알아보고 다양한 상황에서의 해결을 보여주고자 한다.\r\n\r\n## [Git flow](https://drive.google.com/open?id=1bkvYHMN2Rz8b0GZNw7GY5-flTOKF8pZj)\r\n\r\n\r\n\r\n### 상황 1. fast-foward\r\n\r\n> fast-foward는 feature 브랜치 생성된 이후 master 브랜치에 변경 사항이 없는 상황\r\n\r\n1. feature/test branch 생성 및 이동\r\n\r\n   ```bash\r\n   $ git checkout -b feature/test\r\n   Switched to a new branch 'feature/test'\r\n   \r\n   (feature/test) $\r\n   ```\r\n\r\n   \r\n\r\n2. 작업 완료 후 commit\r\n\r\n   ```bash\r\n   $ touch test.txt\r\n   $ git add text.txt\r\n   $ git commit -m \"Complete test\"\r\n   \r\n   [feature/test c6a0e86] Complete test\r\n    1 file changed, 0 insertions(+), 0 deletions(-)\r\n    create mode 100644 test.txt\r\n   \r\n   ```\r\n\r\n   \r\n\r\n3. master 이동\r\n\r\n   ```bash\r\n   $ git checkout master\r\n   Switched to branch 'master'\r\n   \r\n   ```\r\n\r\n   \r\n\r\n4. master에 병합\r\n\r\n   ```bash\r\n   (master) $ git merge feature/test\r\n   Updating c08aa0a..c6a0e86\r\n   Fast-forward\r\n    test.txt | 0\r\n    1 file changed, 0 insertions(+), 0 deletions(-)\r\n    create mode 100644 test.txt\r\n   ```\r\n\r\n   \r\n\r\n5. 결과 -> fast-foward (단순히 HEAD를 이동)\r\n\r\n6. branch 삭제\r\n\r\n------\r\n\r\n### 상황 2. merge commit\r\n\r\n> 서로 다른 이력(commit)을 병합(merge)하는 과정에서 다른 파일이 수정되어 있는 상황\r\n>\r\n> git이 auto merging을 진행하고, commit이 발생된다.\r\n\r\n1. feature/signout branch 생성 및 이동\r\n\r\n   ```bash\r\n   $ git checkout -b feature/signout\r\n   Switched to a new branch 'feature/signout'\r\n   ```\r\n\r\n2. 작업 완료 후 commit\r\n\r\n   ```bash\r\n   $ git add signout\r\n   $ git commit -m \"Add:signout\"\r\n   [feature/signout 1c3facd] Add:signout\r\n    1 file changed, 0 insertions(+), 0 deletions(-)\r\n    create mode 100644 signout\r\n   $ git checkout master\r\n   Switched to branch 'master'\r\n   (master)\r\n   $ git log --oneline\r\n   1c3facd (HEAD -> feature/signout) Add:signout\r\n   c6a0e86 (master) Complete test\r\n   c08aa0a Add:aaa.txt\r\n   fe93429 Add README.MD\r\n   ```\r\n   \r\n3. master 이동\r\n\r\n   ```bash\r\n   $ git checkout master\r\n   Switched to branch 'master'\r\n   $ git log --oneline\r\n   c6a0e86 (HEAD -> master) Complete test\r\n   c08aa0a Add:aaa.txt\r\n   fe93429 Add README.MD\r\n   ```\r\n\r\n4. *master에 추가 commit 이 발생시키기!!*\r\n\r\n   - **다른 파일을 수정 혹은 생성하세요!**\r\n\r\n   ```bash\r\n   $ touch hotfix.txt\r\n   $ git add .\r\n   $ git commit -m \"hotfix on master\"\r\n   [master 28d7a84] hotfix on master\r\n    1 file changed, 0 insertions(+), 0 deletions(-)\r\n    create mode 100644 hotfix.txt\r\n    \r\n   $ git log --oneline\r\n   28d7a84 (HEAD -> master) hotfix on master\r\n   c6a0e86 Complete test\r\n   c08aa0a Add:aaa.txt\r\n   fe93429 Add README.MD\r\n   ```\r\n   \r\n5. master에 병합\r\n\r\n   ```bash\r\n   (master) $ git merge feature/signout\r\n   ```\r\n   \r\n6. 결과 -> 자동으로 *merge commit 발생*\r\n\r\n   - vim 편집기 화면이 나타납니다.\r\n   - 자동으로 작성된 커밋 메시지를 확인하고, `esc`를 누른 후 `:wq`를 입력하여 저장 및 종료를 합니다.\r\n     - `w` : write\r\n     - `q` : quit\r\n   - 커밋이 확인 해봅시다.\r\n\r\n   ```bash\r\n   $ git merge feature/signout\r\n   Merge made by the 'recursive' strategy.\r\n    signout | 0\r\n    1 file changed, 0 insertions(+), 0 deletions(-)\r\n    create mode 100644 signout\r\n   ```\r\n\r\n   \r\n\r\n7. 그래프 확인하기\r\n\r\n   ```bash\r\n   $ git log --oneline\r\n   5b87e65 (HEAD -> master) Merge branch 'feature/signout'\r\n   28d7a84 hotfix on master\r\n   1c3facd (feature/signout) Add:signout\r\n   c6a0e86 Complete test\r\n   c08aa0a Add:aaa.txt\r\n   fe93429 Add README.MD\r\n   ```\r\n\r\n   \r\n\r\n8. branch 삭제\r\n\r\n------\r\n\r\n### 상황 3. merge commit 충돌\r\n\r\n> 서로 다른 이력(commit)을 병합(merge)하는 과정에서 동일 파일이 수정되어 있는 상황\r\n>\r\n> git이 auto merging을 하지 못하고, 해당 파일의 위치에 라벨링을 해준다.\r\n>\r\n> 원하는 형태의 코드로 직접 수정을 하고 merge commit을 발생 시켜야 한다.\r\n\r\n1. feature/board branch 생성 및 이동\r\n\r\n   ```bash\r\n   $ git checkout -b feature/board\r\n   ```\r\n\r\n   \r\n\r\n2. 작업 완료 후 commit\r\n\r\n   ```bash\r\n   (board) $ touch board.html\r\n   # README.md 수정\r\n   $ git add .\r\n   $ git commit -m \"Complete board & update README.md\"\r\n   \r\n   $ git log --oneline\r\n   5b87e65 (HEAD -> feature/board, master) Merge branch 'feature/signout'\r\n   28d7a84 hotfix on master\r\n   1c3facd Add:signout\r\n   c6a0e86 Complete test\r\n   c08aa0a Add:aaa.txt\r\n   fe93429 Add README.MD\r\n   ```\r\n\r\n   \r\n\r\n3. master 이동\r\n\r\n   ```bash\r\n   $ git checkout master\r\n   ```\r\n\r\n   \r\n\r\n4. *master에 추가 commit 이 발생시키기!!*\r\n\r\n   ```bash\r\n   $ git add .\r\n   $ git commit -m \"add:board and board branch\"\r\n   ```\r\n\r\n   \r\n\r\n   - **동일 파일을 수정 혹은 생성하세요!**\r\n\r\n   README.md 파일 수정\r\n\r\n5. master에 병합\r\n\r\n   ```bash\r\n   $ git merge feature/boarding\r\n   Auto-merging README.md\r\n   CONFLICT (content): Merge conflict in README.md\r\n   Automatic merge failed; fix conflicts and then commit the result\r\n   \r\n   (master|MERGING)\r\n   ```\r\n\r\n   \r\n\r\n6. 결과 -> *merge conflict발생*\r\n\r\n7. 충돌 확인 및 해결\r\n\r\n   `visual code` 에서 확인후에 고쳐나감.\r\n\r\n8. merge commit 진행\r\n\r\n   ```\r\n   $ git commit\r\n   ```\r\n\r\n   - vim 편집기 화면이 나타납니다.\r\n\r\n   ```bash\r\n   Merge branch 'feature/boarding'\r\n   \r\n   # Conflicts:\r\n   #       README.md\r\n   #\r\n   # It looks like you may be committing a merge.\r\n   # If this is not correct, please remove the file\r\n   #       .git/MERGE_HEAD\r\n   # and try again.\r\n   \r\n   \r\n   # Please enter the commit message for your changes. Lines starting\r\n   # with '#' will be ignored, and an empty message aborts the commit.\r\n   #\r\n   # On branch master\r\n   # All conflicts fixed but you are still merging.\r\n   #\r\n   # Changes to be committed:\r\n   #       modified:   README.md\r\n   #       new file:   boarding.html\r\n   #\r\n   ~\r\n   ```\r\n\r\n   \r\n\r\n   - 자동으로 작성된 커밋 메시지를 확인하고, `esc`를 누른 후 `:wq`를 입력하여 저장 및 종료를 합니다.\r\n     - `w` : write\r\n     - `q` : quit\r\n   - 커밋이 확인 해봅시다.\r\n\r\n   ```bash\r\n   [master d8b8c95] Merge branch 'feature/boarding'\r\n   ```\r\n\r\n   \r\n\r\n9. 그래프 확인하기\r\n\r\n   ```bash\r\n   $ git log --oneline\r\n   d8b8c95 (HEAD -> master) Merge branch 'feature/boarding'\r\n   3bcec90 Update:README.md\r\n   3c365ef (feature/boarding) update:README.md\r\n   3275a17 Complete boarding\r\n   48b58ea add:board\r\n   dbc3d10 add:board and board branch\r\n   5b87e65 Merge branch 'feature/signout'\r\n   28d7a84 hotfix on master\r\n   1c3facd Add:signout\r\n   c6a0e86 Complete test\r\n   c08aa0a Add:aaa.txt\r\n   fe93429 Add README.MD\r\n   ```\r\n\r\n   중간에 이것저것 하느라 조금 지저분하다.\r\n\r\n10. branch 삭제\r\n\r\n","fields":{"slug":"/git-post-02/"},"frontmatter":{"title":"깃 정리 -02","published":true}}},{"node":{"rawMarkdownBody":"\r\n## 시작하기에 앞서\r\n\r\n멀티캠퍼스 수업에서의 3주차에서 3일간에 걸친 Git 강의가 끝이 났다. 이것저것 배우면서 배웠던 것을 한 곳에 모아 포스트 형식으로 올려놓은 것이다. 대략적으로 깃의 기초, 원격저장소 설정,  .gitignore에 대해 알아보자.\r\n\r\n\r\n\r\n# Git 기초\r\n\r\n## 0. 준비 사항\r\n\r\n* [git bash](https://gitforwindows.org/)\r\n  * git을 활용하기 위한 CLI(command Line interface)를 제공한다\r\n  * source, tree, github desktop 등을 통해 GUI 환경에서도 활용 가능하다.\r\n\r\n\r\n## 1. 로컬 저장소 활용하기\r\n\r\n\r\n### 1. 저장소 초기화\r\n\r\n```bash\r\n$ git init\r\ninitialized existing Git repository in C:/Users/student/Desktop/git_tutorial/.git/\r\n```\r\n\r\n* 저장소(repository)를 초기화 하게 되면 .git 폴더가 해당 디렉토리에 생성된다.\r\n* bush 창에서는 (master) 라고 표기된다.\r\n  * 현재 브랜치가 master라는 것을 의미한다.\r\n\r\n### 2. add ~staging area\r\n\r\n> git으로 관리되는 파일들은 Working directory(작업 환경), Staging Area, commit 단계를 거쳐 이력에 저장된다.\r\n\r\n```bash\r\n$ git add a.txt #파일명\r\n$ git add images #폴더명\r\n$ git add . #현재 디렉토리의 모든파일 및 폴더\r\n```\r\n\r\n* add 후 상태\r\n\r\n```bash\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git restore --staged <file>...\" to unstage)\r\n        new file:   b.txt\r\n```\r\n\r\n### 3. commit\r\n\r\n> 커밋은 코드의 이력을 남기는 과정이다.\r\n\r\n```bash\r\n$ git commit -m \"add:b.txt\"\r\n[master 46b3223] add:b.txt\r\n 1 file changed, 1 insertion(+)\r\n create mode 100644 b.txt\r\n\r\n```\r\n\r\n* 커밋 메시지는 항상 해당 이력에 대한 정보를 담을 수 있도록 작성하는 것이 좋다.\r\n\r\n* 일관적인 커밋 메시지를 작성하는 습관을 들이자\r\n\r\n* 이력 확인을 위해서는 아래의 명령어를 활용한다.\r\n\r\n  ```bash\r\n  $ git log\r\n  commit 46b32233afb1f111445cd3d2bbf586ae2e2725d8 (HEAD -> master)\r\n  Author: choihwan2 <choihwan2@naver.com>\r\n  Date:   Mon Dec 16 14:23:38 2019 +0900\r\n  \r\n      add:b.txt\r\n  \r\n  commit d5e516b29033aad088fe91bdead201ffd7c38eb7\r\n  Author: choihwan2 <choihwan2@naver.com>\r\n  Date:   Mon Dec 16 11:41:25 2019 +0900\r\n  \r\n      Fix:a.txt\r\n  \r\n  commit 76a5998098344000b84b2517e9104e507fcf3681\r\n  Author: choihwan2 <choihwan2@naver.com>\r\n  Date:   Mon Dec 16 11:30:19 2019 +0900\r\n  \r\n      Add: a.txt\r\n  \r\n  ```\r\n\r\n  **항상 status 명령어를 통해 git의 상태를 확인하자! commit 이후에는 log 명령어를 통해 이력들을 확인하자**\r\n\r\n\r\n\r\n-----\r\n\r\n\r\n\r\n## 원격 저장소 활용하기\r\n\r\n> 원격 저장소(remote repository)를 제공하는 서비스는 다양하게 존재한다.\r\n>\r\n> github을 기준으로 설명한다.\r\n\r\n## 0. 준비하기\r\n\r\n* Github에서 저장소(repository) 생성\r\n\r\n### 1. 원격 저장소 설정\r\n\r\n```bash\r\n$ git remote add origin {github url}\r\n```\r\n\r\n* {github url} 부분에는 원격 저장소 url을 작성한다.\r\n* 원격 저장소(remote)로 {github url}  을 orgin 이라는 이름으로 추가(add)하는 명령어이다.\r\n* 원격 저장소 목록을 보기 위해서는 아래의 명령어를 활용한다.\r\n\r\n```bash\r\n$ git remote -v\r\norigin  https://github.com/choihwan2/TR.git (fetch)\r\norigin  https://github.com/choihwan2/TR.git (push)\r\n```\r\n\r\n### 2. push\r\n\r\n```bash\r\n$ git push origin master\r\n\r\nEnumerating objects: 4, done.\r\nCounting objects: 100% (4/4), done.\r\nDelta compression using up to 8 threads\r\nCompressing objects: 100% (3/3), done.\r\nWriting objects: 100% (3/3), 2.44 KiB | 2.44 MiB/s, done.\r\nTotal 3 (delta 0), reused 0 (delta 0)\r\nTo https://github.com/choihwan2/TR.git\r\n   46b3223..3c6588e  master -> master\r\n```\r\n\r\n* 설정된 원격 저장소(origin) 으로 push!\r\n\r\n폴더의 내용을 수정 및 삭제, 생성 등을 하게 된다면 add comit push 명령어를 통해서 이력을 저장하고 push 명령어를 통해 업로드를 한다.\r\n\r\n\r\n\r\n## 3. git commit -am\r\n\r\n```bash\r\n$ git commit -am \"update skill sets\"\r\n\r\n```\r\n\r\n`add`와 `commit` 이 한번에 가능하게 해주는 명령어 입니다. 그동안의 기록들이 올라가지만 깃헙에서는 최신의 기록만 보여줍니다.\r\n\r\n> 혹시라도 vim 에 빠지게 된다면`ESC + : wq` : 빔 탈출! 후에 깃 상태의 포스트에서 빔에 대해서도 간략하게 설명해 놓았다.\r\n\r\n\r\n\r\n-----\r\n\r\n\r\n\r\n## Gitignore\r\n\r\n> Git 을 통한 프로젝트 시작시 반드시 설정하자!\r\n\r\n### 활용법\r\n\r\n```java\r\n*.xlss # 확장자가 xlss인 파일\r\n  test/ # text 폴더\r\n  a.txt # 특정파일\r\n```\r\n\r\n보통 `.gitignore` 에 등ㅇ록 되는 파일은 iDE(이클립스)설정과 관련된 내용 혹은 프로그래밍 언어별 임시 파일, 윈도우 등 OS 관련 파일을 등록한다. (프로젝트 소스코드와 무관)\r\n\r\n잘 모르는 경우 해당 환경을 [gitignore.io](http://gitignore.io/) 에서 검색하며 설정하자.\r\n\r\n예) `eclipse`, `java`, `windows...`\r\n\r\n\r\n","fields":{"slug":"/git-post-01/"},"frontmatter":{"title":"깃 정리 -01","published":true}}},{"node":{"rawMarkdownBody":"\r\n## 첫 시작\r\n\r\n멀티캠퍼스 3주째 깃헙 특강을 오신 선생님께서 깃허브 블로그 만들기를 알려 주셨다. 처음에는 bootstrap 으로 간단하게 포트폴리오를 만들어보고 후에 원한다면 jekyll 과 Gatsby 두개를 소개해주셨다. 과거에 jekyll 를 이용해서 블로그를 만들다 포기했던 기억이 있어서 이번엔 Gatsby로 도전해 봤다.\r\n\r\n\r\n\r\n가장 기초적인 것부터 하나하나 만들어가는 것은 너무 무리일 것 같아 검색하다 좋은 설명글과 테마가 있어서 가져와 사용해보았다.  [참고](https://junhobaik.github.io/create-gatsby-blog/)\r\n\r\n완전 처음 해보는 것이라서 꽤 시간을 소비했는데.. 가장 크게 막혔던 것은 과거에 jekyll 을 사용할 때도 그랬지만 cmd창에서 무언가 설치를 상당히 많이하면서 진행하다보니 이게 내가 잘 하고 있는건지.. 아니면 잘못하고 있는지 알기 힘들뿐 아니라 실행을 해서 안될 경우 어디서 문제가 있는지 참 찾기 어렵기 때문인 것 같다. 내가 가장 크게 실수한것은 바로.. 설명글에 있던 기술스택(?)이라고 설명해 놓으신 곳에 있는 것들을 설치를 하지않아서 였던 것 같다. 그래서 다른 쓸데없는걸 너무 많이 설치해버린..\r\n\r\n하여튼 결국 많은 설치과.. 엄청 많은 시간을 쓴건 아니지만 적당한 시간 소비로 깔끔하게 블로그를 가져와 사용할 수 있게 되었다! \r\n\r\n이제 앞으로 많은 수정을 통해서 내것으로 바꿔가려고 노력하겠지만.. 일단 과거에 했던것 처럼 댓글기능과 포스트들을 추가해볼 예정이다. 일단 상당 메뉴 부분도 왼쪽으로 바꿔보고 싶은데.. 시간이 꽤 걸릴것 같다. 마지막으로 훌륭한 테마를 만들어주신 [Junho Baik](https://junhobaik.github.io/)님께 감사드리며.. 마치겠다.\r\n\r\n","fields":{"slug":"/first-blog/"},"frontmatter":{"title":"첫 블로그 생성기","published":true}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}