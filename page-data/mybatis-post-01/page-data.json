{"componentChunkName":"component---src-templates-post-tsx","path":"/mybatis-post-01/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"mybatis\" style=\"position:relative;\"><a href=\"#mybatis\" aria-label=\"mybatis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mybatis</h1>\n<h2 id=\"jdbc-에서-mybatis로\" style=\"position:relative;\"><a href=\"#jdbc-%EC%97%90%EC%84%9C-mybatis%EB%A1%9C\" aria-label=\"jdbc 에서 mybatis로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jdbc 에서 Mybatis로</h2>\n<ul>\n<li>\n<p>기존의 jdbc 구조</p>\n<p>try{ </p>\n</li>\n<li>Class.forName(\"...\")</li>\n<li>Connection c = DriverManaget.getConnection(jdbc,url,id,pw);</li>\n<li>sql - 결과</li>\n<li>c.close }</li>\n<li>catch (Exception e) {</li>\n<li>\n<p>e.print</p>\n<p>}</p>\n</li>\n</ul>\n<p>단점 : 코드 반복 많다. sql + 자바 언어가 섞인다. db 연결 복잡한 정보가 매번 작성되어야한다.</p>\n<p>해결법 : 1~2 는 한번만 가져다 쓰기 4 는 Mybatis 에게 맡기기 // sql만 빼도록해보자</p>\n<p>=> db-config.xml 파일에 연결에 관한 작성.</p>\n<p>=>sql-mapping.xml 파일에 sql 언어를 작성,</p>\n<p>위에 과정을 거치면</p>\n<ol>\n<li>xml 설정 읽어라</li>\n<li>db 연결 객체 가져옴</li>\n<li>sql 정보도 가져와서 실행 요청 - 결과</li>\n<li>출력</li>\n</ol>\n<h2 id=\"rownum\" style=\"position:relative;\"><a href=\"#rownum\" aria-label=\"rownum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rownum</h2>\n<ul>\n<li>rownum 함수 : 조회 레코드 번호</li>\n<li>> >= (단, 1 제외) 이유는 데이터를 본다음 rownum 이 매겨지기 때문.</li>\n<li>employees 테이블에서 11~20번째 데이터 조회</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> r<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> hire_date\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> rownum r<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> hire_date <span class=\"token keyword\">from</span> employees<span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> r <span class=\"token operator\">>=</span> <span class=\"token number\">11</span> <span class=\"token operator\">and</span> r <span class=\"token operator\">&lt;=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 안된다 생각해봐</span>\n\n<span class=\"token number\">3.</span> <span class=\"token keyword\">select</span> r<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> hire_date\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2.</span> <span class=\"token keyword\">select</span> rownum r<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> hire_date <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> employees <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> hire_date <span class=\"token keyword\">desc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> r <span class=\"token operator\">>=</span> <span class=\"token number\">11</span> <span class=\"token operator\">and</span> r <span class=\"token operator\">&lt;=</span><span class=\"token number\">20</span>\n<span class=\"token comment\">-- 1. 먼저 정렬을 하고 2. 그다음 생성 3. 그다음 조건을 거쳐서 보기</span></code></pre></div>","excerpt":"Mybatis jdbc 에서 Mybatis로 기존의 jdbc 구조 try{  Class.forName(\"...\") Connection c = DriverManaget.getConnection(jdbc,url,id,pw); sql - 결과 c.close…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/mybatis-post-01/#mybatis\">Mybatis</a></p>\n<ul>\n<li><a href=\"/mybatis-post-01/#jdbc-%EC%97%90%EC%84%9C-mybatis%EB%A1%9C\">jdbc 에서 Mybatis로</a></li>\n<li><a href=\"/mybatis-post-01/#rownum\">rownum</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/mybatis-post-01/"},"frontmatter":{"title":"Mybatis 정리 -01","date":"Feb 15, 2020","tags":["Mybatis","spring"],"keywords":["Happy Hwan","Hwan Choi"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/mybatis-post-01/","series":[],"lastmod":"0001-01-01"}},"staticQueryHashes":["3649515864","63159454"]}