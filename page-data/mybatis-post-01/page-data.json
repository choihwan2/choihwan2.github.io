{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/mybatis-post-01/","result":{"data":{"site":{"siteMetadata":{"title":"Happy Hwan","author":"Hwan Choi"}},"markdownRemark":{"id":"308099fb-47b7-5a78-8124-3174e1036590","html":"<h1>Mybatis</h1>\n<h2>jdbc 에서 Mybatis로</h2>\n<ul>\n<li>\n<p>기존의 jdbc 구조</p>\n<p>try{ </p>\n</li>\n<li>Class.forName(\"...\")</li>\n<li>Connection c = DriverManaget.getConnection(jdbc,url,id,pw);</li>\n<li>sql - 결과</li>\n<li>c.close }</li>\n<li>catch (Exception e) {</li>\n<li>\n<p>e.print</p>\n<p>}</p>\n</li>\n</ul>\n<p>단점 : 코드 반복 많다. sql + 자바 언어가 섞인다. db 연결 복잡한 정보가 매번 작성되어야한다.</p>\n<p>해결법 : 1~2 는 한번만 가져다 쓰기 4 는 Mybatis 에게 맡기기 // sql만 빼도록해보자</p>\n<p>=> db-config.xml 파일에 연결에 관한 작성.</p>\n<p>=>sql-mapping.xml 파일에 sql 언어를 작성,</p>\n<p>위에 과정을 거치면</p>\n<ol>\n<li>xml 설정 읽어라</li>\n<li>db 연결 객체 가져옴</li>\n<li>sql 정보도 가져와서 실행 요청 - 결과</li>\n<li>출력</li>\n</ol>\n<h2>rownum</h2>\n<ul>\n<li>rownum 함수 : 조회 레코드 번호</li>\n<li>> >= (단, 1 제외) 이유는 데이터를 본다음 rownum 이 매겨지기 때문.</li>\n<li>employees 테이블에서 11~20번째 데이터 조회</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\">\n      <pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> r<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> hire_date\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> rownum r<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> hire_date <span class=\"token keyword\">from</span> employees<span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> r <span class=\"token operator\">>=</span> <span class=\"token number\">11</span> <span class=\"token operator\">and</span> r <span class=\"token operator\">&lt;=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 안된다 생각해봐</span>\n\n<span class=\"token number\">3.</span> <span class=\"token keyword\">select</span> r<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> hire_date\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2.</span> <span class=\"token keyword\">select</span> rownum r<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> hire_date <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> employees <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> hire_date <span class=\"token keyword\">desc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> r <span class=\"token operator\">>=</span> <span class=\"token number\">11</span> <span class=\"token operator\">and</span> r <span class=\"token operator\">&lt;=</span><span class=\"token number\">20</span>\n<span class=\"token comment\">-- 1. 먼저 정렬을 하고 2. 그다음 생성 3. 그다음 조건을 거쳐서 보기</span></code></pre>\n      </div>","excerpt":"Mybatis jdbc 에서 Mybatis로 기존의 jdbc 구조 try{  Class.forName(\"...\") Connection c = DriverManaget.getConnection(jdbc,url,id,pw); sql - 결과 c.close…","frontmatter":{"title":"Mybatis 정리 -01","date":"2020-02-15","tags":["Mybatis","spring"],"keywords":["Happy Hwan"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/mybatis-post-01/","previous":{"fields":{"slug":"/spring-post-03/"},"frontmatter":{"title":"Spring 정리 -03","tags":["Spring","java"],"published":true}},"next":{"fields":{"slug":"/hadoop-post-01/"},"frontmatter":{"title":"Hadoop 정리 -01","tags":["hadoop","linux"],"published":true}}}}}