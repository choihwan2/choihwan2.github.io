{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/spring-post-01/","result":{"data":{"site":{"siteMetadata":{"title":"Happy Hwan","author":"Hwan Choi"}},"markdownRemark":{"id":"80e0186f-12f0-50ec-a505-f9512602ad36","html":"<h2>시작하기에 앞서</h2>\n<p>수업이 좀 진행되었지만 Spring 을 다시 정리하고자 글을 남긴다. 혼자 보기 용으로 쓴 글이라 매우 난잡..</p>\n<h1>spring_test</h1>\n<p>스프링 파일 정리</p>\n<ul>\n<li>Maven: 프로젝트 관리 도구(?) (하는일: 구조를 만들어준다.)</li>\n<li>class -> library(jquery) -> frame work(spring)</li>\n</ul>\n<p>Spring Bean</p>\n<ul>\n<li>Java 에서는 new 라는걸로 객체 생성</li>\n<li>Spring 에서는 bean으로 생성,</li>\n</ul>\n<h2>스프링의 특징</h2>\n<ol>\n<li>여러가지 모듈 단위별</li>\n<li>스프링 이전 개발 자바 객체 그대로 재사용 가능.</li>\n<li>POJO 클래스들도 사용 가능.</li>\n<li>다양한 데이터베이스 연결이 가능 Spring ORM or Spring Dao jdbc 등 가능하지만 우리는 mabatis 를 활용한다.</li>\n</ol>\n<h2>DI</h2>\n<ul>\n<li>\n<p>IOC (Inversion of Control) </p>\n<div class=\"gatsby-highlight\" data-language=\"java\">\n      <pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//B b1 = new B(); //일반적인 객체 생성</span>\n  <span class=\"token class-name\">B</span> b1<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">B</span> b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b1 <span class=\"token operator\">=</span> b1<span class=\"token punctuation\">;</span> <span class=\"token comment\">//외부에서 전달한 객체로 b1을 생성하는 법.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>평소에 객체를 만드는 방식으로 만드는 것이 아니라. 만들고자 하는 객체를 스프링에 전달해주면 그걸 스프링이 만들어줌. = <code class=\"language-text\">new</code>가 사라지고 스프링 대신 생성 객체 전달받는다. </p>\n</li>\n<li>\n<p>Dependency Injection (의존성 주입)</p>\n<ol>\n<li>생성자 DI</li>\n<li>setter DI</li>\n</ol>\n</li>\n</ul>\n<h2>설정</h2>\n<p>pom.xml 안의 </p>\n<p>java 버전 1.8 하고 스프링 버전을 4.3.18 로 바꾸고 Properties에서 java build path 에서 자바 버전을 바꾸고 project facets 에서도 java 버전 변경 그리고 runtimes 에서 tomcat 설정</p>\n<blockquote>\n<p>pojo : 스프링/web/일반 main 재사용이 가능한 자바 객체</p>\n<p>스프링 자바객체 = spring bean</p>\n</blockquote>\n<p>&#x3C;bean id = \"bean이름\" class=\"패키지명.클래스명\"//></p>\n<ul>\n<li>DO : Data object = value object = data transfer object 값 저장 객체</li>\n<li>DAO :  Data access object / jdbc/ io / 네트워크 값이 저장되어있는 곳에 접근해서 값을 가져오는 객체</li>\n</ul>\n<p><code class=\"language-text\">ApplicationContext</code> 는 spring 에서 factory 역활을 해준다.</p>\n<h2>스프링 내부 규칙</h2>\n<ol>\n<li>스프링 xml 안에서 같은 이름 같은 타입 객체 1개 생성 - 공유 싱글턴 방식으로 생성됨</li>\n<li>스프링 공장 생성 객체만 전달.</li>\n<li>스프링 규칙대로 강제적</li>\n</ol>\n<h2>Repository</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\">\n      <pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Repository</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dao\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmpDAO</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">EmpVO</span> vo<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setVO</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EmpVo</span> vo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vo <span class=\"token operator\">=</span> vo<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Repository</span>\t<span class=\"token comment\">//\"empDAO\" 라는 이름으로 객체가 생성됨.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmpDAO</span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Autowired</span> \t<span class=\"token comment\">//setVO라는 함수를 대체함</span>\n    <span class=\"token class-name\">EmpVO</span> vo<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Repository</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vo\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmpVO</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> salary<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>위 코드를 사용하기위해서는</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\">\n      <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n\t<span class=\"token comment\">&lt;!--@Repository, @Component, @Autowired 설정 인식 표현을 해줘야 인식함.  --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>annotaion.empspring<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\t\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>vo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>annotaion.empspring.EmpVO<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>김사원<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>salary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>10000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>deptname<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>영업부<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<h3>참고</h3>\n<ul>\n<li>ejb vs spring <a href=\"https://m.blog.naver.com/sillllver/220593543939\">링크</a></li>\n<li>Framework 책 27pg</li>\n<li>DI(Dependency Injection) - IoC (<a href=\"https://itgosu.tistory.com/10\">https://itgosu.tistory.com/10</a>) + 책 143pg</li>\n<li>AOP(Aspect Oriented Programming) - 관점지향프로그래밍 143pg</li>\n<li>POJO: plain old java object (과거부터 계속해서 쓰여왔던 java 클래스 어디에서나 쓰일수 있음. ex: class B)\nbean 27~후에 나옴.</li>\n<li>MVC - 책313pg</li>\n</ul>\n<blockquote>\n<p>스프링은 양방향 응용, 웹 ,모바일 등 다 사용가능,  타 프레임워크랑 호환이 좋음.</p>\n</blockquote>\n<ul>\n<li><a href=\"https://wizcenter.tistory.com/\">참고사이트</a></li>\n</ul>\n<blockquote>\n<p>책은 토비의 스프링 추천해주셨음.</p>\n</blockquote>","excerpt":"시작하기에 앞서 수업이 좀 진행되었지만 Spring 을 다시 정리하고자 글을 남긴다. 혼자 보기 용으로 쓴 글이라 매우 난잡.. spring_test 스프링 파일 정리 Maven: 프로젝트 관리 도구(?) (하는일: 구조를 만들어준다.) class…","frontmatter":{"title":"Spring 정리 -01","date":"2020-01-31","tags":["Spring","java"],"keywords":["Happy Hwan"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/spring-post-01/","previous":{"fields":{"slug":"/database-post-03/"},"frontmatter":{"title":"데이터베이스 정리 -03","tags":["sql","database","TIL","oracle"],"published":true}},"next":{"fields":{"slug":"/spring-post-02/"},"frontmatter":{"title":"Spring 정리 -02","tags":["Spring","java"],"published":true}}}}}